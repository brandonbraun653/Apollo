<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="McASP" id="McASP">
  
  
  <register acronym="REV" description="The revision identification register (REV) contains identification data for the peripheral." id="REV" offset="0x0" width="32">
    
  <bitfield begin="31" description="Identifies revision of peripheral." end="0" id="REV" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="PWRIDLESYSCONFIG" description="" id="PWRIDLESYSCONFIG" offset="0x4" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"></bitfield>
    
  <bitfield begin="5" description="Reserved for future programming." end="2" id="Other" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="1" description="Power management Configuration of the local target state management mode. By definition, target can handle read/write transaction as long as it is out of IDLE state. " end="0" id="IDLEMODE" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="PFUNC" description="The pin function register (PFUNC) specifies the function of AXRn, ACLKX, AHCLKX, AFSX, ACLKR, AHCLKR, and AFSR pins as either a McASP pin or a general-purpose input/output (GPIO) pin. CAUTION: Writing a value other than 0 to reserved bits in this register may cause improper device operation." id="PFUNC" offset="0x10" width="32">
    
  <bitfield begin="31" description="Determines if AFSR pin functions as McASP or GPIO." end="31" id="AFSR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Determines if AHCLKR pin functions as McASP or GPIO." end="30" id="AHCLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Determines if ACLKR pin functions as McASP or GPIO." end="29" id="ACLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Determines if AFSX pin functions as McASP or GPIO." end="28" id="AFSX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Determines if AHCLKX pin functions as McASP or GPIO." end="27" id="AHCLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Determines if ACLKX pin functions as McASP or GPIO." end="26" id="ACLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Determines if AMUTE pin functions as McASP or GPIO." end="25" id="AMUTE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="" end="6" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="5" description="Determines if AXRn pin functions as McASP or GPIO." end="0" id="AXR_5_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="PDIR" description="The pin direction register (PDIR) specifies the direction of AXRn, ACLKX, AHCLKX, AFSX, ACLKR, AHCLKR, and AFSR pins as either an input or an output pin. Regardless of the pin function register (PFUNC) setting, each PDIR bit must be set to 1 for the specified pin to be enabled as an output and each PDIR bit must be cleared to 0 for the specified pin to be an input. For example, if the McASP is configured to use an internally-generated bit clock and the clock is to be driven out to the system, the PFUNC bit must be cleared to 0 (McASP function) and the PDIR bit must be set to 1 (an output). When AXRn is configured to transmit, the PFUNC bit must be cleared to 0 (McASP function) and the PDIR bit must be set to 1 (an output). Similarly, when AXRn is configured to receive, the PFUNC bit must be cleared to 0 (McASP function) and the PDIR bit must be cleared to 0 (an input). CAUTION: Writing a value other than 0 to reserved bits in this register may cause improper device operation." id="PDIR" offset="0x14" width="32">
    
  <bitfield begin="31" description="Determines if AFSR pin functions as an input or output." end="31" id="AFSR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Determines if AHCLKR pin functions as an input or output." end="30" id="AHCLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Determines if ACLKR pin functions as an input or output." end="29" id="ACLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Determines if AFSX pin functions as an input or output." end="28" id="AFSX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Determines if AHCLKX pin functions as an input or output." end="27" id="AHCLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Determines if ACLKX pin functions as an input or output." end="26" id="ACLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Determines if AMUTE pin functions as an input or output." end="25" id="AMUTE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="" end="6" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="5" description="Determines if AXRn pin functions as an input or output." end="0" id="AXR_5_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="PDOUT" description="The pin data output register (PDOUT) holds a value for data out at all times, and may be read back at all times. The value held by PDOUT is not affected by writing to PDIR and PFUNC. However, the data value in PDOUT is driven out onto the McASP pin only if the corresponding bit in PFUNC is set to 1 (GPIO function) and the corresponding bit in PDIR is set to 1 (output). When reading data, returns the corresponding bit value in PDOUT[n], does not return input from I/O pin; when writing data, writes to the corresponding PDOUT[n] bit. PDOUT has these aliases or alternate addresses: PDSET When written to at this address, writing a 1 to a bit in PDSET sets the corresponding bit in PDOUT to 1; writing a 0 has no effect and keeps the bits in PDOUT unchanged. PDCLR When written to at this address, writing a 1 to a bit in PDCLR clears the corresponding bit in PDOUT to 0; writing a 0 has no effect and keeps the bits in PDOUT unchanged. There is only one set of data out bits, PDOUT[31-0]. The other registers, PDSET and PDCLR, are just different addresses for the same control bits, with different behaviors during writes. CAUTION: Writing a value other than 0 to reserved bits in this register may cause improper device operation." id="PDOUT" offset="0x18" width="32">
    
  <bitfield begin="31" description="Determines drive on AFSR output pin when the corresponding PFUNC[31] and PDIR[31] bits are set to 1." end="31" id="AFSR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Determines drive on AHCLKR output pin when the corresponding PFUNC[30] and PDIR[30] bits are set to 1." end="30" id="AHCLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Determines drive on ACLKR output pin when the corresponding PFUNC[29] and PDIR[29] bits are set to 1." end="29" id="ACLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Determines drive on AFSX output pin when the corresponding PFUNC[28] and PDIR[28] bits are set to 1." end="28" id="AFSX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Determines drive on AHCLKX output pin when the corresponding PFUNC[27] and PDIR[27] bits are set to 1." end="27" id="AHCLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Determines drive on ACLKX output pin when the corresponding PFUNC[26] and PDIR[26] bits are set to 1." end="26" id="ACLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Determines drive on AMUTE output pin when the corresponding PFUNC[25] and PDIR[25] bits are set to 1." end="25" id="AMUTE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="" end="6" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="5" description="Determines drive on AXR[n] output pin when the corresponding PFUNC[n] and PDIR[n] bits are set to 1." end="0" id="AXR_5_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="PDSET" description="The pin data set register (PDSET) is an alias of the pin data output register (PDOUT) for writes only. Writing a 1 to the PDSET bit sets the corresponding bit in PDOUT and, if PFUNC = 1 (GPIO function) and PDIR = 1 (output), drives a logic high on the pin. PDSET is useful for a multitasking system because it allows you to set to a logic high only the desired pin(s) within a system without affecting other I/O pins controlled by the same McASP. CAUTION: Writing a value other than 0 to reserved bits in this register may cause improper device operation." id="PDSET" offset="0x1C" width="32">
    
  <bitfield begin="31" description="Allows the corresponding AFSR bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="31" id="AFSR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Allows the corresponding AHCLKR bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="30" id="AHCLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Allows the corresponding ACLKR bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="29" id="ACLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Allows the corresponding AFSX bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="28" id="AFSX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Allows the corresponding AHCLKX bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="27" id="AHCLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Allows the corresponding ACLKX bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="26" id="ACLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Allows the corresponding AMUTE bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="25" id="AMUTE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="" end="6" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="5" description="Allows the corresponding AXR[n] bit in PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." end="0" id="AXR_5_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="PDIN" description="The pin data input register (PDIN) holds the I/O pin state of each of the McASP pins. PDIN allows the actual value of the pin to be read, regardless of the state of PFUNC and PDIR. The value after reset for registers 1 through 15 and 24 through 31 depends on how the pins are being driven. CAUTION: Writing a value other than 0 to reserved bits in this register may cause improper device operation." id="PDIN" offset="0x1C" width="32">
    
  <bitfield begin="31" description="Logic level on AFSR pin." end="31" id="AFSR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Logic level on AHCLKR pin." end="30" id="AHCLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Logic level on ACLKR pin." end="29" id="ACLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Logic level on AFSX pin." end="28" id="AFSX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Logic level on AHCLKX pin." end="27" id="AHCLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Logic level on ACLKX pin." end="26" id="ACLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Logic level on AMUTE pin." end="25" id="AMUTE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="" end="6" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="5" description="Logic level on AXR[n] pin." end="0" id="AXR_5_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="PDCLR" description="The pin data clear register (PDCLR) is an alias of the pin data output register (PDOUT) for writes only. Writing a 1 to the PDCLR bit clears the corresponding bit in PDOUT and, if PFUNC = 1 (GPIO function) and PDIR = 1 (output), drives a logic low on the pin. PDCLR is useful for a multitasking system because it allows you to clear to a logic low only the desired pin(s) within a system without affecting other I/O pins controlled by the same McASP. CAUTION: Writing a value other than 0 to reserved bits in this register may cause improper device operation." id="PDCLR" offset="0x20" width="32">
    
  <bitfield begin="31" description="Allows the corresponding AFSR bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="31" id="AFSR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Allows the corresponding AHCLKR bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="30" id="AHCLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Allows the corresponding ACLKR bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="29" id="ACLKR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Allows the corresponding AFSX bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="28" id="AFSX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Allows the corresponding AHCLKX bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="27" id="AHCLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Allows the corresponding ACLKX bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="26" id="ACLKX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Allows the corresponding AMUTE bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="25" id="AMUTE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="" end="6" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="5" description="Allows the corresponding AXR[n] bit in PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." end="0" id="AXR_5_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="GBLCTL" description="The global control register (GBLCTL) provides initialization of the transmit and receive sections. The bit fields in GBLCTL are synchronized and latched by the corresponding clocks (ACLKX for bits 12-8 and ACLKR for bits 4-0). Before GBLCTL is programmed, you must ensure that serial clocks are running. If the corresponding external serial clocks, ACLKX and ACLKR, are not yet running, you should select the internal serial clock source in AHCLKXCTL, AHCLKRCTL, ACLKXCTL, and ACLKRCTL before GBLCTL is programmed. Also, after programming any bits in GBLCTL you should not proceed until you have read back from GBLCTL and verified that the bits are latched in GBLCTL." id="GBLCTL" offset="0x44" width="32">
    
  <bitfield begin="31" description="" end="13" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="12" description="Transmit frame sync generator reset enable bit." end="12" id="XFRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Transmit state machine reset enable bit." end="11" id="XSMRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Transmit serializer clear enable bit. By clearing then setting this bit, the transmit buffer is flushed to an empty state (XDATA = 1). If XSMRST = 1, XSRCLR = 1, XDATA = 1, and XBUF is not loaded with new data before the start of the next active time slot, an underrun will occur." end="10" id="XSRCLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Transmit high-frequency clock divider reset enable bit." end="9" id="XHCLKRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Transmit clock divider reset enable bit." end="8" id="XCLKRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="" end="5" id="Reserved2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description="Receive frame sync generator reset enable bit." end="4" id="RFRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Receive state machine reset enable bit." end="3" id="RSMRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Receive serializer clear enable bit. By clearing then setting this bit, the receive buffer is flushed." end="2" id="RSRCLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Receive high-frequency clock divider reset enable bit." end="1" id="RHCLKRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Receive high-frequency clock divider reset enable bit." end="0" id="RCLKRST" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AMUTE" description="The audio mute control register (AMUTE) controls the McASP audio mute (AMUTE) output pin. The value after reset for register 4 depends on how the pins are being driven." id="AMUTE" offset="0x48" width="32">
    
  <bitfield begin="31" description="" end="13" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="12" description="If transmit DMA error (XDMAERR), drive AMUTE active enable bit." end="12" id="XDMAERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="If receive DMA error (RDMAERR), drive AMUTE active enable bit." end="11" id="RDMAERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="If transmit clock failure (XCKFAIL), drive AMUTE active enable bit." end="10" id="XCKFAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="If receive clock failure (RCKFAIL), drive AMUTE active enable bit." end="9" id="RCKFAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="If unexpected transmit frame sync error (XSYNCERR), drive AMUTE active enable bit." end="8" id="XSYNCERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="If unexpected receive frame sync error (RSYNCERR), drive AMUTE active enable bit." end="7" id="RSYNCERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="If transmit underrun error (XUNDRN), drive AMUTE active enable bit." end="6" id="XUNDRN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="If receiver overrun error (ROVRN), drive AMUTE active enable bit." end="5" id="ROVRN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Determines drive on AXRn pin when PFUNC[n] and PDIR[n] bits are set to 1." end="4" id="INSTAT" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Drive AMUTE active when AMUTEIN error is active (INSTAT = 1)." end="3" id="INEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Audio mute in (AMUTEIN) polarity select bit." end="2" id="INPOL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="AMUTE pin enable bit (unless overridden by GPIO registers)." end="0" id="MUTEN" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="DLBCTL" description="The digital loopback control register (DLBCTL) controls the internal loopback settings of the McASP in TDM mode." id="DLBCTL" offset="0x4C" width="32">
    
  <bitfield begin="31" description="" end="4" id="Reserved1" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="Loopback generator mode bits. Applies only when loopback mode is enabled (DLBEN = 1)." end="2" id="MODE" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="1" description="Loopback order bit when loopback mode is enabled (DLBEN = 1)." end="1" id="ORD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Loopback mode enable bit." end="0" id="DLBEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="DITCTL" description="The DIT mode control register (DITCTL) controls DIT operations of the McASP." id="DITCTL" offset="0x50" width="32">
    
  <bitfield begin="31" description="" end="4" id="Reserved1" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="Valid bit for odd time slots (DIT right subframe)." end="3" id="VB" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Valid bit for even time slots (DIT left subframe)." end="2" id="VA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="" end="1" id="Reserved2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="DIT mode enable bit. DITEN should only be changed while the XSMRST bit in GBLCTL is in reset (and for startup, XSRCLR also in reset). However, it is not necessary to reset the XCLKRST or XHCLKRST bits in GBLCTL to change DITEN." end="0" id="DITEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RGBLCTL" description="Alias of the global control register (GBLCTL). Writing to the receiver global control register (RGBLCTL) affects only the receive bits of GBLCTL (bits 4-0). Reads from RGBLCTL return the value of GBLCTL. RGBLCTL allows the receiver to be reset independently from the transmitter." id="RGBLCTL" offset="0x60" width="32">
    
  <bitfield begin="31" description="" end="13" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="12" description="Transmit frame sync generator reset enable bit. A read of this bit returns the XFRST bit value of GBLCTL. Writes have no effect." end="12" id="XFRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="11" description="Transmit state machine reset enable bit. A read of this bit returns the XSMRST bit value of GBLCTL. Writes have no effect." end="11" id="XSMRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="10" description="Transmit serializer clear enable bit. A read of this bit returns the XSRCLR bit value of GBLCTL. Writes have no effect." end="10" id="XSRCLR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="9" description="Transmit high-frequency clock divider reset enable bit. A read of this bit returns the XHCLKRST bit value of GBLCTL. Writes have no effect." end="9" id="XHCLKRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="8" description="Transmit clock divider reset enable bit. A read of this bit returns the XCLKRST bit value of GBLCTL. Writes have no effect." end="8" id="XCLKRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="7" description="" end="5" id="Reserved2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description="Receive frame sync generator reset enable bit. A write to this bit affects the RFRST bit of GBLCTL." end="4" id="RFRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Receive state machine reset enable bit. A write to this bit affects the RSMRST bit of GBLCTL." end="3" id="RSMRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Receive serializer clear enable bit. A write to this bit affects the RSRCLR bit of GBLCTL." end="2" id="RSRCLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Receive high-frequency clock divider reset enable bit. A write to this bit affects the RHCLKRST bit of GBLCTL." end="1" id="RHCLKRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Receive clock divider reset enable bit. A write to this bit affects the RCLKRST bit of GBLCTL." end="0" id="RCLKRST" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RMASK" description="The receive format unit bit mask register (RMASK) determines which bits of the received data are masked off and padded with a known value before being read by the CPU or DMA." id="RMASK" offset="0x64" width="32">
    
  <bitfield begin="31" description="Receive data mask n enable bit." end="0" id="RMASK_31_0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RFMT" description="The receive bit stream format register (RFMT) configures the receive data format." id="RFMT" offset="0x68" width="32">
    
  <bitfield begin="31" description="" end="18" id="Reserved1" rwaccess="R" width="14"></bitfield>
    
  <bitfield begin="17" description="Receive bit delay." end="16" id="RDATDLY" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="15" description="Receive serial bitstream order." end="15" id="RRVRS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Pad value for extra bits in slot not belonging to the word. This field only applies to bits when RMASK[n] = 0." end="13" id="RPAD" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="RPBIT value determines which bit (as read by the CPU or DMA from RBUF[n]) is used to pad the extra bits. This field only applies when RPAD = 2h." end="8" id="RPBIT" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="7" description="Receive slot size." end="4" id="RSSZ" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Selects whether reads from serializer buffer XRBUF[n] originate from the configuration bus (CFG) or the data (DAT) port." end="3" id="RBUSEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Right-rotation value for receive rotate right format unit." end="0" id="RROT" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="AFSRCTL" description="The receive frame sync control register (AFSRCTL) configures the receive frame sync (AFSR)." id="AFSRCTL" offset="0x6C" width="32">
    
  <bitfield begin="31" description="" end="16" id="Reserved1" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="Receive frame sync mode select bits. 1FFh = Reserved from 181h to 1FFh." end="7" id="RMOD" rwaccess="RW" width="9"></bitfield>
    
  <bitfield begin="6" description="" end="5" id="Reserved2" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="4" description="Receive frame sync width select bit indicates the width of the receive frame sync (AFSR) during its active period." end="4" id="FRWID" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="" end="2" id="Reserved3" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="1" description="Receive frame sync generation select bit." end="1" id="FSRM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Receive frame sync polarity select bit." end="0" id="FSRP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ACLKRCTL" description="The receive clock control register (ACLKRCTL) configures the receive bit clock (ACLKR) and the receive clock generator." id="ACLKRCTL" offset="0x70" width="32">
    
  <bitfield begin="31" description="" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Receive bitstream clock polarity select bit." end="7" id="CLKRP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="" end="6" id="Reserved2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Receive bit clock source bit. Note that this bit does not have any effect, if ACLKXCTL.ASYNC = 0." end="5" id="CLKRM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Receive bit clock divide ratio bits determine the divide-down ratio from AHCLKR to ACLKR. Note that this bit does not have any effect, if ACLKXCTL.ASYNC = 0." end="0" id="CLKRDIV" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="AHCLKRCTL" description="The receive high-frequency clock control register (AHCLKRCTL) configures the receive high-frequency master clock (AHCLKR) and the receive clock generator." id="AHCLKRCTL" offset="0x74" width="32">
    
  <bitfield begin="31" description="" end="16" id="Reserved1" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="Receive high-frequency clock source bit." end="15" id="HCLKRM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Receive bitstream high-frequency clock polarity select bit." end="14" id="HCLKRP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="" end="12" id="Reserved2" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="11" description="Receive high-frequency clock divide ratio bits determine the divide-down ratio from AUXCLK to AHCLKR." end="0" id="HCLKRDIV" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="RTDM" description="The receive TDM time slot register (RTDM) specifies which TDM time slot the receiver is active." id="RTDM" offset="0x78" width="32">
    
  <bitfield begin="31" description="Receiver mode during TDM time slot n." end="0" id="RTDMS_31_0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RINTCTL" description="The receiver interrupt control register (RINTCTL) controls generation of the McASP receive interrupt (RINT). When the register bit(s) is set to 1, the occurrence of the enabled McASP condition(s) generates RINT. See the RSTAT register for a description of the interrupt conditions." id="RINTCTL" offset="0x7C" width="32">
    
  <bitfield begin="31" description="" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Receive start of frame interrupt enable bit." end="7" id="RSTAFRM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="" end="6" id="Reserved2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Receive data ready interrupt enable bit." end="5" id="RDATA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Receive last slot interrupt enable bit." end="4" id="RLAST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Receive DMA error interrupt enable bit." end="3" id="RDMAERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Receive clock failure interrupt enable bit." end="2" id="RCKFAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Unexpected receive frame sync interrupt enable bit." end="1" id="RSYNCERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Receiver overrun interrupt enable bit." end="0" id="ROVRN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RSTAT" description="The receiver status register (RSTAT) provides the receiver status and receive TDM time slot number. If the McASP logic attempts to set an interrupt flag in the same cycle that the CPU writes to the flag to clear it, the McASP logic has priority and the flag remains set. This also causes a new interrupt request to be generated." id="RSTAT" offset="0x80" width="32">
    
  <bitfield begin="31" description="" end="9" id="Reserved1" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="RERR bit always returns a logic-OR of: ROVRN OR RSYNCERR OR RCKFAIL OR RDMAERR. Allows a single bit to be checked to determine if a receiver error interrupt has occurred." end="8" id="RERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Receive DMA error flag. RDMAERR is set when the CPU or DMA reads more serializers through the data port in a given time slot than were programmed as receivers. Causes a receive interrupt (RINT), if this bit is set and RDMAERR in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="7" id="RDMAERR" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="6" description="Receive start of frame flag. Causes a receive interrupt (RINT), if this bit is set and RSTAFRM in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="6" id="RSTAFRM" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="5" description="Receive data ready flag. Causes a receive interrupt (RINT), if this bit is set and RDATA in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="5" id="RDATA" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="4" description="Receive last slot flag. RLAST is set along with RDATA, if the current slot is the last slot in a frame. Causes a receive interrupt (RINT), if this bit is set and RLAST in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="4" id="RLAST" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="3" description="Returns the LSB of RSLOT. Allows a single read of RSTAT to determine whether the current TDM time slot is even or odd." end="3" id="RTDMSLOT" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Receive clock failure flag. RCKFAIL is set when the receive clock failure detection circuit reports an error. Causes a receive interrupt (RINT), if this bit is set and RCKFAIL in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="2" id="RCKFAIL" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="1" description="Unexpected receive frame sync flag. RSYNCERR is set when a new receive frame sync (AFSR) occurs before it is expected. Causes a receive interrupt (RINT), if this bit is set and RSYNCERR in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="1" id="RSYNCERR" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="0" description="Receiver overrun flag. ROVRN is set when the receive serializer is instructed to transfer data from XRSR to RBUF, but the former data in RBUF has not yet been read by the CPU or DMA. Causes a receive interrupt (RINT), if this bit is set and ROVRN in RINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." end="0" id="ROVRN" rwaccess="R/W1C" width="1"></bitfield>
  </register>
  
  
  <register acronym="RSLOT" description="The current receive TDM time slot register (RSLOT) indicates the current time slot for the receive data frame." id="RSLOT" offset="0x84" width="32">
    
  <bitfield begin="31" description="" end="9" id="Reserved1" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="0-17Fh = Current receive time slot count. Legal values: 0 to 383 (17Fh). TDM function is not supported for > 32 time slots. However, TDM time slot counter may count to 383 when used to receive a DIR block (transferred over TDM format)." end="0" id="RSLOTCNT" rwaccess="R" width="9"></bitfield>
  </register>
  
  
  <register acronym="RCLKCHK" description="The receive clock check control register (RCLKCHK) configures the receive clock failure detection circuit." id="RCLKCHK" offset="0x88" width="32">
    
  <bitfield begin="31" description="Receive clock count value (from previous measurement). The clock circuit continually counts the number of system clocks for every 32 receive high-frequency master clock (AHCLKR) signals, and stores the count in RCNT until the next measurement is taken." end="24" id="RCNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="Receive clock maximum boundary. This 8 bit unsigned value sets the maximum allowed boundary for the clock check counter after 32 receive high-frequency master clock (AHCLKR) signals have been received. If the current counter value is greater than RMAX after counting 32 AHCLKR signals, RCKFAIL in RSTAT is set. The comparison is performed using unsigned arithmetic." end="16" id="RMAX" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Receive clock minimum boundary. This 8 bit unsigned value sets the minimum allowed boundary for the clock check counter after 32 receive high-frequency master clock (AHCLKR) signals have been received. If RCNT is less than RMIN after counting 32 AHCLKR signals, RCKFAIL in RSTAT is set. The comparison is performed using unsigned arithmetic." end="8" id="RMIN" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="" end="4" id="Reserved1" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="3" description="Receive clock check prescaler value." end="0" id="RPS" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="REVTCTL" description="The receiver DMA event control register (REVTCTL) contains a disable bit for the receiver DMA event. Note for device-specific registers: Accessing REVTCTL not implemented on a specific device may cause improper operation." id="REVTCTL" offset="0x8C" width="32">
    
  <bitfield begin="31" description="" end="1" id="Reserved1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="Receive data DMA request enable bit. If writing to this bit, always write the default value of 0." end="0" id="RDATDMA" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="XGBLCTL" description="Alias of the global control register (GBLCTL). Writing to the transmitter global control register (XGBLCTL) affects only the transmit bits of GBLCTL (bits 12-8). Reads from XGBLCTL return the value of GBLCTL. XGBLCTL allows the transmitter to be reset independently from the receiver. See the GBLCTL register for a detailed description of GBLCTL." id="XGBLCTL" offset="0xA0" width="32">
    
  <bitfield begin="31" description="" end="13" id="Reserved1" rwaccess="R" width="19"></bitfield>
    
  <bitfield begin="12" description="Transmit frame sync generator reset enable bit. A write to this bit affects the XFRST bit of GBLCTL." end="12" id="XFRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Transmit state machine reset enable bit. A write to this bit affects the XSMRST bit of GBLCTL." end="11" id="XSMRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Transmit serializer clear enable bit. A write to this bit affects the XSRCLR bit of GBLCTL." end="10" id="XSRCLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Transmit high-frequency clock divider reset enable bit. A write to this bit affects the XHCLKRST bit of GBLCTL." end="9" id="XHCLKRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Transmit clock divider reset enable bit. A write to this bit affects the XCLKRST bit of GBLCTL." end="8" id="XCLKRST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="" end="5" id="Reserved2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description="Receive frame sync generator reset enable bit. A read of this bit returns the RFRST bit value of GBLCTL. Writes have no effect." end="4" id="RFRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Receive state machine reset enable bit. A read of this bit returns the RSMRST bit value of GBLCTL. Writes have no effect." end="3" id="RSMRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Receive serializer clear enable bit. A read of this bit returns the RSRSCLR bit value of GBLCTL. Writes have no effect." end="2" id="RSRCLR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="Receive high-frequency clock divider reset enable bit. A read of this bit returns the RHCLKRST bit value of GBLCTL. Writes have no effect." end="1" id="RHCLKRST" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Receive clock divider reset enable bit. A read of this bit returns the RCLKRST bit value of GBLCTL. Writes have no effect." end="0" id="RCLKRST" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="XMASK" description="The transmit format unit bit mask register (XMASK) determines which bits of the transmitted data are masked off and padded with a known value before being shifted out the McASP." id="XMASK" offset="0xA4" width="32">
    
  <bitfield begin="31" description="Transmit data mask n enable bit." end="0" id="XMASK_31_0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="XFMT" description="The transmit bit stream format register (XFMT) configures the transmit data format." id="XFMT" offset="0xA8" width="32">
    
  <bitfield begin="31" description="" end="18" id="Reserved1" rwaccess="R" width="14"></bitfield>
    
  <bitfield begin="17" description="Transmit sync bit delay." end="16" id="XDATDLY" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="15" description="Transmit serial bitstream order." end="15" id="XRVRS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Pad value for extra bits in slot not belonging to word defined by XMASK. This field only applies to bits when XMASK[n] = 0." end="13" id="XPAD" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="XPBIT value determines which bit (as written by the CPU or DMA to XBUF[n]) is used to pad the extra bits before shifting. This field only applies when XPAD = 2h." end="8" id="XPBIT" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="7" description="Transmit slot size." end="4" id="XSSZ" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Selects whether writes to serializer buffer XRBUF[n] originate from the configuration bus (CFG) or the data (DAT) port." end="3" id="XBUSEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Right-rotation value for transmit rotate right format unit." end="0" id="XROT" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="AFSXCTL" description="The transmit frame sync control register (AFSXCTL) configures the transmit frame sync (AFSX)." id="AFSXCTL" offset="0xAC" width="32">
    
  <bitfield begin="31" description="" end="16" id="Reserved1" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="Transmit frame sync mode select bits. 1FFh = Reserved from 181h to 1FFh." end="7" id="XMOD" rwaccess="RW" width="9"></bitfield>
    
  <bitfield begin="6" description="" end="5" id="Reserved2" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="4" description="Transmit frame sync width select bit indicates the width of the transmit frame sync (AFSX) during its active period." end="4" id="FXWID" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="" end="2" id="Reserved3" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="1" description="Transmit frame sync generation select bit." end="1" id="FSXM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Transmit frame sync polarity select bit." end="0" id="FSXP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ACLKXCTL" description="The transmit clock control register (ACLKXCTL) configures the transmit bit clock (ACLKX) and the transmit clock generator." id="ACLKXCTL" offset="0xB0" width="32">
    
  <bitfield begin="31" description="" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Transmit bitstream clock polarity select bit." end="7" id="CLKXP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Transmit/receive operation asynchronous enable bit." end="6" id="ASYNC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Transmit bit clock source bit." end="5" id="CLKXM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Transmit bit clock divide ratio bits determine the divide-down ratio from AHCLKX to ACLKX." end="0" id="CLKXDIV" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="AHCLKXCTL" description="The transmit high-frequency clock control register (AHCLKXCTL) configures the transmit high-frequency master clock (AHCLKX) and the transmit clock generator." id="AHCLKXCTL" offset="0xB4" width="32">
    
  <bitfield begin="31" description="" end="16" id="Reserved1" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="Transmit high-frequency clock source bit." end="15" id="HCLKXM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Transmit bitstream high-frequency clock polarity select bit." end="14" id="HCLKXP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="" end="12" id="Reserved2" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="11" description="Transmit high-frequency clock divide ratio bits determine the divide-down ratio from AUXCLK to AHCLKX." end="0" id="HCLKXDIV" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="XTDM" description="The transmit TDM time slot register (XTDM) specifies in which TDM time slot the transmitter is active. TDM time slot counter range is extended to 384 slots (to support SPDIF blocks of 384 subframes). XTDM operates modulo 32, that is, XTDMS specifies the TDM activity for time slots 0, 32, 64, 96, 128, and so on." id="XTDM" offset="0xB8" width="32">
    
  <bitfield begin="31" description="Transmitter mode during TDM time slot n." end="0" id="XTDMS_31_0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="XINTCTL" description="The transmitter interrupt control register (XINTCTL) controls generation of the McASP transmit interrupt (XINT). When the register bit(s) is set to 1, the occurrence of the enabled McASP condition(s) generates XINT. See the XSTAT register for a description of the interrupt conditions." id="XINTCTL" offset="0xBC" width="32">
    
  <bitfield begin="31" description="" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Transmit start of frame interrupt enable bit." end="7" id="XSTAFRM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="" end="6" id="Reserved2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Transmit data ready interrupt enable bit." end="5" id="XDATA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Transmit last slot interrupt enable bit." end="4" id="XLAST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Transmit DMA error interrupt enable bit." end="3" id="XDMAERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Transmit clock failure interrupt enable bit." end="2" id="XCKFAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Unexpected transmit frame sync interrupt enable bit." end="1" id="XSYNCERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Transmitter underrun interrupt enable bit." end="0" id="XUNDRN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="XSTAT" description="The transmitter status register (XSTAT) provides the transmitter status and transmit TDM time slot number. If the McASP logic attempts to set an interrupt flag in the same cycle that the CPU writes to the flag to clear it, the McASP logic has priority and the flag remains set. This also causes a new interrupt request to be generated." id="XSTAT" offset="0xC0" width="32">
    
  <bitfield begin="31" description="" end="9" id="Reserved1" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="XERR bit always returns a logic-OR of: XUNDRN OR XSYNCERR OR XCKFAIL OR XDMAERR. Allows a single bit to be checked to determine if a transmitter error interrupt has occurred." end="8" id="XERR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Transmit DMA error flag. XDMAERR is set when the CPU or DMA writes more serializers through the data port in a given time slot than were programmed as transmitters. Causes a transmit interrupt (XINT), if this bit is set and XDMAERR in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="7" id="XDMAERR" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="6" description="Transmit start of frame flag. Causes a transmit interrupt (XINT), if this bit is set and XSTAFRM in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="6" id="XSTAFRM" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="5" description="Transmit data ready flag. Causes a transmit interrupt (XINT), if this bit is set and XDATA in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="5" id="XDATA" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="4" description="Transmit last slot flag. XLAST is set along with XDATA, if the current slot is the last slot in a frame. Causes a transmit interrupt (XINT), if this bit is set and XLAST in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="4" id="XLAST" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="3" description="Returns the LSB of XSLOT. Allows a single read of XSTAT to determine whether the current TDM time slot is even or odd." end="3" id="XTDMSLOT" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Transmit clock failure flag. XCKFAIL is set when the transmit clock failure detection circuit reports an error. Causes a transmit interrupt (XINT), if this bit is set and XCKFAIL in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="2" id="XCKFAIL" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="1" description="Unexpected transmit frame sync flag. XSYNCERR is set when a new transmit frame sync (AFSX) occurs before it is expected. Causes a transmit interrupt (XINT), if this bit is set and XSYNCERR in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="1" id="XSYNCERR" rwaccess="R/W1C" width="1"></bitfield>
    
  <bitfield begin="0" description="Transmitter underrun flag. XUNDRN is set when the transmit serializer is instructed to transfer data from XBUF to XRSR, but XBUF has not yet been serviced with new data since the last transfer. Causes a transmit interrupt (XINT), if this bit is set and XUNDRN in XINTCTL is set. This bit is cleared by writing a 1 to this bit. Writing a 0 has no effect." end="0" id="XUNDRN" rwaccess="R/W1C" width="1"></bitfield>
  </register>
  
  
  <register acronym="XSLOT" description="The current transmit TDM time slot register (XSLOT) indicates the current time slot for the transmit data frame." id="XSLOT" offset="0xC4" width="32">
    
  <bitfield begin="31" description="" end="10" id="Reserved1" rwaccess="R" width="22"></bitfield>
    
  <bitfield begin="9" description="Current transmit time slot count. Legal values: 0 to 383 (17Fh). During reset, this counter value is 383 so the next count value, which is used to encode the first DIT group of data, will be 0 and encodes the B preamble. TDM function is not supported for >32 time slots. However, TDM time slot counter may count to 383 when used to transmit a DIT block." end="0" id="XSLOTCNT" rwaccess="R" width="10"></bitfield>
  </register>
  
  
  <register acronym="XCLKCHK" description="The transmit clock check control register (XCLKCHK) configures the transmit clock failure detection circuit." id="XCLKCHK" offset="0xC8" width="32">
    
  <bitfield begin="31" description="Transmit clock count value (from previous measurement). The clock circuit continually counts the number of system clocks for every 32 transmit high-frequency master clock (AHCLKX) signals, and stores the count in XCNT until the next measurement is taken." end="24" id="XCNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="Transmit clock maximum boundary. This 8 bit unsigned value sets the maximum allowed boundary for the clock check counter after 32 transmit high-frequency master clock (AHCLKX) signals have been received. If the current counter value is greater than XMAX after counting 32 AHCLKX signals, XCKFAIL in XSTAT is set. The comparison is performed using unsigned arithmetic." end="16" id="XMAX" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Transmit clock minimum boundary. This 8 bit unsigned value sets the minimum allowed boundary for the clock check counter after 32 transmit high-frequency master clock (AHCLKX) signals have been received. If XCNT is less than XMIN after counting 32 AHCLKX signals, XCKFAIL in XSTAT is set. The comparison is performed using unsigned arithmetic." end="8" id="XMIN" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="" end="4" id="Reserved1" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="3" description="Transmit clock check prescaler value. Fh = Reserved from 9h to Fh." end="0" id="XPS" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="XEVTCTL" description="The transmitter DMA event control register (XEVTCTL) contains a disable bit for the transmit DMA event. Note for device-specific registers: Accessing XEVTCTL not implemented on a specific device may cause improper device operation." id="XEVTCTL" offset="0xCC" width="32">
    
  <bitfield begin="31" description="" end="1" id="Reserved1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="Transmit data DMA request enable bit. If writing to this bit, always write the default value of 0." end="0" id="XDATDMA" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="DITCSRA_0" description="The DIT left channel status registers (DITCSRA) provide the status of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRA_0" offset="0x100" width="32">
    
  <bitfield begin="31" description="DIT left channel status registers." end="0" id="DITCSRA_n" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DITCSRA_1" description="The DIT left channel status registers (DITCSRA) provide the status of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRA_1" offset="0x104" width="32">
    
  <bitfield begin="31" description="DIT left channel status registers." end="0" id="DITCSRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRA_2" description="The DIT left channel status registers (DITCSRA) provide the status of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRA_2" offset="0x108" width="32">
    
  <bitfield begin="31" description="DIT left channel status registers." end="0" id="DITCSRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRA_3" description="The DIT left channel status registers (DITCSRA) provide the status of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRA_3" offset="0x10C" width="32">
    
  <bitfield begin="31" description="DIT left channel status registers." end="0" id="DITCSRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRA_4" description="The DIT left channel status registers (DITCSRA) provide the status of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRA_4" offset="0x110" width="32">
    
  <bitfield begin="31" description="DIT left channel status registers." end="0" id="DITCSRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRA_5" description="The DIT left channel status registers (DITCSRA) provide the status of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRA_5" offset="0x114" width="32">
    
  <bitfield begin="31" description="DIT left channel status registers." end="0" id="DITCSRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRB_0" description="The DIT right channel status registers (DITCSRB) provide the status of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRB_0" offset="0x118" width="32">
    
  <bitfield begin="31" description="DIT right channel status registers." end="0" id="DITCSRB_n" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DITCSRB_1" description="The DIT right channel status registers (DITCSRB) provide the status of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRB_1" offset="0x11C" width="32">
    
  <bitfield begin="31" description="DIT right channel status registers." end="0" id="DITCSRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRB_2" description="The DIT right channel status registers (DITCSRB) provide the status of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRB_2" offset="0x120" width="32">
    
  <bitfield begin="31" description="DIT right channel status registers." end="0" id="DITCSRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRB_3" description="The DIT right channel status registers (DITCSRB) provide the status of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRB_3" offset="0x124" width="32">
    
  <bitfield begin="31" description="DIT right channel status registers." end="0" id="DITCSRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRB_4" description="The DIT right channel status registers (DITCSRB) provide the status of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRB_4" offset="0x128" width="32">
    
  <bitfield begin="31" description="DIT right channel status registers." end="0" id="DITCSRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITCSRB_5" description="The DIT right channel status registers (DITCSRB) provide the status of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register file in time, if a different set of data need to be sent. " id="DITCSRB_5" offset="0x12C" width="32">
    
  <bitfield begin="31" description="DIT right channel status registers." end="0" id="DITCSRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRA_0" description="The DIT left channel user data registers (DITUDRA) provides the user data of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRA_0" offset="0x130" width="32">
    
  <bitfield begin="31" description="DIT left channel user data registers." end="0" id="DITUDRA_n" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DITUDRA_1" description="The DIT left channel user data registers (DITUDRA) provides the user data of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRA_1" offset="0x134" width="32">
    
  <bitfield begin="31" description="DIT left channel user data registers." end="0" id="DITUDRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRA_2" description="The DIT left channel user data registers (DITUDRA) provides the user data of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRA_2" offset="0x138" width="32">
    
  <bitfield begin="31" description="DIT left channel user data registers." end="0" id="DITUDRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRA_3" description="The DIT left channel user data registers (DITUDRA) provides the user data of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRA_3" offset="0x13C" width="32">
    
  <bitfield begin="31" description="DIT left channel user data registers." end="0" id="DITUDRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRA_4" description="The DIT left channel user data registers (DITUDRA) provides the user data of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRA_4" offset="0x140" width="32">
    
  <bitfield begin="31" description="DIT left channel user data registers." end="0" id="DITUDRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRA_5" description="The DIT left channel user data registers (DITUDRA) provides the user data of each left channel (even TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRA_5" offset="0x144" width="32">
    
  <bitfield begin="31" description="DIT left channel user data registers." end="0" id="DITUDRA_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRB_0" description="The DIT right channel user data registers (DITUDRB) provides the user data of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRB_0" offset="0x148" width="32">
    
  <bitfield begin="31" description="DIT right channel user data registers." end="0" id="DITUDRB_n" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DITUDRB_1" description="The DIT right channel user data registers (DITUDRB) provides the user data of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRB_1" offset="0x14C" width="32">
    
  <bitfield begin="31" description="DIT right channel user data registers." end="0" id="DITUDRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRB_2" description="The DIT right channel user data registers (DITUDRB) provides the user data of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRB_2" offset="0x150" width="32">
    
  <bitfield begin="31" description="DIT right channel user data registers." end="0" id="DITUDRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRB_3" description="The DIT right channel user data registers (DITUDRB) provides the user data of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRB_3" offset="0x154" width="32">
    
  <bitfield begin="31" description="DIT right channel user data registers." end="0" id="DITUDRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRB_4" description="The DIT right channel user data registers (DITUDRB) provides the user data of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRB_4" offset="0x158" width="32">
    
  <bitfield begin="31" description="DIT right channel user data registers." end="0" id="DITUDRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="DITUDRB_5" description="The DIT right channel user data registers (DITUDRB) provides the user data of each right channel (odd TDM time slot). Each of the six 32-bit registers ( ) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. It is your responsibility to update the register in time, if a different set of data need to be sent. " id="DITUDRB_5" offset="0x15C" width="32">
    
  <bitfield begin="31" description="DIT right channel user data registers." end="0" id="DITUDRB_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="SRCTL_0" description="Each serializer on the McASP has a serializer control register (SRCTL). There are up to 16 serializers per McASP. Note for device-specific registers: Accessing SRCTLn not implemented on a specific device may cause improper device operation." id="SRCTL_0" offset="0x180" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"></bitfield>
    
  <bitfield begin="5" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSR to RBUF." end="5" id="RRDY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." end="4" id="XRDY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a McASP pin (PFUNC = 0)." end="2" id="DISMOD" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="1" description="Serializer mode bit." end="0" id="SRMOD" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="SRCTL_1" description="Each serializer on the McASP has a serializer control register (SRCTL). There are up to 16 serializers per McASP. Note for device-specific registers: Accessing SRCTLn not implemented on a specific device may cause improper device operation." id="SRCTL_1" offset="0x184" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"/>
    
  <bitfield begin="5" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSR to RBUF." end="5" id="RRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="4" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." end="4" id="XRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="3" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a McASP pin (PFUNC = 0)." end="2" id="DISMOD" rwaccess="RW" width="2"/>
    
  <bitfield begin="1" description="Serializer mode bit." end="0" id="SRMOD" rwaccess="RW" width="2"/>
  </register>
  
  
  <register acronym="SRCTL_2" description="Each serializer on the McASP has a serializer control register (SRCTL). There are up to 16 serializers per McASP. Note for device-specific registers: Accessing SRCTLn not implemented on a specific device may cause improper device operation." id="SRCTL_2" offset="0x188" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"/>
    
  <bitfield begin="5" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSR to RBUF." end="5" id="RRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="4" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." end="4" id="XRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="3" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a McASP pin (PFUNC = 0)." end="2" id="DISMOD" rwaccess="RW" width="2"/>
    
  <bitfield begin="1" description="Serializer mode bit." end="0" id="SRMOD" rwaccess="RW" width="2"/>
  </register>
  
  
  <register acronym="SRCTL_3" description="Each serializer on the McASP has a serializer control register (SRCTL). There are up to 16 serializers per McASP. Note for device-specific registers: Accessing SRCTLn not implemented on a specific device may cause improper device operation." id="SRCTL_3" offset="0x18C" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"/>
    
  <bitfield begin="5" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSR to RBUF." end="5" id="RRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="4" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." end="4" id="XRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="3" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a McASP pin (PFUNC = 0)." end="2" id="DISMOD" rwaccess="RW" width="2"/>
    
  <bitfield begin="1" description="Serializer mode bit." end="0" id="SRMOD" rwaccess="RW" width="2"/>
  </register>
  
  
  <register acronym="SRCTL_4" description="Each serializer on the McASP has a serializer control register (SRCTL). There are up to 16 serializers per McASP. Note for device-specific registers: Accessing SRCTLn not implemented on a specific device may cause improper device operation." id="SRCTL_4" offset="0x190" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"/>
    
  <bitfield begin="5" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSR to RBUF." end="5" id="RRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="4" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." end="4" id="XRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="3" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a McASP pin (PFUNC = 0)." end="2" id="DISMOD" rwaccess="RW" width="2"/>
    
  <bitfield begin="1" description="Serializer mode bit." end="0" id="SRMOD" rwaccess="RW" width="2"/>
  </register>
  
  
  <register acronym="SRCTL_5" description="Each serializer on the McASP has a serializer control register (SRCTL). There are up to 16 serializers per McASP. Note for device-specific registers: Accessing SRCTLn not implemented on a specific device may cause improper device operation." id="SRCTL_5" offset="0x194" width="32">
    
  <bitfield begin="31" description="" end="6" id="Reserved1" rwaccess="R" width="26"/>
    
  <bitfield begin="5" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSR to RBUF." end="5" id="RRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="4" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." end="4" id="XRDY" rwaccess="R" width="1"/>
    
  <bitfield begin="3" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a McASP pin (PFUNC = 0)." end="2" id="DISMOD" rwaccess="RW" width="2"/>
    
  <bitfield begin="1" description="Serializer mode bit." end="0" id="SRMOD" rwaccess="RW" width="2"/>
  </register>
  
  
  <register acronym="XBUF_0" description="The transmit buffers for the serializers (XBUF) hold data from the transmit format unit. For transmit operations, the XBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="XBUF_0" offset="0x200" width="32">
    
  <bitfield begin="31" description="Transmit buffers for serializers." end="0" id="XBUF_n" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="XBUF_1" description="The transmit buffers for the serializers (XBUF) hold data from the transmit format unit. For transmit operations, the XBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="XBUF_1" offset="0x204" width="32">
    
  <bitfield begin="31" description="Transmit buffers for serializers." end="0" id="XBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="XBUF_2" description="The transmit buffers for the serializers (XBUF) hold data from the transmit format unit. For transmit operations, the XBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="XBUF_2" offset="0x208" width="32">
    
  <bitfield begin="31" description="Transmit buffers for serializers." end="0" id="XBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="XBUF_3" description="The transmit buffers for the serializers (XBUF) hold data from the transmit format unit. For transmit operations, the XBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="XBUF_3" offset="0x20C" width="32">
    
  <bitfield begin="31" description="Transmit buffers for serializers." end="0" id="XBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="XBUF_4" description="The transmit buffers for the serializers (XBUF) hold data from the transmit format unit. For transmit operations, the XBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="XBUF_4" offset="0x210" width="32">
    
  <bitfield begin="31" description="Transmit buffers for serializers." end="0" id="XBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="XBUF_5" description="The transmit buffers for the serializers (XBUF) hold data from the transmit format unit. For transmit operations, the XBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="XBUF_5" offset="0x214" width="32">
    
  <bitfield begin="31" description="Transmit buffers for serializers." end="0" id="XBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="RBUF_0" description="The receive buffers for the serializers (RBUF) hold data from the serializer before the data goes to the receive format unit. For receive operations, the RBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="RBUF_0" offset="0x280" width="32">
    
  <bitfield begin="31" description="Receive buffers for serializers." end="0" id="RBUF_n" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RBUF_1" description="The receive buffers for the serializers (RBUF) hold data from the serializer before the data goes to the receive format unit. For receive operations, the RBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="RBUF_1" offset="0x284" width="32">
    
  <bitfield begin="31" description="Receive buffers for serializers." end="0" id="RBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="RBUF_2" description="The receive buffers for the serializers (RBUF) hold data from the serializer before the data goes to the receive format unit. For receive operations, the RBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="RBUF_2" offset="0x288" width="32">
    
  <bitfield begin="31" description="Receive buffers for serializers." end="0" id="RBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="RBUF_3" description="The receive buffers for the serializers (RBUF) hold data from the serializer before the data goes to the receive format unit. For receive operations, the RBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="RBUF_3" offset="0x28C" width="32">
    
  <bitfield begin="31" description="Receive buffers for serializers." end="0" id="RBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="RBUF_4" description="The receive buffers for the serializers (RBUF) hold data from the serializer before the data goes to the receive format unit. For receive operations, the RBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="RBUF_4" offset="0x290" width="32">
    
  <bitfield begin="31" description="Receive buffers for serializers." end="0" id="RBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="RBUF_5" description="The receive buffers for the serializers (RBUF) hold data from the serializer before the data goes to the receive format unit. For receive operations, the RBUF ( ) is an alias of the XRBUF in the serializer. Accessing XBUF registers not implemented on a specific device may cause improper device operation." id="RBUF_5" offset="0x294" width="32">
    
  <bitfield begin="31" description="Receive buffers for serializers." end="0" id="RBUF_n" rwaccess="RW" width="32"/>
  </register>
  
  
  <register acronym="WFIFOCTL" description="The WNUMEVT and WNUMDMA values must be set prior to enabling the Write FIFO. If the Write FIFO is to be enabled, it must be enabled prior to taking the McASP out of reset" id="WFIFOCTL" offset="0x1000" width="32">
    
  <bitfield begin="31" description="" end="17" id="Reserved1" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Write FIFO enable bit." end="16" id="WENA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Write word count per DMA event (32 bit). When the Write FIFO has space for at least WNUMEVT words of data, then an AXEVT (transmit DMA event) is generated to the host/DMA controller. This value should be set to a non-zero integer multiple of the number of serializers enabled as transmitters. This value must be set prior to enabling the Write FIFO. 40h = 3 to 64 words from 3h to 40h. FFh = Reserved from 41h to FFh." end="8" id="WNUMEVT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Write word count per transfer (32 bit words). Upon a transmit DMA event from the McASP, WNUMDMA words are transferred from the Write FIFO to the McASP. This value must equal the number of McASP serializers used as transmitters. This value must be set prior to enabling the Write FIFO. FFh = Reserved from 11h to FFh." end="0" id="WNUMDMA" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="WFIFOSTS" description="" id="WFIFOSTS" offset="0x1004" width="32">
    
  <bitfield begin="31" description="" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Write level (read-only). Number of 32 bit words currently in the Write FIFO. 40h = 3 to 64 words currently in Write FIFO from 3h to 40h. FFh = Reserved from 41h to FFh." end="0" id="WLVL" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="RFIFOCTL" description="The RNUMEVT and RNUMDMA values must be set prior to enabling the Read FIFO. If the Read FIFO is to be enabled, it must be enabled prior to taking the McASP out of reset" id="RFIFOCTL" offset="0x1008" width="32">
    
  <bitfield begin="31" description="" end="17" id="Reserved1" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Read FIFO enable bit." end="16" id="RENA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Read word count per DMA event (32 bit). When the Read FIFO contains at least RNUMEVT words of data, then an AREVT (receive DMA event) is generated to the host/DMA controller. This value should be set to a non-zero integer multiple of the number of serializers enabled as receivers. This value must be set prior to enabling the Read FIFO. 40h = 3 to 64 words from 3h to 40h. FFh = Reserved from 41h = FFh." end="8" id="RNUMEVT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Read word count per transfer (32 bit words). Upon a receive DMA event from the McASP, the Read FIFO reads RNUMDMA words from the McASP. This value must equal the number of McASP serializers used as receivers. This value must be set prior to enabling the Read FIFO. 10h = 3 to 16 words from 3h to 10h. FFh = Reserved from 11h to FFh." end="0" id="RNUMDMA" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RFIFOSTS" description="" id="RFIFOSTS" offset="0x100C" width="32">
    
  <bitfield begin="31" description="" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Read level (read-only). Number of 32 bit words currently in the Read FIFO. 40h = 3 to 64 words currently in Read FIFO from 3h to 40h. FFh = Reserved from 41h to FFh." end="0" id="RLVL" rwaccess="R" width="8"></bitfield>
  </register>
</module>
