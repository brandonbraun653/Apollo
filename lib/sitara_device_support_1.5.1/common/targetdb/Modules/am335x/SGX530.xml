<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="SGX530" id="SGX530">
  
  
  <register acronym="EUR_CR_CLKGATECTL" description="Core module clock gating controls: allows clocks to be forced off, forced on or operate under automatic pipeline activity based clock gating." id="EUR_CR_CLKGATECTL" offset="0x0" width="32">
    
  <bitfield begin="31" description="Reserved" end="25" id="Reserved_25" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="24" description="Automatic Register Power Management Control" end="24" id="AUTO_MAN_REG" rwaccess="RW" width="1">
    <bitenum description="Register updates automatically turn on clock domains" id="Register" token="Register" value="0"></bitenum>
    <bitenum description="Manual clock domain control for register updates" id="Manual" token="Manual" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="23" description="Reserved" end="22" id="Reserved_22" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="21" description="Clock gating control for the USSE" end="20" id="USE_CLKG" rwaccess="RW" width="2">
    <bitenum description="Clock gating is active and no clock is supplied to the USSE" id="Gated" token="Gated" value="0"></bitenum>
    <bitenum description="Clock to the USSE is enabled" id="Running" token="Running" value="1"></bitenum>
    <bitenum description="Automatic gating is active, the USSE clock is only active whilst data is being processed" id="Automatic" token="Automatic" value="2"></bitenum>
    <bitenum description="Reserved" id="Reserved_3" token="Reserved_3" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="19" description="Reserved" end="18" id="Reserved_18" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="17" description="Clock gating control for the DPM" end="16" id="DPM_CLKG" rwaccess="RW" width="2">
    <bitenum description="Clock gating is active and no clock is supplied to the DPM" id="Gated" token="Gated" value="0"></bitenum>
    <bitenum description="Clock to the DPM is enabled" id="Running" token="Running" value="1"></bitenum>
    <bitenum description="Automatic gating is active, the DPM clock is only active whilst data is being processed" id="Automatic" token="Automatic" value="2"></bitenum>
    <bitenum description="Reserved" id="Reserved_3" token="Reserved_3" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="Clock gating control for the TA" end="12" id="TA_CLKG" rwaccess="RW" width="2">
    <bitenum description="Clock gating is active and no clock is supplied to the TA" id="Gated" token="Gated" value="0"></bitenum>
    <bitenum description="Clock to the TA is enabled" id="Running" token="Running" value="1"></bitenum>
    <bitenum description="Automatic gating is active, the TA clock is only active whilst data is being processed" id="Automatic" token="Automatic" value="2"></bitenum>
    <bitenum description="Reserved" id="Reserved_3" token="Reserved_3" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="11" description="Reserved" end="10" id="Reserved_10" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="9" description="Clock gating control for the TSP" end="8" id="TSP_CLKG" rwaccess="RW" width="2">
    <bitenum description="Clock gating is active and no clock is supplied to the TSP" id="Gated" token="Gated" value="0"></bitenum>
    <bitenum description="Clock to the TSP is enabled" id="Running" token="Running" value="1"></bitenum>
    <bitenum description="Automatic gating is active, the TSP clock is only active whilst data is being processed" id="Automatic" token="Automatic" value="2"></bitenum>
    <bitenum description="Reserved" id="Reserved_3" token="Reserved_3" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="Reserved" end="6" id="Reserved_6" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="5" description="Clock gating control for the ISP" end="4" id="ISP_CLKG" rwaccess="RW" width="2">
    <bitenum description="Clock gating is active and no clock is supplied to the ISP" id="Gated" token="Gated" value="0"></bitenum>
    <bitenum description="Clock to the ISP is enabled" id="Running" token="Running" value="1"></bitenum>
    <bitenum description="Automatic gating is active, the ISP clock is only active whilst data is being processed" id="Automatic" token="Automatic" value="2"></bitenum>
    <bitenum description="Reserved" id="Reserved_3" token="Reserved_3" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="3" description="Reserved" end="2" id="Reserved_2" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_CLKGATESTATUS" description="Clock Gating Status reflects the condition of the clock gate controls for each module." id="EUR_CR_CLKGATESTATUS" offset="0x4" width="32">
    
  <bitfield begin="31" description="Reserved" end="21" id="Reserved_21" rwaccess="R" width="11"></bitfield>
    
  <bitfield begin="20" description="Status of the USSE clock" end="20" id="USE_CLKS" rwaccess="R" width="1">
    <bitenum description="USSE clock is gated and the module is inactive" id="USSE" token="USSE" value="0"></bitenum>
    <bitenum description="Clock to the USSE is running" id="Clock" token="Clock" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="19" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="16" description="Status of the DPM clock" end="16" id="DPM_CLKS" rwaccess="R" width="1">
    <bitenum description="DPM clock is gated and the module is inactive" id="DPM" token="DPM" value="0"></bitenum>
    <bitenum description="Clock to the DPM is running" id="Clock" token="Clock" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="Reserved_13" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Status of the TA clock" end="12" id="TA_CLKS" rwaccess="R" width="1">
    <bitenum description="TA clock is gated and the module is inactive" id="TA" token="TA" value="0"></bitenum>
    <bitenum description="Clock to the TA is running" id="Clock" token="Clock" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="11" description="Reserved" end="9" id="Reserved_9" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="8" description="Status of the TSP clock" end="8" id="TSP_CLKS" rwaccess="R" width="1">
    <bitenum description="TSP clock is gated and the module is inactive" id="TSP" token="TSP" value="0"></bitenum>
    <bitenum description="Clock to the TSP is running" id="Clock" token="Clock" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="Reserved" end="5" id="Reserved_5" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description="Status of the ISP clock" end="4" id="ISP_CLKS" rwaccess="R" width="1">
    <bitenum description="ISP clock is gated and the module is inactive" id="ISP" token="ISP" value="0"></bitenum>
    <bitenum description="Clock to the ISP is running" id="Clock" token="Clock" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="3" description="Reserved" end="1" id="Reserved_1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="0" description="Reserved" end="0" id="Reserved_0" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_CLKGATECTLOVR" description="Core module clock gating override controls: allows clocks to be enabled temporarily for register writes by hosts." id="EUR_CR_CLKGATECTLOVR" offset="0x8" width="32">
    
  <bitfield begin="31" description="Reserved" end="22" id="Reserved_22" rwaccess="RW" width="10"></bitfield>
    
  <bitfield begin="21" description="Clock gating control override for the USSE" end="20" id="USE_CLKO" rwaccess="RW" width="2">
    <bitenum description="Reserved" id="Reserved_0" token="Reserved_0" value="0"></bitenum>
    <bitenum description="Host enable clock to the USSE request" id="Enabled" token="Enabled" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Host disable clock to USSE request. USSE clock may be gated if not other outstanding host requests." id="Disabled" token="Disabled" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="19" description="Reserved" end="18" id="Reserved_18" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="17" description="Clock gating control override for the DPM" end="16" id="DPM_CLKO" rwaccess="RW" width="2">
    <bitenum description="Reserved" id="Reserved_0" token="Reserved_0" value="0"></bitenum>
    <bitenum description="Clock to the DPM is enabled" id="Enabled" token="Enabled" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Host disable clock to DPM request. DPM clock may be gated if not other outstanding host requests." id="Disabled" token="Disabled" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="Clock gating control override for the TA" end="12" id="TA_CLKO" rwaccess="RW" width="2">
    <bitenum description="Reserved" id="Reserved_0" token="Reserved_0" value="0"></bitenum>
    <bitenum description="Clock to the TA is enabled" id="Enabled" token="Enabled" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Host disable clock to TA request. TA clock may be gated if not other outstanding host requests." id="Disabled" token="Disabled" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="11" description="Reserved" end="10" id="Reserved_10" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="9" description="Clock gating control override for the TSP" end="8" id="TSP_CLKO" rwaccess="RW" width="2">
    <bitenum description="Reserved" id="Reserved_0" token="Reserved_0" value="0"></bitenum>
    <bitenum description="Clock to the TSP is enabled" id="Enabled" token="Enabled" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Host disable clock to TSP request. TSP clock may be gated if no other outstanding host requests." id="Disabled" token="Disabled" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="Reserved" end="6" id="Reserved_6" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="5" description="Clock gating control override for the ISP" end="4" id="ISP_CLKO" rwaccess="RW" width="2">
    <bitenum description="Reserved" id="Reserved_0" token="Reserved_0" value="0"></bitenum>
    <bitenum description="Clock to the ISP is enabled" id="Enabled" token="Enabled" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Host disable clock to ISP request. ISP clock may be gated if no other outstanding host requests." id="Disabled" token="Disabled" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="3" description="Reserved" end="2" id="Reserved_2" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_CORE_ID" description="Core ID Register" id="EUR_CR_CORE_ID" offset="0x10" width="32">
    
  <bitfield begin="31" description="Core ID" end="16" id="ID" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="Core Configuration" end="0" id="CONFIG" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_CORE_REVISION" description="Core Revision Register identifies the specific core revision. This is updated to reflect the formal release status of the core." id="EUR_CR_CORE_REVISION" offset="0x14" width="32">
    
  <bitfield begin="31" description="Designer Field" end="24" id="DESIGNER" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="Major Revision" end="16" id="MAJOR" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="Minor Revision" end="8" id="MINOR" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="Maintenance Revision" end="0" id="MAINTENANCE" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DESIGNER_REV_FIELD1" description="Designer Revision Field. The SOC designer can use this register for their own revision control if required." id="EUR_CR_DESIGNER_REV_FIELD1" offset="0x18" width="32">
    
  <bitfield begin="31" description="Designer Field" end="0" id="DESIGNER_REV_FIELD1" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DESIGNER_REV_FIELD2" description="Designer Revision Field The SOC designer can use this register for their own revision control if required." id="EUR_CR_DESIGNER_REV_FIELD2" offset="0x1C" width="32">
    
  <bitfield begin="31" description="Designer Field" end="0" id="DESIGNER_REV_FIELD2" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF" description="Within SGX there are a number of performance counters which enable profiling of an application in terms of the low level hardware performance; this register enables selection of specific groups of performance counters and the ability to reset those counters.  Full details can be found in the performance profiling section of this document.  Write a '1' followed by a '0' to the _CLR fields to reset the specific counter" id="EUR_CR_PERF" offset="0x40" width="32">
    
  <bitfield begin="31" description="Reserved" end="13" id="Reserved_13" rwaccess="RW" width="19"></bitfield>
    
  <bitfield begin="12" description="0x0      Core Overview counter group. Default value is set to 0xF, no counter will be in operation" end="9" id="COUNTER_SELECT" rwaccess="RW" width="4">
    <bitenum description="Primitive Clipping counter group" id="Primitive" token="Primitive" value="1"></bitenum>
    <bitenum description="Scene Buffer counter group" id="Scene" token="Scene" value="2"></bitenum>
    <bitenum description="ISP counter group" id="ISP" token="ISP" value="3"></bitenum>
    <bitenum description="TSP counter group" id="TSP" token="TSP" value="4"></bitenum>
    <bitenum description="USE counter group" id="USE" token="USE" value="5"></bitenum>
    <bitenum description="Texturing counter group" id="Texturing" token="Texturing" value="6"></bitenum>
    <bitenum description="Reserved" id="Reserved_7" token="Reserved_7" value="7"></bitenum>
    <bitenum description="Reserved" id="Reserved_8" token="Reserved_8" value="8"></bitenum>
    <bitenum description="Core Overview 2 counter group" id="Core" token="Core" value="9"></bitenum>
  </bitfield>
    
  <bitfield begin="8" description="Reset counter = '1', normal counter operation '0'" end="8" id="COUNTER_8_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reset counter = '1', normal counter operation '0'" end="7" id="COUNTER_7_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Reset counter = '1', normal counter operation '0'" end="6" id="COUNTER_6_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Reset counter = '1', normal counter operation '0'" end="5" id="COUNTER_5_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Reset counter = '1', normal counter operation '0'" end="4" id="COUNTER_4_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Reset counter = '1', normal counter operation '0'" end="3" id="COUNTER_3_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Reset counter = '1', normal counter operation '0'" end="2" id="COUNTER_2_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reset counter = '1', normal counter operation '0'" end="1" id="COUNTER_1_CLR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reset counter = '1', normal counter operation '0'" end="0" id="COUNTER_0_CLR" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER0" description="Performance counter 0 status register" id="EUR_CR_PERF_COUNTER0" offset="0x44" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER0" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER1" description="Performance counter 1 status register" id="EUR_CR_PERF_COUNTER1" offset="0x48" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER1" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER2" description="Performance counter 2 status register" id="EUR_CR_PERF_COUNTER2" offset="0x4C" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER2" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER3" description="Performance counter 3 status register" id="EUR_CR_PERF_COUNTER3" offset="0x50" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER3" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER4" description="Performance counter 4 status register" id="EUR_CR_PERF_COUNTER4" offset="0x54" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER4" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER5" description="Performance counter 5 status register" id="EUR_CR_PERF_COUNTER5" offset="0x58" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER5" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER6" description="Performance counter 6 status register" id="EUR_CR_PERF_COUNTER6" offset="0x5C" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER6" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER7" description="Performance counter 7 status register" id="EUR_CR_PERF_COUNTER7" offset="0x60" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER7" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PERF_COUNTER8" description="Performance counter  status register" id="EUR_CR_PERF_COUNTER8" offset="0x64" width="32">
    
  <bitfield begin="31" description="32 bit integer count value, see performance profiling section for details" end="0" id="COUNTER8" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_SOFT_RESET" description="Soft reset control register which drives all modules except the register bank. Write a '1' to reset and a '0' to clear" id="EUR_CR_SOFT_RESET" offset="0x80" width="32">
    
  <bitfield begin="31" description="Reserved" end="7" id="Reserved_7" rwaccess="RW" width="25"></bitfield>
    
  <bitfield begin="6" description="TSP soft reset control field" end="6" id="TSP_RESET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="ISP soft reset control field" end="5" id="ISP_RESET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="USE soft reset control field" end="4" id="USE_RESET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="TA soft reset control field" end="3" id="TA_RESET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="DPM soft reset control field" end="2" id="DPM_RESET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="BIF soft reset control field" end="0" id="BIF_RESET" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TRIGGER" description="TA/3D Lockup counter timeout value (16K cycle granularity) (Debug only, for further information contact Imagination Technologies)" id="EUR_CR_TRIGGER" offset="0x100" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Trigger count value in 16K cycles for TA and 3D lockup triggers" end="0" id="TRIGGER_COUNT" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_HOST_ENABLE2" description="This register enables interrupts. Writing a '1' to a bit field enables the relevant Event. All the bit fields correspond exactly to those in the EUR_CR_EVENT_STATUS2 register. The MASTER_INTERRUPT bit is a global enable which overrides the Event enables, i.e. '1' - enable external interrupts, '0' - disable external interrupts." id="EUR_CR_EVENT_HOST_ENABLE2" offset="0x110" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved_2" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Host_Enable: Lockup in TA Phase Trigger" end="4" id="TRIG_TA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Host_Enable: Lockup in 3d Phase Trigger" end="3" id="TRIG_3D" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Host_Enable: Deadlock has occurred after a Partial Render" end="2" id="TRIG_DL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Host_Enable: DPM 3D Free Load task complete" end="1" id="DPM_3D_FREE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Host_Enable: DPM TA Free Load task complete" end="0" id="DPM_TA_FREE_LOAD" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_HOST_CLEAR2" description="This register is used to clear event interrupts. Writing a '1' to a bit field clears the relevant Event. All the bit fields correspond exactly to those in the EUR_CR_EVENT_STATUS2 register." id="EUR_CR_EVENT_HOST_CLEAR2" offset="0x114" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved_2" rwaccess="W" width="27"></bitfield>
    
  <bitfield begin="4" description="Host_Clear: Lockup in TA Phase Trigger" end="4" id="TRIG_TA" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Host_Clear: Lockup in 3d Phase Trigger" end="3" id="TRIG_3D" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="2" description="Host_Clear: Deadlock has occurred after a Partial Render" end="2" id="TRIG_DL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="1" description="Host_Clear: DPM 3D Free Load task complete" end="1" id="DPM_3D_FREE_LOAD" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="0" description="Host_Clear: DPM TA Free Load task complete" end="0" id="DPM_TA_FREE_LOAD" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_STATUS2" description="There are 2 sources of external interrupts in the PowerVR SGX core: General system events and PDS cache invalidation events. The event status2 register indicates the source of any general event interrupt generated by PowerVR SGX.  These events only result in an external interrupt if the relevant bit in the EUR_CR_EVENT_HOST_ENABLE register is set. Note1: This register must be combined with the EUR_CR_PDS_CACHE_STATUS register information to determine what has caused the external interrupt. Note2: The host can write to this register in which case any bits written as a '1' are ORed into the register i.e. the host can cause the core to generate an interrupt. (This is typically for debug purposes only) " id="EUR_CR_EVENT_STATUS2" offset="0x118" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved_2" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Status: Lockup in TA Phase Trigger" end="4" id="TRIG_TA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status: Lockup in 3d Phase Trigger" end="3" id="TRIG_3D" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status: Deadlock has occurred after a Partial Render" end="2" id="TRIG_DL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status: DPM 3D free load task complete" end="1" id="DPM_3D_FREE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status: DPM TA free load task complete" end="0" id="DPM_TA_FREE_LOAD" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_STATUS" description="There are 2 sources of external interrupts in the PowerVR SGX core: General system events and PDS cache invalidation events. The event status register indicates the source of any general event interrupt generated by PowerVR SGX.  These events only result in an external interrupt if the relevant bit in the EUR_CR_EVENT_HOST_ENABLE register is set. Note1: This register must be combined with the EUR_CR_PDS_CACHE_STATUS register information to determine what has caused the external interrupt. Note2: The host can write to this register in which case any bits written as a '1' are ORed into the register i.e. the host can cause the core to generate an interrupt. (This is typically for debug purposes only) " id="EUR_CR_EVENT_STATUS" offset="0x12C" width="32">
    
  <bitfield begin="31" description="Status: PowerVR SGX Master Interrupt Control" end="31" id="MASTER_INTERRUPT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Status: The PDS Event timer interrupt (signalled on timer traversing through 0)." end="29" id="TIMER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Status: The TA Object Passing System has got out of sync, a Terminate Control Word DPM read was met by StartofBlock data" end="28" id="TA_DPM_FAULT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="27" id="Reserved_27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Status: Invalidate of Madd L0, L1, L2 Cache Complete" end="26" id="MADD_CACHE_INVALCOMPLETE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Status: Memory Allocation Failed for ZLS" end="25" id="DPM_OUT_OF_MEMORY_ZLS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Status: All memory associated with TA context has been freed" end="24" id="DPM_TA_MEM_FREE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Status: ISP End tile" end="23" id="ISP_END_TILE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Status: DPM Initialisation Complete" end="22" id="DPM_INITEND" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Status: The OTPM has loaded its state" end="21" id="OTPM_LOADED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Status: The OTPM has invalidated its contents" end="20" id="OTPM_INV" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Status: The OTPM has flushed its state" end="19" id="OTPM_FLUSHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Status: End of Scene" end="18" id="PIXELBE_END_RENDER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Status: ISP Halt breakpoint triggered" end="17" id="ISP_HALT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Status: Visibility Test Fail" end="16" id="ISP_VISIBILITY_FAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Status: ISP Breakpoint" end="15" id="BREAKPOINT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Status: Software triggered event" end="14" id="SW_EVENT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Status: TA complete - This is set and held high after the TE terminates scene, until TA is restarted" end="13" id="TA_FINISHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Status: The TA terminate complete (issue as part of complex scene) - This is set and held high after the TE aborts a MacroTile after failed DPM allocation request, until TA is restarted" end="12" id="TA_TERMINATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Status: The TPC has reset its state" end="11" id="TPC_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Status: The TPC has stored its state" end="10" id="TPC_FLUSH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Status: The reset of the DPM control context has been completed" end="9" id="DPM_CONTROL_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Status: The load of the DPM control context has been completed" end="8" id="DPM_CONTROL_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Status: The store of the DPM control context has been completed" end="7" id="DPM_CONTROL_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Status: The reset of the DPM state context has been completed" end="6" id="DPM_STATE_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Status: The load of the DPM state context has been completed" end="5" id="DPM_STATE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status: The store of the DPM state context has been completed" end="4" id="DPM_STATE_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status: DPM Memory allocation has reached the preset memory threshold for total memory allocation" end="3" id="DPM_REACHED_MEM_THRESH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status: DPM Memory allocation failed for the global list" end="2" id="DPM_OUT_OF_MEMORY_GBL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status: DPM Memory allocation failed for a macro tile" end="1" id="DPM_OUT_OF_MEMORY_MT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status: DPM Memory allocation complete for the current render" end="0" id="DPM_3D_MEM_FREE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_HOST_ENABLE" description="This register enables interrupts. Writing a '1' to a bit field enables the relevant Event. All the bit fields correspond exactly to those in the EUR_CR_EVENT_STATUS register. The MASTER_INTERRUPT bit is a global enable which overrides the Event enables, i.e. '1' - enable external interrupts, '0' - disable external interrupts." id="EUR_CR_EVENT_HOST_ENABLE" offset="0x130" width="32">
    
  <bitfield begin="31" description="Host_Enable: PowerVR SGX Master Interrupt Control" end="31" id="MASTER_INTERRUPT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Host_Enable: The PDS Event timer interrupt (signalled on timer traversing through 0)." end="29" id="TIMER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Host_Enable: The Tiling Co-Processor Object Passing System has got out of sync, a Terminate Control Word DPM read was met by StartofBlock data" end="28" id="TA_DPM_FAULT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="27" id="Reserved_27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Host_Enable: Invalidate of Madd L0, L1, L2 Cache Complete" end="26" id="MADD_CACHE_INVALCOMPLETE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Host_Enable: Memory Allocation Failed for ZLS" end="25" id="DPM_OUT_OF_MEMORY_ZLS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Host_Enable: All memory associated with TA context has been freed" end="24" id="DPM_TA_MEM_FREE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Host_Enable: ISP End tile" end="23" id="ISP_END_TILE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Host_Enable: DPM Initialisation Complete" end="22" id="DPM_INITEND" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Host_Enable: The OTPM has loaded its state" end="21" id="OTPM_LOADED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Host_Enable: The OTPM has invalidated its contents" end="20" id="OTPM_INV" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Host_Enable: The OTPM has flushed its state" end="19" id="OTPM_FLUSHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Host_Enable: End of Scene" end="18" id="PIXELBE_END_RENDER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Host_Enable: ISP Halt breakpoint triggered" end="17" id="ISP_HALT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Host_Enable: Visibility Test Fail" end="16" id="ISP_VISIBILITY_FAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Host_Enable: ISP Breakpoint" end="15" id="BREAKPOINT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Host_Enable: Software triggered event" end="14" id="SW_EVENT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Host_Enable: Tiling Co-Processor complete, (Scene Terminated)" end="13" id="TA_FINISHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Host_Enable: The Tiling Co-Processor terminate complete (issue as part of complex scene) (MacroTile Aborted)" end="12" id="TA_TERMINATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Host_Enable: The TPC has reset its state" end="11" id="TPC_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Host_Enable: The TPC has stored its state" end="10" id="TPC_FLUSH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Host_Enable: The reset of the DPM control context has been completed" end="9" id="DPM_CONTROL_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Host_Enable: The load of the DPM control context has been completed" end="8" id="DPM_CONTROL_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Host_Enable: The store of the DPM control context has been completed" end="7" id="DPM_CONTROL_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Host_Enable: The reset of the DPM state context has been completed" end="6" id="DPM_STATE_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Host_Enable: The load of the DPM state context has been completed" end="5" id="DPM_STATE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Host_Enable: The store of the DPM state context has been completed" end="4" id="DPM_STATE_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Host_Enable: DPM Memory allocation has reached the preset memory threshold for total memory allocation" end="3" id="DPM_REACHED_MEM_THRESH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Host_Enable: DPM Memory allocation failed for the global list" end="2" id="DPM_OUT_OF_MEMORY_GBL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Host_Enable: DPM Memory allocation failed for a macro tile" end="1" id="DPM_OUT_OF_MEMORY_MT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Host_Enable: DPM Memory allocation complete for the current render" end="0" id="DPM_3D_MEM_FREE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_HOST_CLEAR" description="This register is used to clear event interrupts. Writing a '1' to a bit field clears the relevant Event. All the bit fields correspond exactly to those in the EUR_CR_EVENT_STATUS register." id="EUR_CR_EVENT_HOST_CLEAR" offset="0x134" width="32">
    
  <bitfield begin="31" description="Host_Clear: PowerVR SGX Master Interrupt" end="31" id="MASTER_INTERRUPT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Host_Clear: The PDS Event timer interrupt (signalled on timer traversing through 0)." end="29" id="TIMER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Host_Clear: The TA Object Passing System has got out of sync, a Terminate Control Word DPM read was met by StartofBlock data" end="28" id="TA_DPM_FAULT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="27" id="Reserved_27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Host_Clear: Invalidate of Madd L1, L2 Cache Complete" end="26" id="MADD_CACHE_INVALCOMPLETE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Host_Clear: Memory Allocation Failed for ZLS" end="25" id="DPM_OUT_OF_MEMORY_ZLS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Host_Clear: All memory associated with TA context has been freed" end="24" id="DPM_TA_MEM_FREE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Host_Clear: ISP End tile" end="23" id="ISP_END_TILE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Host_Clear: DPM Initialisation Complete" end="22" id="DPM_INITEND" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Host_Clear: The OTPM has loaded its state" end="21" id="OTPM_LOADED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Host_Clear: The OTPM has invalidated its contents" end="20" id="OTPM_INV" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Host_Clear: The OTPM has flushed its state" end="19" id="OTPM_FLUSHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Host_Clear: End of Scene" end="18" id="PIXELBE_END_RENDER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Host_Clear: ISP Halt breakpoint triggered" end="17" id="ISP_HALT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Host_Clear: Visibility Test Fail" end="16" id="ISP_VISIBILITY_FAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Host_Clear: ISP Breakpoint" end="15" id="BREAKPOINT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Host_Clear: Software triggered event" end="14" id="SW_EVENT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Host_Clear: Tiling Co-Processor complete (Scene Terminated)" end="13" id="TA_FINISHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Host_Clear: The Tiling Co-Processor terminate complete (issue as part of complex scene) (MacroTile aborted)" end="12" id="TA_TERMINATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Host_Clear: The TPC has reset its state" end="11" id="TPC_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Host_Clear: The TPC has stored its state" end="10" id="TPC_FLUSH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Host_Clear: The reset of the DPM control context has been completed" end="9" id="DPM_CONTROL_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Host_Clear: The load of the DPM control context has been completed" end="8" id="DPM_CONTROL_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Host_Clear: The store of the DPM control context has been completed" end="7" id="DPM_CONTROL_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Host_Clear: The reset of the DPM state context has been completed" end="6" id="DPM_STATE_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Host_Clear: The load of the DPM state context has been completed" end="5" id="DPM_STATE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Host_Clear: The store of the DPM state context has been completed" end="4" id="DPM_STATE_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Host_Clear: DPM Memory allocation has reached the preset memory threshold for total memory allocation" end="3" id="DPM_REACHED_MEM_THRESH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Host_Clear: DPM Memory allocation failed for the global list" end="2" id="DPM_OUT_OF_MEMORY_GBL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Host_Clear: DPM Memory allocation failed for a macro tile" end="1" id="DPM_OUT_OF_MEMORY_MT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Host_Clear: DPM Memory allocation complete for the current render" end="0" id="DPM_3D_MEM_FREE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_CACHE_STATUS" description="There are 2 sources of external interrupts in the PowerVR SGX core: General system events and PDS cache invalidation events. The PDS cache status register indicates the source of any PDS cache invalidation event interrupts generated by PowerVR SGX.  These events only result in an external interrupt if the relevant bit in the EUR_CR_PDS_CACHE_HOST_ENABLE register is set. Note1: This register must be combined with the EUR_CR_EVENT_STATUS register information to determine what has caused the external interrupt. Note2: The host can write to this register in which case any bits written as a '1' are ORed into the register i.e. the host can cause the core to generate an interrupt. (This is typically for debug purposes only) " id="EUR_CR_PDS_CACHE_STATUS" offset="0x138" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="Status: Context ID 3 has been invalidated in PDS Data Store Cache 1" end="8" id="DSC1_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Status: Context ID 2 has been invalidated in PDS Data Store Cache 1" end="7" id="DSC1_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Status: Context ID 1 has been invalidated in PDS Data Store Cache 1" end="6" id="DSC1_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Status: Context ID 0 has been invalidated in PDS Data Store Cache 1" end="5" id="DSC1_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status: Context ID 3 has been invalidated in PDS Data Store Cache 0" end="4" id="DSC0_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status: Context ID 2 has been invalidated in PDS Data Store Cache 0" end="3" id="DSC0_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status: Context ID 1 has been invalidated in PDS Data Store Cache 0" end="2" id="DSC0_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status: Context ID 0 has been invalidated in PDS Data Store Cache 0" end="1" id="DSC0_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status: PDS Code Store Cache has been invalidated" end="0" id="CSC_INV" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_CACHE_HOST_ENABLE" description="This register enables interrupts. Writing a '1' to a bit field enables the relevant Event. All the bit fields correspond exactly to those in the EUR_CR_PDS_CACHE_STATUS register. The MASTER_INTERRUPT bit contained in the EUR_CR_EVENT_HOST_ENABLE register is a global enable which overrides the Event enables, i.e. '1' - enable external interrupts, '0' - disable external interrupts." id="EUR_CR_PDS_CACHE_HOST_ENABLE" offset="0x13C" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="Host_Enable: Context ID 3 has been invalidated in PDS Data Store Cache 1" end="8" id="DSC1_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Host_Enable: Context ID 2 has been invalidated in PDS Data Store Cache 1" end="7" id="DSC1_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Host_Enable: Context ID 1 has been invalidated in PDS Data Store Cache 1" end="6" id="DSC1_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Host_Enable: Context ID 0 has been invalidated in PDS Data Store Cache 1" end="5" id="DSC1_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Host_Enable: Context ID 3 has been invalidated in PDS Data Store Cache 0" end="4" id="DSC0_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Host_Enable: Context ID 2 has been invalidated in PDS Data Store Cache 0" end="3" id="DSC0_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Host_Enable: Context ID 1 has been invalidated in PDS Data Store Cache 0" end="2" id="DSC0_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Host_Enable: Context ID 0 has been invalidated in PDS Data Store Cache 0" end="1" id="DSC0_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Host_Enable: PDS Code Store Cache has been invalidated" end="0" id="CSC_INV" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_CACHE_HOST_CLEAR" description="This register is used to clear event interrupts. Writing a '1' to a bit field clears the relevant Event. All the bit fields correspond exactly to those in the EUR_CR_PDS_CACHE_STATUS register." id="EUR_CR_PDS_CACHE_HOST_CLEAR" offset="0x140" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="Host_Clear: Context ID 3 has been invalidated in PDS Data Store Cache 1" end="8" id="DSC1_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Host_Clear: Context ID 2 has been invalidated in PDS Data Store Cache 1" end="7" id="DSC1_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Host_Clear: Context ID 1 has been invalidated in PDS Data Store Cache 1" end="6" id="DSC1_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Host_Clear: Context ID 0 has been invalidated in PDS Data Store Cache 1" end="5" id="DSC1_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Host_Clear: Context ID 3 has been invalidated in PDS Data Store Cache 0" end="4" id="DSC0_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Host_Clear: Context ID 2 has been invalidated in PDS Data Store Cache 0" end="3" id="DSC0_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Host_Clear: Context ID 1 has been invalidated in PDS Data Store Cache 0" end="2" id="DSC0_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Host_Clear: Context ID 0 has been invalidated in PDS Data Store Cache 0" end="1" id="DSC0_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Host_Clear: PDS Code Store Cache has been invalidated" end="0" id="CSC_INV" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_START" description="Any write to this register starts the Vertex Data Master DMA operation" id="EUR_CR_VDM_START" offset="0x200" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Start VDM DMA" end="0" id="PULSE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_AA" description="This register controls the anti-aliasing mode of the Tiling Co-Processor, independent control is provided in both X &amp; Y axis." id="EUR_CR_TE_AA" offset="0x204" width="32">
    
  <bitfield begin="31" description="Anti-Aliasing in X:" end="31" id="X" rwaccess="RW" width="1">
    <bitenum description="No Anti-Aliasing on X plane" id="No" token="No" value="0"></bitenum>
    <bitenum description="Anti-Aliasing on X plane" id="Yes" token="Yes" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="30" description="Anti-Aliasing in Y:" end="30" id="Y" rwaccess="RW" width="1">
    <bitenum description="No Anti-Aliasing on Y plane" id="No" token="No" value="0"></bitenum>
    <bitenum description="Anti-Aliasing on Y plane" id="Yes" token="Yes" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="29" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="30"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_MTILE1" description="The Tiling Co-Processor allocates memory in macrotiles, which is a group of individual tiles.  The number of macrotiles is selectable between 4 &amp; 16, the boundaries of the macrotiles in the X axis are defined in this register." id="EUR_CR_TE_MTILE1" offset="0x208" width="32">
    
  <bitfield begin="31" description="PSG_MacroTile_Number:" end="31" id="NUMBER" rwaccess="RW" width="1">
    <bitenum description="4 MacroTiles" id="4" token="4" value="0"></bitenum>
    <bitenum description="16 MacroTiles" id="16" token="16" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="30" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="X1 MacroTile boundary, left tile X for second column of macrotiles (16MT mode)" end="22" id="X1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="21" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="19" description="X2 MacroTile boundary, left tile X for second(4MT)/third(16MT) column of macrotiles" end="12" id="X2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="11" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="X3 MacroTile boundary, left tile X for fourth column of macrotiles (16MT)" end="0" id="X3" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_MTILE2" description="The Tiling Co-Processor allocates memory in macrotiles, which is a group of individual tiles.  The number of macrotiles is selectable between 4 &amp; 16, the boundaries of the macrotiles in the Y axis are defined in this register." id="EUR_CR_TE_MTILE2" offset="0x20C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Y1 MacroTile boundary, top tile Y for second row of macrotiles (16MT mode)" end="22" id="Y1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="21" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="19" description="Y2 MacroTile boundary, top tile Y for second(4MT)/third(16MT) row of macrotiles" end="12" id="Y2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="11" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="Y1 MacroTile boundary, top tile Y for fourth row of macrotiles (16MT mode)" end="0" id="Y3" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_SCREEN" description="In order to perform the tiling operation and generate the display list the maximum screen size must be configured in terms of the number of tiles in X &amp; Y axis." id="EUR_CR_TE_SCREEN" offset="0x210" width="32">
    
  <bitfield begin="31" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="19" description="Maximum Y tile address visible on screen" end="12" id="YMAX" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="11" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="Maximum X tile address visible on screen" end="0" id="XMAX" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_MTILE" description="This register defines the number of individual tiles within the macrotiles. This is used in the process of memory allocation." id="EUR_CR_TE_MTILE" offset="0x214" width="32">
    
  <bitfield begin="31" description="Reserved" end="18" id="Reserved_18" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="17" description="Number of tiles in a Macrotile. Stride = (XTile * YTiles)" end="0" id="STRIDE" rwaccess="RW" width="18"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_PSG" description="This register defines the global control for the Parameter Stream Generator within the Tiling Co-Processor. This module formats the display list generated by the Tiling Co-Processor." id="EUR_CR_TE_PSG" offset="0x218" width="32">
    
  <bitfield begin="31" description="Reserved" end="25" id="Reserved_24" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="24" description="Enables sampling of Driver TE_STATE_ISP_STATE_ID register on context switch/restore when set, when reset current local value is preserved." end="24" id="ENABLE_CONTEXT_STATE_RESTORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Don't invalidate Tail Pointer Cache entries on a Terminate command.  Only effective when COMPLETEONTERMINATE is 0x0" end="23" id="ZONLYRENDER" rwaccess="RW" width="1">
    <bitenum description="Do Invalidate" id="Do" token="Do" value="0"></bitenum>
    <bitenum description="Don't Invalidate" id="Don" token="Don" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="22" description="0x1 Write region headers, terminate streams and invalidate tail pointer cache entries on terminate." end="22" id="COMPLETEONTERMINATE" rwaccess="RW" width="1">
    <bitenum description="If ZONLYRENDER = 0x0 then force an Interrupt, however if ZONLYRENDER = 0x1 then write region headers and terminate streams." id="If" token="If" value="0"></bitenum>
  </bitfield>
    
  <bitfield begin="21" description="If 0x1 set the zload enable bit in the region headers. If 0x0 the region header zload bit is controlled by the hardware automatically. The bit is set if a partial render has been performed on that tile." end="21" id="ZLOADENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="If 0x1 set the zstore enable bit in the region headers. If 0x0 the region header zstore bit is controlled by the hardware automatically. The bit is set if a partial render is about to be performed on that tile." end="20" id="ZSTOREENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Pad empty doublewords in allocation with zeros after Stream Link/Terminate. The allocation block size is 16 DWords, so potentially inserts 13 extra DWords of zeros into a pointer block. Debug only. Makes examination of memory more readable on a per frame basis." end="19" id="PADZEROS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Always embed state information in control stream. Debug only." end="18" id="FORCENEWSTATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="18"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_PSGREGION_BASE" description="This register defines the base address in memory of the Region Header writes by the TA.  Region headers are the first part of the display list and contain an entry per tile with information on global setup and a link address to parameters." id="EUR_CR_TE_PSGREGION_BASE" offset="0x21C" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 512-bit aligned Base Address for Region Header writes" end="6" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="5" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_TPC_BASE" description="This register defines the base address in memory of the Tail Pointer Cache.  A tail pointer is the current last address written to for a tiles individual display list, an entry for active tiles is maintained as primitives are processed by the TA." id="EUR_CR_TE_TPC_BASE" offset="0x220" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 512-bit aligned Base Address for Tail Pointer Cache. The tail pointer is the current last address written to for a control stream for a tile." end="6" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="5" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_TPCCONTROL" description="The Tail Pointer Cache is used to keep track of the last address written to for a particular tile, this is stored in a mixture of on chip cache and external memory.  Under certain circumstances it is necessary to either reset the cache or flush the on chip cache contents such that they are visible in memory." id="EUR_CR_TE_TPCCONTROL" offset="0x224" width="32">
    
  <bitfield begin="31" description="Reset contents of Tail Pointer Cache" end="31" id="CLEAR" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="30" description="Flush contents of Tail Pointer Cache to Memory" end="30" id="FLUSH" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="29" description="Reserved" end="0" id="Reserved_0" rwaccess="W" width="30"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_RGNBBOX_X" description="Reset or enabled by the MTE_RESETBBOX and MTE_UPDATEBBOX fields in the MTEControl word of the Input Parameter format. This is the maximum extent in X of the post transformed, clipped data before region clipping." id="EUR_CR_TE_RGNBBOX_X" offset="0x228" width="32">
    
  <bitfield begin="31" description="Reserved" end="25" id="Reserved_25" rwaccess="R" width="7"></bitfield>
    
  <bitfield begin="24" description="XMax value for maintained Region Generator Bounding Box" end="16" id="MAX" rwaccess="R" width="9"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="9" id="Reserved_9" rwaccess="R" width="7"></bitfield>
    
  <bitfield begin="8" description="XMin value for maintained Region Generator Bounding Box" end="0" id="MIN" rwaccess="R" width="9"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_RGNBBOX_Y" description="Reset or enabled by the MTE_RESETBBOX and MTE_UPDATEBBOX fields in the MTE Control word of the Input Parameter format. This is the maximum extent in Y of the post transformed, clipped data before region clipping." id="EUR_CR_TE_RGNBBOX_Y" offset="0x22C" width="32">
    
  <bitfield begin="31" description="Reserved" end="25" id="Reserved_25" rwaccess="R" width="7"></bitfield>
    
  <bitfield begin="24" description="YMax value for maintained Region Generator Bounding Box" end="16" id="MAX" rwaccess="R" width="9"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="9" id="Reserved_9" rwaccess="R" width="7"></bitfield>
    
  <bitfield begin="8" description="YMin value for maintained Region Generator Bounding Box" end="0" id="MIN" rwaccess="R" width="9"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_OTPM_CSM_FLUSH_BASE" description="The TA maintains internal state of the current information for each macro tile and global list regarding the vertex blocks written to memory. In certain circumstances during a context switch it is necessary to flush this information to external memory." id="EUR_CR_MTE_OTPM_CSM_FLUSH_BASE" offset="0x230" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 512-bit aligned Base Address for Object Tail Pointer Memory Context Switchable Memory (OTPM CSM) Flush.  This is the current point for each macro tile and global list, for the vertex blocks written to memory by the Tile Accelerator." end="4" id="ADDR" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_OTPM_CSM_LOAD_BASE" description="The TA maintains internal state of the current information for each macro tile and global list regarding the vertex blocks written to memory. In certain circumstances during a context switch it is necessary to load this information from external memory." id="EUR_CR_MTE_OTPM_CSM_LOAD_BASE" offset="0x234" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 512-bit aligned Base Address for Object Tail Pointer Memory Context Switchable Memory (OTPM CSM) Load. This is the current point for each macro tile and global list, for the vertex blocks written to memory by the Tile Accelerator." end="4" id="ADDR" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CTRL_STREAM_BASE" description="PowerVR SGX masters information from memory using advanced DMA, this register defines the base address of the Vertex Data input control stream in memory. " id="EUR_CR_VDM_CTRL_STREAM_BASE" offset="0x238" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, byte aligned Base Address for Vertex Data control streams" end="2" id="ADDR" rwaccess="RW" width="26"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_CTRL" description="This register controls the global setup of the Tiling Process." id="EUR_CR_MTE_CTRL" offset="0x23C" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="Maximum number of partitions which can be used per USSE pipeline:" end="8" id="NUM_PARTITIONS" rwaccess="RW" width="1">
    <bitenum description="Two" id="Two" token="Two" value="0"></bitenum>
    <bitenum description="Four" id="Four" token="Four" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="Select OpenGL or D3D mode" end="7" id="OPENGL" rwaccess="RW" width="1">
    <bitenum description="D3D" id="D3D" token="D3D" value="0"></bitenum>
    <bitenum description="OpenGL" id="OpenGL" token="OpenGL" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="6" description="Disable for perfect small object culling" end="6" id="PSOCULL_DISABLE" rwaccess="RW" width="1">
    <bitenum description="Perfect small object culling enabled" id="en" token="en" value="0"></bitenum>
    <bitenum description="Perfect small object culling disabled" id="dis" token="dis" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="5" description="Enable W clamping" end="5" id="WCLAMPEN" rwaccess="RW" width="1">
    <bitenum description="W clamping disabled" id="dis" token="dis" value="0"></bitenum>
    <bitenum description="W clamping enabled" id="en" token="en" value="1"></bitenum>
  </bitfield>
    
  <bitfield begin="4" description="When writing to global list, number of primitives which are within the same macrotile before the macrotile calculation will change from global." end="0" id="GLOBALMACROTILETHRESH" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_WCOMPARE" id="EUR_CR_MTE_WCOMPARE" offset="0x240" width="32">
    
  <bitfield begin="31" description="Compare value for W clamping. See the Input parameter format, viewport transform for details. Compare is applied post viewport transform." end="0" id="VALUE" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_WCLAMP" id="EUR_CR_MTE_WCLAMP" offset="0x244" width="32">
    
  <bitfield begin="31" description="Clamp value for W clamping. See the Input parameter format, viewport transform for details. Clamp is applied post viewport transform, if the w value is less than the WCOMPARE value." end="0" id="VALUE" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_SCREEN" description="In order to perform the tiling operation and generate the display list the maximum screen size must be configured in terms of the number of pixels in X &amp; Y axis since this may not be the same as the number of tiles defined in the EUR_CR_TE_SCREEN register." id="EUR_CR_MTE_SCREEN" offset="0x248" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="Reserved_24" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Screen height in pixels." end="12" id="PIXYMAX" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="11" description="Screen width in pixels." end="0" id="PIXXMAX" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_OTPM_OP" description="The TA maintains internal state of the current information for each macro tile and global list regarding the vertex blocks written to memory. In certain circumstances during a context switch it is necessary to load or flush this information to external memory." id="EUR_CR_MTE_OTPM_OP" offset="0x24C" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="W" width="29"></bitfield>
    
  <bitfield begin="2" description="Flush CSM contents to CSM Flush Address" end="2" id="CSM_FLUSH" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="1" description="Load CSM contents from CSM Load Address" end="1" id="CSM_LOAD" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="0" description="Invalidate CSM contents" end="0" id="CSM_INV" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_MULTISAMPLECTL" description="This applies when anti-aliasing is enabled. This is used to calculate whether an anti-aliased triangle can be perfect small object culled." id="EUR_CR_MTE_MULTISAMPLECTL" offset="0x250" width="32">
    
  <bitfield begin="31" description="Unsigned sub-pixel offset for the 4th multisample Y position" end="28" id="MSAA_Y3" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="Unsigned sub-pixel offset for the 4th multisample X position" end="24" id="MSAA_X3" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Unsigned sub-pixel offset for the 3rd multisample Y position" end="20" id="MSAA_Y2" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="19" description="Unsigned sub-pixel offset for the 3rd multisample X position" end="16" id="MSAA_X2" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Unsigned sub-pixel offset for the 2nd multisample Y position" end="12" id="MSAA_Y1" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Unsigned sub-pixel offset for the 2nd multisample X position" end="8" id="MSAA_X1" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="Unsigned sub-pixel offset for the 1st multisample Y position" end="4" id="MSAA_Y0" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Unsigned sub-pixel offset for the 1st multisample X position" end="0" id="MSAA_X0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_SIG1" id="EUR_CR_MTE_SIG1" offset="0x26C" width="32">
    
  <bitfield begin="31" description="Signature of output to TE. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="TE_SIGNATURE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_MTE_SIG2" id="EUR_CR_MTE_SIG2" offset="0x270" width="32">
    
  <bitfield begin="31" description="Signature of output to memory. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="MEM_SIGNATURE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TE_STATE" description="This register is read on VDM_START_PULSE and should be saved and updated by the driver app by app" id="EUR_CR_TE_STATE" offset="0x274" width="32">
    
  <bitfield begin="31" description="Reserved" end="21" id="Reserved_16" rwaccess="RW" width="11"></bitfield>
    
  <bitfield begin="20" description="This register contains the PSG internal ISP State ID Counter value. It must be saved off by the driver on TA terminate or finished and restored before vdm_start_pulse." end="16" id="ISP_STATE_ID" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="15" description="A read of this register returns the page allocated to the host, when valid. If it is not valid the return data is undefined." end="0" id="MTILE" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_CLIP_SIG1" id="EUR_CR_CLIP_SIG1" offset="0x304" width="32">
    
  <bitfield begin="31" description="Signature of Barycentric vertices output during each clipping pass i.e. clipped against each clip plane in turn. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="CLIP_SIGNATURE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PIXELBE_SIG01" id="EUR_CR_PIXELBE_SIG01" offset="0x308" width="32">
    
  <bitfield begin="31" description="Signature of data output from PBE to BIF. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="SIGNATURE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PIXELBE_SIG02" id="EUR_CR_PIXELBE_SIG02" offset="0x30C" width="32">
    
  <bitfield begin="31" description="Signature of control data output from PBE to BIF. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="SIGNATURE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_START" description="Start VDM Context store, pulse kicks off the store operation. Status flags when this is complete and the stream and index position registers are valid" id="EUR_CR_VDM_CONTEXT_STORE_START" offset="0x330" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="Start VDM Context store" end="0" id="PULSE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_STREAM" description="Stores the stream position when the context store occured" id="EUR_CR_VDM_CONTEXT_STORE_STREAM" offset="0x334" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="27" description="stream position for context store, number of 32bit dwords from a base address update (ie. between stream link or terminates)" end="2" id="ADDR" rwaccess="R" width="26"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="0" id="Reserved_0" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_INDEX" description="Stores the index position when the context store occured" id="EUR_CR_VDM_CONTEXT_STORE_INDEX" offset="0x338" width="32">
    
  <bitfield begin="31" description="Reserved" end="22" id="Reserved_22" rwaccess="R" width="10"></bitfield>
    
  <bitfield begin="21" description="Index position for context store, number of index words from an index define" end="0" id="ADDR" rwaccess="R" width="22"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_STATUS" description="Signals when a context store is complete and the stream and index location registers are valid" id="EUR_CR_VDM_CONTEXT_STORE_STATUS" offset="0x33C" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context store not applicable doing a stream terminate" end="8" id="NA" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="5" id="Reserved_5" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description="Context store processing" end="4" id="PROCESS" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="1" id="Reserved_1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="0" description="Context store complete" end="0" id="COMPLETE" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_STATE0" description="Terminate state control registers used for creating the terminate PDS task." id="EUR_CR_VDM_CONTEXT_STORE_STATE0" offset="0x340" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="defines the last word in the control stream, used to generate end ta" end="29" id="TAPDSSTATE_TERMINATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="defines if the state update is complex" end="28" id="TAPDSSTATE_COMPLEX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="22" id="Reserved_22" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="21" description="Base address (128Bit Aligned, 256 MByte range), in 16 byte units of the PDS code and data to be executed" end="0" id="TAPDSSTATE_BASEADDR" rwaccess="RW" width="22"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_STATE1" description="Terminate state control registers used for creating the terminate PDS task." id="EUR_CR_VDM_CONTEXT_STORE_STATE1" offset="0x344" width="32">
    
  <bitfield begin="31" description="Size of the PDS Data segment in 128 bit words. The data segment always precedes the code segment. 0 = 0x0, Max = 0x20" end="26" id="TAPDSSTATE_DATASIZE" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="Reserved" end="25" id="Reserved_25" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Enables breakpoints on this program" end="24" id="TAPDSSTATE_DEBUG" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Reserved" end="18" id="Reserved_18" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="17" description="If set the USSE will output state to the MTE" end="17" id="TAPDSSTATE_MTE_EMIT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="0 ' Do not execute secondary task on the USSE/1 ' Execute secondary task on the USSE Has no effect on primary tasks." end="16" id="TAPDSSTATE_SEC_EXEC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Indicates a sequential dependency" end="15" id="TAPDSSTATE_SD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="0 ' Reserved/1 ' Run on pipe 1/2 ' Run on pipe 2/3 ' Run on both pipes" end="13" id="TAPDSSTATE_USEPIPE" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Indicates partial secondary updates." end="12" id="TAPDSSTATE_PARTIAL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Number of output partitions required. 0 = 0x0 and Max = 0x4" end="9" id="TAPDSSTATE_PARTITIONS" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="Indicates that the allocation is secondary" end="8" id="TAPDSSTATE_SECONDARY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Size of the USSE Attribute Requirements for the task in 128 bit Words" end="0" id="TAPDSSTATE_USEATTRIBUTESIZE" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_WAIT_FOR_KICK" description="Indicates the status on the control stream fetch" id="EUR_CR_VDM_WAIT_FOR_KICK" offset="0x348" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="Indicates when state machine is in idle" end="0" id="STATUS" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX" description="Stores the number of indices since the last wrap" id="EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX" offset="0x34C" width="32">
    
  <bitfield begin="31" description="Reserved" end="22" id="Reserved" rwaccess="R" width="10"></bitfield>
    
  <bitfield begin="21" description="Wrap Index Count for context store, number of indices since last wrap" end="0" id="COUNT" rwaccess="R" width="22"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_WRAPPED" description="Indicates the number of times that index wrapping has occurred after a context store" id="EUR_CR_VDM_CONTEXT_STORE_WRAPPED" offset="0x350" width="32">
    
  <bitfield begin="31" description="Reserved" end="22" id="Reserved" rwaccess="R" width="10"></bitfield>
    
  <bitfield begin="21" description="Wrapped count for context store, number of times the hardware has wrapped after a context store" end="0" id="COUNT" rwaccess="R" width="22"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_FAN" description="The driver sets this register on a context switch such that the hardware can resume knowing where the centre point of a fan is located or the winding order of the strip, expressed as an index." id="EUR_CR_VDM_CONTEXT_STORE_FAN" offset="0x354" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="Controls setting of the winding order for the primitive about to be resumed" end="25" id="INDEX3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="An enable bit, ‘1’ = valid and triggers the use of the index indicated in bits 23:0. (Valid only on a VDM_START_PULSE)" end="24" id="INDEX2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Context store, index to be used as center point to Fan after a context store." end="0" id="INDEX1" rwaccess="RW" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_VDM_CONTEXT_STORE_WRAP" description="Indicates the number of times that index wrapping has occurred after a context store" id="EUR_CR_VDM_CONTEXT_STORE_WRAP" offset="0x358" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="Reserved" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Indicates control of the value to be used in the next index block (‘1’ = context wrap counter + 1,’0’ = reset context wrap counter)" end="23" id="RESUME3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="An enable bit, ‘1’ = valid and triggers the use of the wrap count value indicated in bits 21:0. (Valid only on a VDM_START_PULSE)" end="22" id="RESUME2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Context store, wrap counter value used on a resume" end="0" id="RESUME1" rwaccess="RW" width="22"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PIXELBE" description="The PixelBE modules format the pixel data before writing to memory, this register contains global control signals." id="EUR_CR_PIXELBE" offset="0x400" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_8" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="Use Frame buffer address for IDF's when set to 1. Default is 0 which means IDFs use the last address written too by the PBE" end="8" id="IDF_USE_FBADDR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Alpha threshold used when encoding 1555 format. If the internal 8bit Alpha value exceeds this value, then a 1 is written to the top bit of the output, otherwise a 0 is written" end="0" id="ALPHATHRESHOLD" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_RENDER" description="The Image Synthesis Processor can be configured to operate in 3 different render modes" id="EUR_CR_ISP_RENDER" offset="0x404" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved_2" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Render type" end="0" id="TYPE" rwaccess="RW" width="2">
    <bitenum description="= Normal 3D render" id="3D_0" token="3D_0" value="0"></bitenum>
    <bitenum description="= Normal 3D render" id="3D_1" token="3D_1" value="1"></bitenum>
    <bitenum description="= Fast 2D render" id="2D" token="2D" value="2"></bitenum>
    <bitenum description="= Fast scale render" id="Scale" token="Scale" value="3"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_RGN_BASE" description="This register defines the base address in memory of the Region Header reads by the ISP.  Region headers are the first part of the display list and contain an entry per tile with information on global setup and a link address to parameters." id="EUR_CR_ISP_RGN_BASE" offset="0x408" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, Dword aligned Base Address for Region Header Reads" end="2" id="ADDR" rwaccess="RW" width="26"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_RENDBOX1" description="When the render type is set to Fast 2D Render or Fast Scale Render, no region headers are read from memory. Instead, region headers are internally generated for all tiles enclosed in the bounding box defined by this register and the EUR_CR_ISP_RENDBOX2 register." id="EUR_CR_ISP_RENDBOX1" offset="0x40C" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="Reserved_24" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Bounding box X1. X address, in tiles, of top left most tile in bounding box. The LSB is ignored if AA_MODE is low." end="16" id="X" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Bounding box Y1. Y address, in tiles, of top left most tile in bounding box. The LSB is ignored if AA_MODE is low." end="0" id="Y" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_RENDBOX2" description="When the render type is set to Fast 2D Render or Fast Scale Render, no region headers are read from memory. Instead, region headers are internally generated for all tiles enclosed in the bounding box defined by this register and the EUR_CR_ISP_RENDBOX1 register." id="EUR_CR_ISP_RENDBOX2" offset="0x410" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="Reserved_24" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Bounding box X2. X address, in tiles, of bottom right most tile in bounding box. The LSB is ignored if AA_MODE is low." end="16" id="X" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Bounding box Y2. Y address, in tiles, of bottom right most tile in bounding box.The LSB is ignored if AA_MODE is low." end="0" id="Y" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_IPFMISC" description="Global control register for the ISP parameter fetch." id="EUR_CR_ISP_IPFMISC" offset="0x414" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="Scale factor for ISP parameter fetch to BIF TTE." end="24" id="TTE_SCALE" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="23" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="19" description="Initial upass_ctrl value, loaded at the start of each tile, for user pass spawning in the ISP." end="16" id="UPASSSTART" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="8" description="If this bit is set, all empty regions encountered will be processed by the 3D core ie the hardware background object being rendered in each empty tile. NOTE that this bit does not affect a &quot;Fast Scale Render&quot; i.e. empty regions are always processed when performing a &quot;Fast Scale Render&quot;." end="8" id="PROCESSEMPTY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="6" id="Reserved_6" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="5" description="6 bit field specify the minimum object ID required for opaque and translucent objects to be rendered." end="0" id="VALIDID" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_OGL_MODE" description="Global control register which modifies the pixel sample position to comply with OGL requirements." id="EUR_CR_ISP_OGL_MODE" offset="0x418" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="0 Non OGL Rules" end="0" id="ENABLE" rwaccess="RW" width="1">
    <bitenum description="Non OGL Rules" id="Disabled" token="Disabled" value="0"></bitenum>
    <bitenum description="OGL Rules" id="Enabled" token="Enabled" value="1"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_PERPENDICULAR" id="EUR_CR_ISP_PERPENDICULAR" offset="0x41C" width="32">
    
  <bitfield begin="31" description="Reserved" end="31" id="Reserved_31" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="If the determinant in the ISP FPU is smaller than this unsigned float, then perpendicular maths is used." end="4" id="THRESHOLD" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_CULLVALUE" id="EUR_CR_ISP_CULLVALUE" offset="0x420" width="32">
    
  <bitfield begin="31" description="Reserved" end="31" id="Reserved_31" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="If the determinant in the ISP FPU is smaller than this unsigned float, then the triangle is culled." end="4" id="THRESHOLD" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_DBIAS" id="EUR_CR_ISP_DBIAS" offset="0x424" width="32">
    
  <bitfield begin="31" description="Reserved" end="16" id="Reserved_16" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="Signed 2's complement integer used to control the slope dependent part of depth bias. The default value should be -23." end="8" id="FACTORADJ" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Signed 2's complement integer used to control the slope independent part of depth bias. The default value should be 0. " end="0" id="UNITSADJ" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_START_RENDER" description="Any write to this register starts a 3D Render." id="EUR_CR_ISP_START_RENDER" offset="0x428" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Start 3D render" end="0" id="PULSE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_3D_AA_MODE" description="Indicates to the 3D pipeline whether anti-aliasing is enabled or disabled" id="EUR_CR_3D_AA_MODE" offset="0x42C" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="" end="0" id="ENABLE" rwaccess="RW" width="1">
    <bitenum description="anti aliasing disabled" id="Disabled" token="Disabled" value="0"></bitenum>
    <bitenum description="anti aliasing enabled" id="Enabled" token="Enabled" value="1"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_BREAK" description="Object breakpoints can be inserted by the driver to interrupt a render part way and then resume the render from the point of interrupt at a later time, this register controls what happens when a breakpoint has been encountered." id="EUR_CR_ISP_BREAK" offset="0x430" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved_5" rwaccess="W" width="27"></bitfield>
    
  <bitfield begin="4" description="Resumes the current render after a breakpoint object is encountered in the internal parameter stream" end="4" id="RESUME" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="3"></bitfield>
    
  <bitfield begin="0" description="Terminates the current render after a breakpoint object is encountered in the internal parameter stream" end="0" id="HALT" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_3DCONTEXT" id="EUR_CR_ISP_3DCONTEXT" offset="0x434" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="ISP Context Store, any write to this register will cause the ISP to halt processing new primitives, insert an end of render command and wait for the current primitives in the pipeline to complete processing up to the inserted end of render." end="0" id="ENABLE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_FPU" id="EUR_CR_ISP_FPU" offset="0x438" width="32">
    
  <bitfield begin="31" description="ISP FPU signature result. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="SIGNATURE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TSP_PARAMETER_CACHE" id="EUR_CR_TSP_PARAMETER_CACHE" offset="0x43C" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Any write to this register will invalidate the Content Addressable Memory in the TSP parameter fetch cache" end="0" id="INVALIDATE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TSP_PARAMETER_FETCH" id="EUR_CR_TSP_PARAMETER_FETCH" offset="0x440" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved_2" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Scale factor for TSP parameter fetch to BIF TTE." end="0" id="TTE_SCALE" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_ZLSCTL" description="Image Synthesis Processor Z Load/Store &amp; format global control register" id="EUR_CR_ISP_ZLSCTL" offset="0x480" width="32">
    
  <bitfield begin="31" description="Reserved" end="23" id="Reserved" rwaccess="RW" width="9"></bitfield>
    
  <bitfield begin="22" description="This bit modifies the behaviour when ISP_ZLSCTL:[ZSTOREFORMAT] = 0x0.  0 - Binary 0 is stored in place of the current rendered mask plane. All stored Z values will appear in memory as positive IEEE floats;  1 - The mask plane is stored per pixel location a rendered to the on-chip tile buffer and occupies the MSB (sign bit) of all IEEE float dwords" end="22" id="STOREMASK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="This bit modifies the behaviour when ISP_ZLSCTL:[ZLOADFORMAT] = 0x0.  0 - The entire tile will be loaded with the mask plane value as determined by ISP_BGOBJ:[MASK];  1 - The mask plane is loaded exactly as it appears in memory with the mask plane bit in the MSB (sign bit) of each loaded IEEE float formatted dword" end="21" id="LOADMASK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="When set, only the Z buffer is rendered. Opaque and translucent objects are stencil and depth tested as usual but no pixel spans are emitted to the PDS Pixel presenter. Pixels within punch through and depth feedback objects are emitted on their first pass as a result of passing the up-front depth test by default. However, on their feedback depth test, these pixels will not be output regardless of the depth test result. The intention is to calculate a scene Z buffer without doing any further rendering." end="20" id="ZONLYRENDER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Selects the format depth, stencil and viewport is stored in:  0x0 32 bit IEEE SP Float;  0x1 24 bit Integer + 8-bit Stencil;  0x2 Two 16 bit Integers (Packed format);  0x3 32-bit IEEE Float 8-bit Stencil 1-bit Viewport Compressed, addressed using DPM" end="18" id="ZSTOREFORMAT" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="17" description="Selects the format depth, stencil and viewport is stored in:  0x0 32 bit IEEE SP Float;  0x1 24 bit Integer + 8-bit Stencil;  0x2 Two 16 bit Integers (Packed format);  0x3 32-bit IEEE Float 8-bit Stencil 1-bit Viewport Compressed, addressed using DPM" end="16" id="ZLOADFORMAT" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="15" description="Display width in tiles (16 pixels) minus one:  0x00 1 tile (16 pixels)  0x01 2 tiles (32 pixels)  ..  0xFF 256 tiles (4096 pixels)" end="8" id="ZLSEXTENT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="When set to 1, if the ZSTORE bit in the region header is also set then the stencil buffer is stored to memory after each tile is processed" end="7" id="SSTOREEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="If set to 1 the depth/stencil buffer is always stored at the end of each tile irrespective of the region header ZSTORE bit." end="6" id="FORCEZSTORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="If set to 1 the depth/stencil buffer is always loaded at the start of each tile irrespective of the region header ZLOAD bit." end="5" id="FORCEZLOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="When set to 1, if the ZSTORE bit in the region header is also set then the depth buffer is stored to memory after each tile is processed" end="4" id="ZSTOREEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="When set to 1 depth and stencil data is written out in &quot;Tiled&quot; order. (Note: Data can not be written as tiled, if the ZSTOREFORMAT = 0x3. In this case STORETILED should be set to ‘0’)" end="3" id="STORETILED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="When set to 1, if the ZLOAD bit in the region header is also set then the depth buffer is read from memory prior to tile processing" end="2" id="ZLOADEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="When set to 1, if the ZLOAD bit in the region header is also set then the stencil buffer is read from memory prior to tile processing" end="1" id="SLOADEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="When set to 1 depth, stencil data is loaded in &quot;Tiled&quot; order (Note: Data can not be read as tiled, if the ZSTOREFORMAT = 0x3. In this case LOADTILED should be set to ‘0’)" end="0" id="LOADTILED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_ZLOAD_BASE" description="This register defines the base address in memory of the Z Buffer base address to load into the ISP for non-compressed ZLS formats." id="EUR_CR_ISP_ZLOAD_BASE" offset="0x484" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved1" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="64MB Addressable, 16byte aligned Base Address of the Z Buffer Load base address" end="4" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_ZSTORE_BASE" description="This register defines the base address in memory of the Z Buffer base address to store data from the ISP for non-compressed ZLS formats." id="EUR_CR_ISP_ZSTORE_BASE" offset="0x488" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="64MB Addressable, 16byte aligned Base Address of the Z Buffer Load base address" end="4" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_STENCIL_LOAD_BASE" description="This register defines the base address in memory of the Stencil Buffer base address to load into the ISP for Int24 and IEEE ZLS formats. This alternate stencil buffer base address is selectable based on the enable bit." id="EUR_CR_ISP_STENCIL_LOAD_BASE" offset="0x48C" width="32">
    
  <bitfield begin="31" description="When set to 1, enables fetching of stencil from a separate base address" end="31" id="ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="25" description="64MB Addressable, 16byte aligned Base Address of the Stencil Buffer Load base address" end="4" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_STENCIL_STORE_BASE" description="This register defines the base address in memory of the Stencil Buffer base address to store data from the ISP for Int24 and IEEE ZLS formats. This alternate stencil buffer base address is selectable based on the enable bit." id="EUR_CR_ISP_STENCIL_STORE_BASE" offset="0x490" width="32">
    
  <bitfield begin="31" description="When set to 1, enables saving of stencil to a separate base address" end="31" id="ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="25" description="64MB Addressable, 16byte aligned Base Address of the Stencil Buffer Load base address" end="4" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_CTRL" description="This register can be used to reset the results of the 8 visibility test results. Write a 1 to the required bit field to clear the result register" id="EUR_CR_ISP_VISTEST_CTRL" offset="0x494" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="W" width="24"></bitfield>
    
  <bitfield begin="7" description="Resets Visibility Test register 7" end="7" id="CLEAR7" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="6" description="Resets Visibility Test register 6" end="6" id="CLEAR6" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="5" description="Resets Visibility Test register 5" end="5" id="CLEAR5" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="4" description="Resets Visibility Test register 4" end="4" id="CLEAR4" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Resets Visibility Test register 3" end="3" id="CLEAR3" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="2" description="Resets Visibility Test register 2" end="2" id="CLEAR2" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="1" description="Resets Visibility Test register 1" end="1" id="CLEAR1" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="0" description="Resets Visibility Test register 0" end="0" id="CLEAR0" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE0" id="EUR_CR_ISP_VISTEST_VISIBLE0" offset="0x498" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 0" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE1" id="EUR_CR_ISP_VISTEST_VISIBLE1" offset="0x49C" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 1" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE2" id="EUR_CR_ISP_VISTEST_VISIBLE2" offset="0x4A0" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 2" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE3" id="EUR_CR_ISP_VISTEST_VISIBLE3" offset="0x4A4" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 3" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE4" id="EUR_CR_ISP_VISTEST_VISIBLE4" offset="0x4A8" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 4" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE5" id="EUR_CR_ISP_VISTEST_VISIBLE5" offset="0x4AC" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 5" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE6" id="EUR_CR_ISP_VISTEST_VISIBLE6" offset="0x4B0" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 6" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_VISTEST_VISIBLE7" id="EUR_CR_ISP_VISTEST_VISIBLE7" offset="0x4B4" width="32">
    
  <bitfield begin="31" description="Visibility Test counter 7" end="0" id="COUNT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_BGOBJDEPTH" description="The ISP operates by comparing depth values of incoming objects with the results of previous depth compares, in order to make sure there are no un-initialised values at the start of the tile or to cover pixels where there are no objects in the scene a default background object is configured under register control. This register provides the floating point depth value for this background object." id="EUR_CR_ISP_BGOBJDEPTH" offset="0x4B8" width="32">
    
  <bitfield begin="31" description="Hardware background object depth value in 32 bit IEEE single precision floating point format" end="0" id="VALUE" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_BGOBJ" description="The ISP operates by comparing depth values of incoming objects with the results of previous depth compares, in order to make sure there is no un-initialised values at the start of the tile or to cover pixels where there are no objects in the scene a default background object is configured under register control. This register provides tag, mask and stencil information for this background object." id="EUR_CR_ISP_BGOBJ" offset="0x4BC" width="32">
    
  <bitfield begin="31" description="Reserved" end="10" id="Reserved_10" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="9" description="When set to 1, at the start of each tile the ISP tag buffer is initialised with the background object tag (default = 1)" end="9" id="ENABLEBGTAG" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Hardware background object mask plane" end="8" id="MASK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Hardware background object stencil" end="0" id="STENCIL" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_BGOBJTAG" description="The ISP operates by comparing depth values of incoming objects with the results of previous depth compares, in order to make sure there are no unitialised values at the start of the tile or to cover pixels where there are no objects in the scene a default background object is configured under register control. This register provides TSP and Vertex information for this background object." id="EUR_CR_ISP_BGOBJTAG" offset="0x4C4" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Hardware background object TSP data size in dwords" end="24" id="TSPDATASIZE" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="23" description="Reserved" end="22" id="Reserved_22" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="21" description="Bits 25:4 of the hardware background object vertex pointer (64MB range on 16 byte boundaries)" end="0" id="VERTEXPTR" rwaccess="RW" width="22"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_MULTISAMPLECTL" description="This applies when anti-aliasing is enabled. This is used by the ISP to adjust the sample positions." id="EUR_CR_ISP_MULTISAMPLECTL" offset="0x4C8" width="32">
    
  <bitfield begin="31" description="Unsigned sub-pixel offset for the 4th multisample Y position" end="28" id="MSAA_Y3" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="Unsigned sub-pixel offset for the 4th multisample X position" end="24" id="MSAA_X3" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Unsigned sub-pixel offset for the 3rd multisample Y position" end="20" id="MSAA_Y2" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="19" description="Unsigned sub-pixel offset for the 3rd multisample X position" end="16" id="MSAA_X2" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Unsigned sub-pixel offset for the 2nd multisample Y position" end="12" id="MSAA_Y1" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Unsigned sub-pixel offset for the 2nd multisample X position" end="8" id="MSAA_X1" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="Unsigned sub-pixel offset for the 1st multisample Y position" end="4" id="MSAA_Y0" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Unsigned sub-pixel offset for the 1st multisample X position" end="0" id="MSAA_X0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_SIG1" id="EUR_CR_ISP_SIG1" offset="0x4CC" width="32">
    
  <bitfield begin="31" description="Signature analysis - face equation precalc. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="PRECALC" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_SIG2" id="EUR_CR_ISP_SIG2" offset="0x4D0" width="32">
    
  <bitfield begin="31" description="Signature analysis - edge processors. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="EDGE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_SIG3" id="EUR_CR_ISP_SIG3" offset="0x4D4" width="32">
    
  <bitfield begin="31" description="Signature analysis - state buffer storage. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="TAGWRITE" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_SIG4" id="EUR_CR_ISP_SIG4" offset="0x4D8" width="32">
    
  <bitfield begin="31" description="Signature analysis - spans to PDS pixel presenter. A signature is an accumulative LFSR (Linear Feedback Shift Register) of the valid pipeline data using an XOR structure." end="0" id="SPAN" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_TAGCTRL" id="EUR_CR_ISP_TAGCTRL" offset="0x4DC" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="RW" width="29"></bitfield>
    
  <bitfield begin="2" description="Debug punchthrough, converts fast punchthrough to normal punchthrough" end="2" id="SLOWFPT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Debug punchthrough mode which forces pt_off after every pt,dfb and fpt triangle" end="1" id="FORCE_PT_OFF" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Safe flush mode, pass-spawn flushes for every translucent object" end="0" id="SAFE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_STATUS1" id="EUR_CR_ISP_STATUS1" offset="0x4E0" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="25" description="Control Stream Position after context switch" end="2" id="CTRL_STREAM_POS" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="0" id="Reserved_0" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_STATUS2" id="EUR_CR_ISP_STATUS2" offset="0x4E4" width="32">
    
  <bitfield begin="31" description="Reserved" end="21" id="Reserved_21" rwaccess="R" width="11"></bitfield>
    
  <bitfield begin="20" description="Position of current primitive after context switch" end="16" id="PRIM_NUM" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="15" description="Tile Y coordinate after context switch" end="8" id="TILE_Y" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="Tile X coordinate after context switch" end="0" id="TILE_X" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_ISP_DEPTHSORT" id="EUR_CR_ISP_DEPTHSORT" offset="0x4E8" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="deterministic mode for depth sorter" end="0" id="DETERMINISTIC" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PIXELBE_EMIT" description="This register indicates if the PixelBE would stall the USE if there were another emit. '1' indicates that the PixelBE would stall the USE. '0' indicates that the PixelBE would not stall the USE." id="EUR_CR_PIXELBE_EMIT" offset="0x4EC" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved_2" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description="Pipe 1 status" end="1" id="STATUS1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Pipe 0 status" end="0" id="STATUS0" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D_PAGE_TABLE_BASE" description="Effective on load 3D context, this register defines the base address of the page table being referenced in the process of de-allocating pages during a 3D render." id="EUR_CR_DPM_3D_PAGE_TABLE_BASE" offset="0x600" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 16Byte aligned Base Address for 3D context page tables in the DPM module" end="4" id="ADDR" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D_FREE_LIST" description="Between the FREE_LIST_HEAD and FREE_LIST_TAIL there must be a valid chain of linked pages. The linked list is stored in memory, at the EUR_CR_DPM_3D_PAGE_TABLE_BASE_ADDRESS and is effective on load 3D context." id="EUR_CR_DPM_3D_FREE_LIST" offset="0x604" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="This register defines the last page to be used for the 3D page allocation, on a load 3D context. (The tail of the free list.)" end="16" id="TAIL" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="This register defines the first page to be used for the 3D page allocation, on a load 3D context." end="0" id="HEAD" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_PDS_PAGE_THRESHOLD" description="This is the threshold in 4KB pages at which the hardware will stop double buffering the internal vertex processing buffers (and drop to single buffered mode). This is required in order to guarantee that a 3D render can run when running in dynamic parameter management mode. It should be set to 0.25MB less (in pages 0x40) than the ZLS threshold (or 0 in very small memory systems)." id="EUR_CR_DPM_PDS_PAGE_THRESHOLD" offset="0x614" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved" rwaccess="RW" width="18"></bitfield>
    
  <bitfield begin="13" description="Page Threshold at which vertex buffers stop being double buffered" end="0" id="VALUE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE" description="Effective on Loading the TA Page Table Context, this register defines the base address of the page table being referenced in the process of allocating pages by the TE and MTE." id="EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE" offset="0x618" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 16Byte aligned Base Address for TE/MTE context page tables in the DPM module." end="4" id="ADDR" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_ALLOC_FREE_LIST" description="Between the FREE_LIST_HEAD and FREE_LIST_TAIL there must be a valid chain of linked pages. The linked list is stored in memory, at the EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE_ADDRESS and is effective on Loading the TA Page Table Context." id="EUR_CR_DPM_TA_ALLOC_FREE_LIST" offset="0x61C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="This register defines the last page for the free list manipulated during TE and MTE page allocation" end="16" id="TAIL" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="This register defines the start page for the free list manipulated during TE and MTE page allocation" end="0" id="HEAD" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_PAGE_THRESHOLD" id="EUR_CR_DPM_TA_PAGE_THRESHOLD" offset="0x620" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="18"></bitfield>
    
  <bitfield begin="13" description="Effective on Loading the TA Page Table Context, the maximum number of pages to allocate before signaling almost out of memory." end="0" id="VALUE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_ZLS_PAGE_THRESHOLD" id="EUR_CR_DPM_ZLS_PAGE_THRESHOLD" offset="0x624" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="18"></bitfield>
    
  <bitfield begin="13" description="Effective on Loading the TA Page Table Context, the maximum number of pages to allocate before signaling out of memory to the host. The ZLS threshold should be set such that sufficient pages are left available to the ZLS module when it performs its dynamic memory allocation upon a partial render. The number of pages spare should be set to be larger than the maximum pages for 1 macro tile of Z data. For example: If 4 pages are required for 1 macro tile of Z, and there are 50 pages in the system, then this threshold should be set to 50 - 4 = 46." end="0" id="VALUE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_GLOBAL_LIST" id="EUR_CR_DPM_TA_GLOBAL_LIST" offset="0x628" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="RW" width="15"></bitfield>
    
  <bitfield begin="16" description="Effective on Loading the TA Page Table Context, a value of 1 in this field enables the global list size limit" end="16" id="POLICY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="Effective on Loading the TA Page Table Context, the maximum number of pages to allocate to the global list before signaling global list out of memory." end="0" id="SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_STATE_TABLE_BASE" description="Effective immediately, this register defines the base address of the state table when it is read and written to/from memory. The state table itself contains the head, tail and number of pages allocated to every macrotile, and the global list. Each context needs a separate state page table." id="EUR_CR_DPM_STATE_TABLE_BASE" offset="0x62C" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 16Byte aligned Base Address for State Table in the DPM module." end="4" id="ADDR" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_STATE_CONTEXT_ID" id="EUR_CR_DPM_STATE_CONTEXT_ID" offset="0x630" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="RW" width="29"></bitfield>
    
  <bitfield begin="2" description="Effective immediately, this field defines the which of the internal contexts is to be used for allocating memory" end="2" id="ALLOC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Effective immediately, this field defines the which of the internal contexts is to be used for de-allocating memory" end="1" id="DALLOC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Effective immediately, this field defines which of the internal contexts is to be loaded or stored from/to memory" end="0" id="LS" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_CONTROL_TABLE_BASE" description="Effective immediately, this register defines the base address of the control table when it is read and written to/from memory. The control table itself contains the current offset into the page, and whether a page has been allocated, for each macrotile. Each context needs a separate state page table." id="EUR_CR_DPM_CONTROL_TABLE_BASE" offset="0x634" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 16Byte aligned Base Address for the Control Table in the DPM module." end="4" id="ADDR" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED" id="EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED" offset="0x638" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Effective on the loading of the TA Page Table Context, this register defines the number of the pages which are currently allocated to the context global list. The value for this register is read from the matching status register, on a context store, and loaded on a context load." end="16" id="GLOBAL" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="Effective on the loading of the TA Page Table Context, this register defines the number of the pages which are currently allocated to the context. The value for this register is read from the matching status register, on a context store, and loaded on a context load." end="0" id="LOCAL" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D_DEALLOCATE" id="EUR_CR_DPM_3D_DEALLOCATE" offset="0x63C" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved_2" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Effective on start render, this field indicates that the hardware should de-allocate Effective on start render, this field indicates that the hardware should de-allocate memory.mory." end="1" id="ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Effective on start render, this field indicates that the hardware should de-allocate the memory associated with the global list if it is set." end="0" id="GLOBAL" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_ALLOC" description="A write to this register invalidates the current contents and causes a new allocation cycle" id="EUR_CR_DPM_ALLOC" offset="0x640" width="32">
    
  <bitfield begin="31" description="Reserved" end="18" id="Reserved_18" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="17" description="Out of memory. Indicates that the action is pending due to an out of memory condition." end="17" id="PAGE_OUTOFMEMORY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="On a read a value of 1 in this field indicates that the page has been allocated, and that the page is valid." end="16" id="PAGE_VALID" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="A read of this register returns the page allocated to the host, when valid. If it is not valid the return data is undefined." end="0" id="PAGE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_DALLOC" description="A write to this register invalidates the current contents and causes a new de-allocation cycle" id="EUR_CR_DPM_DALLOC" offset="0x644" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="RW" width="15"></bitfield>
    
  <bitfield begin="16" description="A read indicates whether the page has been freed" end="16" id="PAGE_FREE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="The page to be de-allocated by the hardware" end="0" id="PAGE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_ALLOC" id="EUR_CR_DPM_TA_ALLOC" offset="0x648" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Effective on Load TA Page Table Context: TA Alloc Free List Previous Page. The DPM maintains the previous and current free list pointers. On a context load this value must be loaded in. For the initial case it should be set to the penultimate page after initialisation (normally TAIL - 1)." end="16" id="FREE_LIST_PREVIOUS" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D" id="EUR_CR_DPM_3D" offset="0x64C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Effective on Load 3D Page Table Context: 3D Free List Previous Page. The DPM maintains the previous and current free list pointers. On a context load this value must be loaded in. For the initial case it should be set to the penultimate page after initialisation (normally TAIL - 1). " end="16" id="FREE_LIST_PREVIOUS" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_PARTIAL_RENDER" id="EUR_CR_DPM_PARTIAL_RENDER" offset="0x658" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="Once The TA DPM has run out of memory, and the driver has scheduled an abort, there must be a partial render performed on the context in order to free memory. This bit is set before the partial render is started." end="0" id="ENABLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_LSS_PARTIAL_CONTEXT" id="EUR_CR_DPM_LSS_PARTIAL_CONTEXT" offset="0x65C" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="When set indicates that on a Context state table load, reset or store only the best macro tile, rather than the full scene." end="0" id="OPERATION" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED" id="EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED" offset="0x660" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Effective on the loading of the 3D Page Table Context, this register defines the number of the pages which are currently allocated to the context global list. The value for this register is read from the matching status register, on a context store, and loaded on a context load." end="16" id="GLOBAL" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="13" description="Effective on the loading of the 3D Page Table Context, this register defines the number of the pages which are currently allocated to the context. The value for this register is read from the matching status register, on a context store, and loaded on a context load." end="0" id="LOCAL" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TASK_3D_FREE" id="EUR_CR_DPM_TASK_3D_FREE" offset="0x680" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Causes the 3D free list context to be loaded from the relevant configuration registers" end="0" id="LOAD" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TASK_TA_FREE" id="EUR_CR_DPM_TASK_TA_FREE" offset="0x684" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Causes the TA free list context to be loaded from the relevant configuration registers" end="0" id="LOAD" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TASK_STATE" description="This register controls the DPM module task state for page tables.  The normal order of operation is Store context, Clear context, Load new context." id="EUR_CR_DPM_TASK_STATE" offset="0x694" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="W" width="29"></bitfield>
    
  <bitfield begin="2" description="Causes the state for the DPM page table to be read from memory. Only the selected context ID is loaded." end="2" id="LOAD" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="1" description="Causes the state for the DPM page table to be cleared. Only the selected context ID is cleared." end="1" id="CLEAR" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="0" description="Causes the state for the DPM page table (non-destructive - the state is not cleared as it is written) to be written to memory. Only the selected context ID is written out." end="0" id="STORE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TASK_CONTROL" description="This register controls the DPM module task state for control page tables.  The normal order of operation is Store context, Clear context, Load new context." id="EUR_CR_DPM_TASK_CONTROL" offset="0x698" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="W" width="29"></bitfield>
    
  <bitfield begin="2" description="Causes the state for the control page table to be read from memory. " end="2" id="LOAD" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="1" description="Causes the state for the control page table to be cleared. " end="1" id="CLEAR" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="0" description="Causes the state for the control table (non-destructive - the control is not cleared as it is written) to be written to memory." end="0" id="STORE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_OUTOFMEM" id="EUR_CR_DPM_OUTOFMEM" offset="0x69C" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="W" width="29"></bitfield>
    
  <bitfield begin="2" description="Causes the hardware to initiate the abort cycle, resulting in an abort complete, and requiring a subsequent full render, in the order of busiest to least busy macro tile. The region headers need to be re-ordered by the driver to guarantee this condition" end="2" id="ABORTALL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="1" description="Causes the hardware to initiate the abort cycle, resulting in an abort complete, and requiring a subsequent partial render" end="1" id="ABORT" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="0" description="Causes the parameter management to resume trying to allocate pages" end="0" id="RESTART" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_FREE_CONTEXT" id="EUR_CR_DPM_FREE_CONTEXT" offset="0x6A0" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Causes the hardware to free the memory associated with the current TA context" end="0" id="NOW" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D_TIMEOUT" id="EUR_CR_DPM_3D_TIMEOUT" offset="0x6A4" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Causes the hardware to free the memory associated with the current 3D context, and if a render is in progress, treat this as if it were complete." end="0" id="NOW" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_EVM" id="EUR_CR_DPM_TA_EVM" offset="0x6A8" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Initialise the TA linked list (between start and end only), to an area of linear memory" end="0" id="INIT" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1" offset="0x700" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="The current tail of the free list for the TA allocation context" end="16" id="TAIL" rwaccess="R" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="13" description="The current head of the free list for the TA allocation context" end="0" id="HEAD" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D_FREE_LIST_STATUS1" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_3D_FREE_LIST_STATUS1" offset="0x70C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="The current tail of the free list for the 3D context" end="16" id="TAIL" rwaccess="R" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="13" description="The current head of the free list for the 3D context" end="0" id="HEAD" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2" offset="0x710" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="18"></bitfield>
    
  <bitfield begin="13" description="The element before the tail of the free list for the TA allocation context" end="0" id="PREVIOUS" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_3D_FREE_LIST_STATUS2" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_3D_FREE_LIST_STATUS2" offset="0x71C" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="18"></bitfield>
    
  <bitfield begin="13" description="The element before the tail of the free list for the 3D context" end="0" id="PREVIOUS" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_ABORT_STATUS_MTILE" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_ABORT_STATUS_MTILE" offset="0x720" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved_5" rwaccess="R" width="27"></bitfield>
    
  <bitfield begin="4" description="Indicates that the whole scene must be aborted" end="4" id="GLOBAL" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="The macro tile which will be aborted by the hardware" end="0" id="INDEX" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_PAGE_STATUS" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_PAGE_STATUS" offset="0x724" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="The number of pages allocated by the hardware, for the TA context" end="16" id="TA" rwaccess="R" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="13" description="The total number of pages allocated by the hardware, across all contexts" end="0" id="TOTAL" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_PAGE" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_PAGE" offset="0x728" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="18"></bitfield>
    
  <bitfield begin="13" description="The number of pages allocated by the hardware, for the 3D context" end="0" id="STATUS_3D" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_GLOBAL_PAGE_STATUS" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_GLOBAL_PAGE_STATUS" offset="0x72C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="The number of global pages allocated by the hardware, for the TA context" end="16" id="TA" rwaccess="R" width="14"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="13" description="The total number of global pages allocated by the hardware, across all contexts" end="0" id="TOTAL" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_GLOBAL_PAGE" description="This status register is read for a context switch, and reprogrammed on a context load." id="EUR_CR_DPM_GLOBAL_PAGE" offset="0x730" width="32">
    
  <bitfield begin="31" description="Reserved" end="14" id="Reserved_14" rwaccess="R" width="18"></bitfield>
    
  <bitfield begin="13" description="The total number of global pages allocated by the hardware, across the 3D contexts" end="0" id="STATUS_3D" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_REQUESTING" id="EUR_CR_DPM_REQUESTING" offset="0x734" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved_2" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description="The device that is requesting memory; Bit 0 is the TA (Control Stream Request), Bit 1 is the TA (Vertex Data Stream Request) " end="0" id="SOURCE" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DPM_RNG_HDR_PARSER" id="EUR_CR_DPM_RNG_HDR_PARSER" offset="0x738" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="The DPM Region Header IDLE indication, ‘1’ = idle, ‘0’ = busy" end="0" id="IDLE" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_TSP_CONFIG" id="EUR_CR_TSP_CONFIG" offset="0x800" width="32">
    
  <bitfield begin="31" description="Reserved" end="3" id="Reserved_3" rwaccess="RW" width="29"></bitfield>
    
  <bitfield begin="2" description="Disable filtering over edges/corners for CEM" end="2" id="CEMEDGE_DONTFILTER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Disable negation for user supplied gradients for cem swap i.e. will only swap dudx etc not negate " end="1" id="CEMGRAD_DONTNEGATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_CACHE_CTRL" description="Unified Cache global control register" id="EUR_CR_CACHE_CTRL" offset="0x804" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Cache L0 Pipe1 Bypass" end="29" id="L0P0OFF" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Cache Invalidate - To invalidate the cache, ie remove all contents from the cache, then setting this bit to 1 will start an invalidation cycle within the cache. Immediately the cache will not except anymore read request until the invalidation cycle completes. All requests pending in the cache (L0/L1/L2) will be completed before the cache completes its invalidation cycle. On completion of the invalidation cycle an interrupt will occur, if enabled, and the MADD_CACHE_INVALCOMP bit will be set and the cache will return to its normal operation" end="28" id="INVALIDATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="27" id="Reserved_27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Cache Off L1 Pipe1 - When set to 1 turns off the L1 cache associated with Pipe 1. Read request to the L1 cache will be forwarded directly to the L2 cache. The cache must be invalidated after the bit is set to 0 (Cache Level On)  " end="26" id="L1P1OFF" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Cache Off L1 Pipe0 - When set to 1 turns off the L1 cache associated with Pipe 0. Read request to the L1 cache will be forwarded directly to the L2 cache. The cache must be invalidated after the bit is set to 0 (Cache Level On)  " end="25" id="L1P0OFF" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Reserved" end="16" id="Reserved_16" rwaccess="RW" width="9"></bitfield>
    
  <bitfield begin="15" description="Cache Partition Mask for DM3 - defines which cache lines are used for Data Master type 3. Each bit represents one cache line, where there are 4 cache lines in the cache. Each cache line contains 8 possible address tags which are compared against the incoming address to determine if the data requested is in the cache or not. If all bits are set then there are 4 x 8 possible address tags i.e. DM3 read request will try and match against all the cache ram contents. Setting a bit to 0, will exclude that cache line from being compared against the incoming request address  " end="12" id="PARTDM3" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Cache Partition Mask for DM2 - Refer to PARTDM3, but with respect to DM2" end="8" id="PARTDM2" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="Cache Partition Mask for DM1 - Refer to PARTDM3, but with respect to DM1" end="4" id="PARTDM1" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Cache Partition Mask for DM0 - Refer to PARTDM3, but with respect to DM0" end="0" id="PARTDM0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CTRL" id="EUR_CR_USE_CTRL" offset="0xA00" width="32">
    
  <bitfield begin="31" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="19" description="0: RETURN_ONE Controls whether out-of-range indexed-mode MOE register numbers redirect to 0 for alpha (when set) or 1 (when cleared) 0 RETURN_ONE 1 RETURN_ZERO" end="19" id="REGBOUND_ZERO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Maximum number of times an active slot can be serviced in a row" end="14" id="INSTLIMIT" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="13" description="Reserved" end="4" id="Reserved_4" rwaccess="RW" width="10"></bitfield>
    
  <bitfield begin="3" description="0x0 Off" end="2" id="KILL_MODE" rwaccess="RW" width="2">
    <bitenum description="Flush" id="Flush" token="Flush" value="1"></bitenum>
    <bitenum description="Kill" id="Kill" token="Kill" value="2"></bitenum>
    <bitenum description="Reserved" id="Reserved_3" token="Reserved_3" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description="Data master to kill" end="0" id="KILL_DM" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_LD_REDIRECT" id="EUR_CR_USE_LD_REDIRECT" offset="0xA04" width="32">
    
  <bitfield begin="31" description="Byte-aligned memory address to redirect LD instructions which fail range check" end="4" id="ADDR" rwaccess="RW" width="28"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CACHE" id="EUR_CR_USE_CACHE" offset="0xA08" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Any write to this location invalidates the instruction cache automatically" end="0" id="INVALIDATE" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE00" id="EUR_CR_USE_CODE_BASE00" offset="0xA0C" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE01" id="EUR_CR_USE_CODE_BASE01" offset="0xA10" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE02" id="EUR_CR_USE_CODE_BASE02" offset="0xA14" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE03" id="EUR_CR_USE_CODE_BASE03" offset="0xA18" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE04" id="EUR_CR_USE_CODE_BASE04" offset="0xA1C" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE05" id="EUR_CR_USE_CODE_BASE05" offset="0xA20" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE06" id="EUR_CR_USE_CODE_BASE06" offset="0xA24" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE07" id="EUR_CR_USE_CODE_BASE07" offset="0xA28" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE08" id="EUR_CR_USE_CODE_BASE08" offset="0xA2C" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE09" id="EUR_CR_USE_CODE_BASE09" offset="0xA30" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE10" id="EUR_CR_USE_CODE_BASE10" offset="0xA34" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE11" id="EUR_CR_USE_CODE_BASE11" offset="0xA38" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE12" id="EUR_CR_USE_CODE_BASE12" offset="0xA3C" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE13" id="EUR_CR_USE_CODE_BASE13" offset="0xA40" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE14" id="EUR_CR_USE_CODE_BASE14" offset="0xA44" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_CODE_BASE15" id="EUR_CR_USE_CODE_BASE15" offset="0xA48" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved" rwaccess="W" width="6"></bitfield>
    
  <bitfield begin="25" description="Data Master" end="24" id="DM" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="23" description="Code Base Address" end="0" id="ADDR" rwaccess="W" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_PDS_ENABLE2" description="Enables general event bits into the PDS event data master for processing by the PDS Micro Controller" id="EUR_CR_EVENT_PDS_ENABLE2" offset="0xA50" width="32">
    
  <bitfield begin="31" description="Reserved" end="5" id="Reserved" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="PDS_Enable: Lockup in TA Phase Trigger" end="4" id="TRIG_TA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="PDS_Enable: Lockup in 3d Phase Trigger" end="3" id="TRIG_3D" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="PDS_Enable: Deadlock has occurred after a Partial Render" end="2" id="TRIG_DL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="PDS_Enable: DPM 3D Task free load complete" end="1" id="DPM_3D_FREE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="PDS_Enable: DPM TA Task free load complete" end="0" id="DPM_TA_FREE_LOAD" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_CACHE_ENABLE" description="Enables PDS cache invalidation events bits into the PDS event data master for processing by the PDS Micro Controller" id="EUR_CR_PDS_CACHE_ENABLE" offset="0xA54" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="PDS_Enable: Context ID 3 has been invalidated in PDS Data Store Cache 1" end="8" id="DSC1_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="PDS_Enable: Context ID 2 has been invalidated in PDS Data Store Cache 1" end="7" id="DSC1_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="PDS_Enable: Context ID 1 has been invalidated in PDS Data Store Cache 1" end="6" id="DSC1_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="PDS_Enable: Context ID 0 has been invalidated in PDS Data Store Cache 1" end="5" id="DSC1_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="PDS_Enable: Context ID 3 has been invalidated in PDS Data Store Cache 0" end="4" id="DSC0_INV3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="PDS_Enable: Context ID 2 has been invalidated in PDS Data Store Cache 0" end="3" id="DSC0_INV2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="PDS_Enable: Context ID 1 has been invalidated in PDS Data Store Cache 0" end="2" id="DSC0_INV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="PDS_Enable: Context ID 0 has been invalidated in PDS Data Store Cache 0" end="1" id="DSC0_INV0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="PDS_Enable: PDS Code Store Cache has been invalidated" end="0" id="CSC_INV" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_PDS_ENABLE" description="Enables general event bits into the PDS event data master for processing by the PDS Micro Controller" id="EUR_CR_EVENT_PDS_ENABLE" offset="0xA58" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="PDS_Enable: The PDS Event timer interrupt (signalled on timer traversing through 0)." end="29" id="TIMER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="PDS_Enable: The TA Object Passing System has got out of sync, a Terminate Control Word DPM read was met by StartofBlock data" end="28" id="TA_DPM_FAULT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="27" id="Reserved_27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="PDS_Enable: Invalidate of Madd L0, L1, L2 Cache Complete" end="26" id="MADD_CACHE_INVALCOMPLETE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="PDS_Enable: Memory Allocation Failed for ZLS" end="25" id="DPM_OUT_OF_MEMORY_ZLS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="PDS_Enable: All memory associated with TA context has been freed" end="24" id="DPM_TA_MEM_FREE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="PDS_Enable: ISP End pass" end="23" id="ISP_END_PASS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="PDS_Enable: DPM Initialisation Complete" end="22" id="DPM_INITEND" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="PDS_Enable: The OTPM has loaded its state" end="21" id="OTPM_LOADED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="PDS_Enable: The OTPM has invalidated its contents" end="20" id="OTPM_INV" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="PDS_Enable: The OTPM has flushed its state" end="19" id="OTPM_FLUSHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="PDS_Enable: End of Scene" end="18" id="PIXELBE_END_RENDER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="PDS_Enable: ISP Halt breakpoint triggered" end="17" id="ISP_HALT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="PDS_Enable: Visibility Test Fail" end="16" id="ISP_VISIBILITY_FAIL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="PDS_Enable: ISP Breakpoint" end="15" id="BREAKPOINT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="PDS_Enable: Software triggered event" end="14" id="SW_EVENT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="PDS_Enable: TA complete, (Scene Terminated)" end="13" id="TA_FINISHED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="PDS_Enable: The TA terminate complete (issue as part of complex scene) (MacroTile aborted)" end="12" id="TA_TERMINATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="PDS_Enable: The TPC has reset its state" end="11" id="TPC_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="PDS_Enable: The TPC has stored its state" end="10" id="TPC_FLUSH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="PDS_Enable: The reset of the DPM control context has been completed" end="9" id="DPM_CONTROL_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="PDS_Enable: The load of the DPM control context has been completed" end="8" id="DPM_CONTROL_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="PDS_Enable: The store of the DPM control context has been completed" end="7" id="DPM_CONTROL_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="PDS_Enable: The reset of the DPM state context has been completed" end="6" id="DPM_STATE_CLEAR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="PDS_Enable: The load of the DPM state context has been completed" end="5" id="DPM_STATE_LOAD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="PDS_Enable: The store of the DPM state context has been completed" end="4" id="DPM_STATE_STORE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="PDS_Enable: DPM Memory allocation has reached the preset memory threshold for total memory allocation" end="3" id="DPM_REACHED_MEM_THRESH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="PDS_Enable: DPM Memory allocation failed for the global list" end="2" id="DPM_OUT_OF_MEMORY_GBL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="PDS_Enable: DPM Memory allocation failed for a macro tile" end="1" id="DPM_OUT_OF_MEMORY_MT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="PDS_Enable: DPM Memory allocation complete for the current render" end="0" id="DPM_3D_MEM_FREE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_PIXEL_PDS_EXEC" id="EUR_CR_EVENT_PIXEL_PDS_EXEC" offset="0xA5C" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="PDS Execution Address for pixel tasks (Positioned as a byte address, 128 bit granularity)" end="4" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_PIXEL_PDS_DATA" id="EUR_CR_EVENT_PIXEL_PDS_DATA" offset="0xA60" width="32">
    
  <bitfield begin="31" description="Reserved" end="6" id="Reserved_6" rwaccess="RW" width="26"></bitfield>
    
  <bitfield begin="5" description="PDS Data Size in 128 bit words, Pixel Tasks" end="0" id="SIZE" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_PIXEL_PDS_INFO" id="EUR_CR_EVENT_PIXEL_PDS_INFO" offset="0xA64" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="Secondary tasks should execute on the USSE" end="25" id="USESECEXEC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Reserved" end="22" id="Reserved_22" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="21" description="The attribute size in 128 bit words" end="13" id="ATTRIBUTE_SIZE" rwaccess="RW" width="9"></bitfield>
    
  <bitfield begin="12" description="The attribute size in 128 bit words" end="11" id="DM" rwaccess="RW" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="10" description="Allocate primary not secondary memory" end="10" id="PNS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Selects the USSE pipeline allocated to the data master " end="8" id="USE_PIPELINE" rwaccess="RW" width="2">
    <bitenum description="Data master selects the USSE pipeline" id="Data" token="Data" value="0"></bitenum>
    <bitenum description="Pipe 0" id="PIPE0" token="PIPE0" value="1"></bitenum>
    <bitenum description="Pipe 1" id="PIPE1" token="PIPE1" value="2"></bitenum>
    <bitenum description="Pipes 0 &amp; 1" id="Pipes" token="Pipes" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="The output data stride in 128 bit words" end="1" id="ODS" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="0" description="Sequential Dependency bit. All end of tile tasks should set this bit, in order to ensure that preceding pixel tasks complete before the tile is emitted." end="0" id="SD" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_OTHER_PDS_EXEC" id="EUR_CR_EVENT_OTHER_PDS_EXEC" offset="0xA68" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="PDS Execution Address for pixel tasks (Positioned as a byte address, 128 bit granularity)" end="4" id="ADDR" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_OTHER_PDS_DATA" id="EUR_CR_EVENT_OTHER_PDS_DATA" offset="0xA6C" width="32">
    
  <bitfield begin="31" description="Reserved" end="6" id="Reserved_6" rwaccess="RW" width="26"></bitfield>
    
  <bitfield begin="5" description="PDS Data Size in 128 bit words, Pixel Tasks" end="0" id="SIZE" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_OTHER_PDS_INFO" id="EUR_CR_EVENT_OTHER_PDS_INFO" offset="0xA70" width="32">
    
  <bitfield begin="31" description="Reserved" end="26" id="Reserved_26" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="Secondary tasks should execute on the USSE" end="25" id="USESECEXEC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="The number of output buffers to be allocated" end="22" id="OBUFFER_REQD" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="21" description="The attribute size in 128 bit words" end="13" id="ATTRIBUTE_SIZE" rwaccess="RW" width="9"></bitfield>
    
  <bitfield begin="12" description="Selects the Data Master" end="11" id="DM" rwaccess="RW" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Reserved" id="Reserved_2" token="Reserved_2" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="10" description="Allocate primary not secondary memory" end="10" id="PNS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Selects the USSE pipeline allocated to the data master " end="8" id="USE_PIPELINE" rwaccess="RW" width="2">
    <bitenum description="Data master selects the USSE pipeline" id="Data" token="Data" value="0"></bitenum>
    <bitenum description="Pipe 0" id="PIPE0" token="PIPE0" value="1"></bitenum>
    <bitenum description="Pipe 1" id="PIPE1" token="PIPE1" value="2"></bitenum>
    <bitenum description="Pipes 0 &amp; 1" id="Pipes" token="Pipes" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="The output data stride in 128 bit words" end="1" id="ODS" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="0" description="Sequential Dependency bit. All end of tile tasks should set this bit, in order to ensure that preceding pixel tasks complete before the tile is emitted." end="0" id="SD" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DMS_CTRL" description="Control register used to disable individual data masters - '1' - disable data master, '0' - enable data master" id="EUR_CR_DMS_CTRL" offset="0xA74" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="The maximum number of partitions allowed on each USSE for vertex tasks" end="25" id="MAX_NUM_VERTEX_PARTITIONS" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="24" description="The maximum number of partitions allowed on each USSE for pixel tasks" end="22" id="MAX_NUM_PIXEL_PARTITIONS" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="21" description="The maximum number of vertex tasks allowed on each USSE, range 0 to 32" end="16" id="MAX_NUM_EDM_TASKS" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="15" description="The maximum number of vertex tasks allowed on each USSE, range 0 to 32" end="10" id="MAX_NUM_VERTEX_TASKS" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="9" description="The maximum number of pixel tasks allowed on each USSE, range 0 to 32" end="4" id="MAX_NUM_PIXEL_TASKS" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="3" description="Disable Loopback DM" end="3" id="DISABLE_DM_LOOPBACK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Disable Event DM" end="2" id="DISABLE_DM_EVENT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Disable Pixel DM" end="1" id="DISABLE_DM_PIXEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Disable Vertex DM" end="0" id="DISABLE_DM_VERTEX" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_DMS_AGE" id="EUR_CR_DMS_AGE" offset="0xA78" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="RW" width="15"></bitfield>
    
  <bitfield begin="16" description="Enable the AGE Control mechanism" end="16" id="ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="The maximum age for any task before it will become a a priority to be serviced (in clock cycles)" end="0" id="VALUE" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_G0" id="EUR_CR_USE_G0" offset="0xA7C" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="General-purpose, cross-thread-accessible read/write register for USSE programs via the 'special' bank type" end="0" id="P" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_G1" id="EUR_CR_USE_G1" offset="0xA80" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="General-purpose, cross-thread-accessible read/write register for USSE programs via the 'special' bank type" end="0" id="P" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER0_LEFT" id="EUR_CR_USE_FILTER0_LEFT" offset="0xA84" width="32">
    
  <bitfield begin="31" description="FIRH instruction filter option, signed integer" end="24" id="TAP0" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="FIRH instruction filter option, signed integer" end="16" id="TAP1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="FIRH instruction filter option, signed integer" end="8" id="TAP2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="FIRH instruction filter option, signed integer" end="0" id="TAP3" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER0_RIGHT" id="EUR_CR_USE_FILTER0_RIGHT" offset="0xA88" width="32">
    
  <bitfield begin="31" description="FIRH instruction filter option, signed integer" end="24" id="TAP4" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="FIRH instruction filter option, signed integer" end="16" id="TAP5" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="FIRH instruction filter option, signed integer" end="8" id="TAP6" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="FIRH instruction filter option, signed integer" end="0" id="TAP7" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER0_EXTRA" id="EUR_CR_USE_FILTER0_EXTRA" offset="0xA8C" width="32">
    
  <bitfield begin="31" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="19" description="FIRH instruction filter option, unsigned integer additive constant" end="4" id="CONSTANT" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="3" description="FIRH instruction filter option, unsigned integer right shift amount" end="0" id="SHR" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER1_LEFT" id="EUR_CR_USE_FILTER1_LEFT" offset="0xA90" width="32">
    
  <bitfield begin="31" description="FIRH instruction filter option, signed integer" end="24" id="TAP0" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="FIRH instruction filter option, signed integer" end="16" id="TAP1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="FIRH instruction filter option, signed integer" end="8" id="TAP2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="FIRH instruction filter option, signed integer" end="0" id="TAP3" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER1_RIGHT" id="EUR_CR_USE_FILTER1_RIGHT" offset="0xA94" width="32">
    
  <bitfield begin="31" description="FIRH instruction filter option, signed integer" end="24" id="TAP4" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="FIRH instruction filter option, signed integer" end="16" id="TAP5" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="FIRH instruction filter option, signed integer" end="8" id="TAP6" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="FIRH instruction filter option, signed integer" end="0" id="TAP7" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER1_EXTRA" id="EUR_CR_USE_FILTER1_EXTRA" offset="0xA98" width="32">
    
  <bitfield begin="31" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="19" description="FIRH instruction filter option, unsigned integer additive constant" end="4" id="CONSTANT" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="3" description="FIRH instruction filter option, unsigned integer right shift amount" end="0" id="SHR" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER_TABLE" id="EUR_CR_USE_FILTER_TABLE" offset="0xA9C" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved_2" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="FIRH instruction filter hardwired-table selector" end="0" id="SEL" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_ST_RANGE" id="EUR_CR_USE_ST_RANGE" offset="0xAA0" width="32">
    
  <bitfield begin="31" description="Range check value for ST instruction" end="0" id="VALUE" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE0_DM_SLOT" id="EUR_CR_USE0_DM_SLOT" offset="0xAA4" width="32">
    
  <bitfield begin="31" description="Pipe 0 Data Master in Slot 15" end="30" id="SLOT15" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="29" description="Pipe 0 Data Master in Slot 14" end="28" id="SLOT14" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="27" description="Pipe 0 Data Master in Slot 13" end="26" id="SLOT13" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="25" description="Pipe 0 Data Master in Slot 12" end="24" id="SLOT12" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="23" description="Pipe 0 Data Master in Slot 11" end="22" id="SLOT11" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="21" description="Pipe 0 Data Master in Slot 10" end="20" id="SLOT10" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="19" description="Pipe 0 Data Master in Slot 9" end="18" id="SLOT9" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="17" description="Pipe 0 Data Master in Slot 8" end="16" id="SLOT8" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description="Pipe 0 Data Master in Slot 7" end="14" id="SLOT7" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="13" description="Pipe 0 Data Master in Slot 6" end="12" id="SLOT6" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="11" description="Pipe 0 Data Master in Slot 5" end="10" id="SLOT5" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="9" description="Pipe 0 Data Master in Slot 4" end="8" id="SLOT4" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="Pipe 0 Data Master in Slot 3" end="6" id="SLOT3" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="5" description="Pipe 0 Data Master in Slot 2" end="4" id="SLOT2" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="3" description="Pipe 0 Data Master in Slot 1" end="2" id="SLOT1" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description="Pipe 0 Data Master in Slot 0" end="0" id="SLOT0" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE1_DM_SLOT" id="EUR_CR_USE1_DM_SLOT" offset="0xAA8" width="32">
    
  <bitfield begin="31" description="Pipe 0 Data Master in Slot 15" end="30" id="SLOT15" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="29" description="Pipe 0 Data Master in Slot 14" end="28" id="SLOT14" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="27" description="Pipe 0 Data Master in Slot 13" end="26" id="SLOT13" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="25" description="Pipe 0 Data Master in Slot 12" end="24" id="SLOT12" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="23" description="Pipe 0 Data Master in Slot 11" end="22" id="SLOT11" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="21" description="Pipe 0 Data Master in Slot 10" end="20" id="SLOT10" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="19" description="Pipe 0 Data Master in Slot 9" end="18" id="SLOT9" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="17" description="Pipe 0 Data Master in Slot 8" end="16" id="SLOT8" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description="Pipe 0 Data Master in Slot 7" end="14" id="SLOT7" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="13" description="Pipe 0 Data Master in Slot 6" end="12" id="SLOT6" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="11" description="Pipe 0 Data Master in Slot 5" end="10" id="SLOT5" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="9" description="Pipe 0 Data Master in Slot 4" end="8" id="SLOT4" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description="Pipe 0 Data Master in Slot 3" end="6" id="SLOT3" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="5" description="Pipe 0 Data Master in Slot 2" end="4" id="SLOT2" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="3" description="Pipe 0 Data Master in Slot 1" end="2" id="SLOT1" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description="Pipe 0 Data Master in Slot 0" end="0" id="SLOT0" rwaccess="R" width="2">
    <bitenum description="Vertex" id="Vertex" token="Vertex" value="0"></bitenum>
    <bitenum description="Pixel" id="Pixel" token="Pixel" value="1"></bitenum>
    <bitenum description="Empty" id="Empty" token="Empty" value="2"></bitenum>
    <bitenum description="Event" id="Event" token="Event" value="3"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_EXEF" id="EUR_CR_USE_EXEF" offset="0xAB4" width="32">
    
  <bitfield begin="31" description="Reserved" end="19" id="Reserved_19" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="18" description="Task Flush code baset" end="15" id="CBASE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="14" description="Task Flush code offext" end="11" id="COFFEXT" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="10" description="Task Flush code offset" end="0" id="COFF" rwaccess="RW" width="11"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_EXEC_BASE" description="Base Address in memory where the PDS programs are located" id="EUR_CR_PDS_EXEC_BASE" offset="0xAB8" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 1 MB aligned Base Address for PDS programs" end="20" id="ADDR" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="19" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="20"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS" id="EUR_CR_PDS" offset="0xABC" width="32">
    
  <bitfield begin="31" description="Reserved" end="7" id="Reserved_7" rwaccess="RW" width="25"></bitfield>
    
  <bitfield begin="6" description="Disable the internal timeout on PDS code performing necessary DOUT commands" end="6" id="DOUT_TIMEOUT_DISABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="The Start Chunk. There are 64 chunks of 32 DWords." end="0" id="ATTRIBUTE_CHUNK_START" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_KICKER" description="Base Address in memory where the Kick Synchronisation data will be read from" id="EUR_CR_EVENT_KICKER" offset="0xAC4" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="256MB Addressable, 16Byte aligned Base Address for Kick Synchronisation data" end="4" id="ADDRESS" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_KICK" id="EUR_CR_EVENT_KICK" offset="0xAC8" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="The kicker register, a write to this register triggers an increment of the PDS kicker." end="0" id="NOW" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_EVENT_TIMER" description="The timer which runs at the core clock when enabled, decrementing from the loaded value. Wraps when it hits 0 back to the starting value. A transition through 0 creates an event, which can be enabled into either the PDS or the Host status register. The timer can also be read/written from within the PDS program." id="EUR_CR_EVENT_TIMER" offset="0xACC" width="32">
    
  <bitfield begin="31" description="Reserved" end="25" id="Reserved_25" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="24" description="A value of '1' enables the timer, 0 disables the counter (halts without initialisation to 0)." end="24" id="ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="The Starting value for the timer (loaded on write from wither PDS or host)." end="0" id="VALUE" rwaccess="RW" width="24"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_INV0" id="EUR_CR_PDS_INV0" offset="0xAD0" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Invalidate Context 0 in PDS Data Store Caches 0 and 1" end="0" id="DSC" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_INV1" id="EUR_CR_PDS_INV1" offset="0xAD4" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Invalidate Context 1 in PDS Data Store Caches 0 and 1" end="0" id="DSC" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_INV2" id="EUR_CR_PDS_INV2" offset="0xAD8" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Invalidate Context 2 in PDS Data Store Caches 0 and 1" end="0" id="DSC" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_INV3" id="EUR_CR_PDS_INV3" offset="0xADC" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Invalidate Context 3 in PDS Data Store Caches 0 and 1" end="0" id="DSC" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_INV_CSC" id="EUR_CR_PDS_INV_CSC" offset="0xAE0" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="W" width="31"></bitfield>
    
  <bitfield begin="0" description="Invalidate PDS Code Store Cache" end="0" id="KICK" rwaccess="W" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM0" id="EUR_CR_USE_GLOBCOM0" offset="0xAE4" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM1" id="EUR_CR_USE_GLOBCOM1" offset="0xAE8" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM2" id="EUR_CR_USE_GLOBCOM2" offset="0xAEC" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM3" id="EUR_CR_USE_GLOBCOM3" offset="0xAF0" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM4" id="EUR_CR_USE_GLOBCOM4" offset="0xAF4" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM5" id="EUR_CR_USE_GLOBCOM5" offset="0xAF8" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM6" id="EUR_CR_USE_GLOBCOM6" offset="0xAFC" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_GLOBCOM7" id="EUR_CR_USE_GLOBCOM7" offset="0xB00" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="Counters for cross-thread synchronisation and communication - used for parallelising video processing" end="0" id="COUNT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_LOOPBACK" description="This USE can issue loopback tasks through the PDS back to itself. This bit indicates the status of this interface. A value of 1 should that there are no pending loopback requests (for any USE pipeline), A value of 0 indicates that a loop task is pending, and that further loopback events may cause the USE pipeline to wait until new resource becomes available. Issuing loopback events when tasks are already pending is not recommended, as this may result in system lockups. " id="EUR_CR_LOOPBACK" offset="0xB04" width="32">
    
  <bitfield begin="31" description="Reserved" end="1" id="Reserved_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="The Starting value for the timer (loaded on write from wither PDS or host)." end="0" id="STATUS" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE0_SERV_PIXEL" id="EUR_CR_USE0_SERV_PIXEL" offset="0xB08" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="No Pixel Data Master tasks in USE0 queue" end="16" id="EMPTY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Number of Pixel Data Master tasks serviced by USE0" end="0" id="COUNT" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE0_SERV_VERTEX" id="EUR_CR_USE0_SERV_VERTEX" offset="0xB0C" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="No Vertex Data Master tasks in USE0 queue" end="16" id="EMPTY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Number of Vertex Data Master tasks serviced by USE0" end="0" id="COUNT" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE0_SERV_EVENT" id="EUR_CR_USE0_SERV_EVENT" offset="0xB10" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="No Event Data Master tasks in USE0 queue" end="16" id="EMPTY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Number of Event Data Master tasks serviced by USE0" end="0" id="COUNT" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE1_SERV_PIXEL" id="EUR_CR_USE1_SERV_PIXEL" offset="0xB14" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="No Pixel Data Master tasks in USE1 queue" end="16" id="EMPTY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Number of Pixel Data Master tasks serviced by USE1" end="0" id="COUNT" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE1_SERV_VERTEX" id="EUR_CR_USE1_SERV_VERTEX" offset="0xB18" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="No Vertex Data Master tasks in USE1 queue" end="16" id="EMPTY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Number of Vertex Data Master tasks serviced by USE1" end="0" id="COUNT" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE1_SERV_EVENT" id="EUR_CR_USE1_SERV_EVENT" offset="0xB1C" width="32">
    
  <bitfield begin="31" description="Reserved" end="17" id="Reserved_17" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="No Event Data Master tasks in USE1 queue" end="16" id="EMPTY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Number of Event Data Master tasks serviced by USE1" end="0" id="COUNT" rwaccess="R" width="16"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER2_LEFT" id="EUR_CR_USE_FILTER2_LEFT" offset="0xB20" width="32">
    
  <bitfield begin="31" description="FIRH instruction filter option, signed integer" end="24" id="TAP0" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Reserved" end="8" id="Reserved_8" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="7" description="FIRH instruction filter option, signed integer" end="0" id="TAP3" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER2_RIGHT" id="EUR_CR_USE_FILTER2_RIGHT" offset="0xB24" width="32">
    
  <bitfield begin="31" description="Reserved" end="16" id="Reserved_16" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="FIRH instruction filter option, signed integer" end="8" id="TAP6" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_FILTER2_EXTRA" id="EUR_CR_USE_FILTER2_EXTRA" offset="0xB28" width="32">
    
  <bitfield begin="31" description="Reserved" end="20" id="Reserved_20" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="19" description="FIRH instruction filter option, unsigned integer additive constant" end="4" id="CONSTANT" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="3" description="FIRH instruction filter option, unsigned integer right shift amount" end="0" id="SHR" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_PDS_PC_BASE" id="EUR_CR_PDS_PC_BASE" offset="0xB2C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved_30" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="PC base address" end="0" id="ADDRESS" rwaccess="R" width="30"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_USE_MOE" id="EUR_CR_USE_MOE" offset="0xB30" width="32">
    
  <bitfield begin="31" description="Reserved" end="9" id="Reserved_9" rwaccess="RW" width="23"></bitfield>
    
  <bitfield begin="8" description="Colour instruction format/address select" end="8" id="CFASEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="1" id="Reserved_1" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="0" description="EFO source format/address select" end="0" id="FSFASEL" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_CTRL" id="EUR_CR_BIF_CTRL" offset="0xC00" width="32">
    
  <bitfield begin="31" description="Reserved" end="16" id="Reserved_16" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="Setting to '1' bypasses the MMU for this requestor " end="15" id="MMU_BYPASS_USE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Setting to '1' bypasses the MMU for this requestor " end="14" id="MMU_BYPASS_ISP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Setting to '1' bypasses the MMU for this requestor " end="13" id="MMU_BYPASS_TSPP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Setting to '1' bypasses the MMU for this requestor " end="12" id="MMU_BYPASS_PBE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Reserved" end="11" id="Reserved_11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Setting to '1' bypasses the MMU for this requestor " end="10" id="MMU_BYPASS_TE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Setting to '1' bypasses the MMU for this requestor " end="9" id="MMU_BYPASS_VDM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Setting to '1' bypasses the MMU for this requestor " end="8" id="MMU_BYPASS_CACHE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="5" id="Reserved_5" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="4" description="Writing '1' clears the current fault in the EUR_CR_BIF_INT_STAT register " end="4" id="CLEAR_FAULT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Writing '1' causes flushing of directory cache (and all other caches and tlbs) " end="3" id="INVALDC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Writing '1' causes flushing of address translation cache and all tlbs " end="2" id="FLUSH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Writing '1' causes bif operation to pause " end="1" id="PAUSE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Writing '1' disables transaction re-ordering by signaling to the external SoC infrastructure to closely order the requests (Debug Only) " end="0" id="NOREORDER" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_INT_STAT" id="EUR_CR_BIF_INT_STAT" offset="0xC04" width="32">
    
  <bitfield begin="31" description="Reserved" end="15" id="Reserved_15" rwaccess="R" width="17"></bitfield>
    
  <bitfield begin="14" description="Indicates whether the current fault is a page or R/W protection fault " end="14" id="PF_N_RW" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="13" description="1 bit per requestor indicating a page fault (only 1 can be set at once)" end="0" id="FAULT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_FAULT" id="EUR_CR_BIF_FAULT" offset="0xC08" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="27" description="Page-aligned address causing page fault " end="12" id="ADDR" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="11" description="Reserved" end="0" id="Reserved_0" rwaccess="R" width="12"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_DIR_LIST_BASE0" id="EUR_CR_BIF_DIR_LIST_BASE0" offset="0xC84" width="32">
    
  <bitfield begin="31" description="Base address for Directory Cache updates " end="12" id="ADDR" rwaccess="RW" width="20"></bitfield>
    
  <bitfield begin="11" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_TA_REQ_BASE" id="EUR_CR_BIF_TA_REQ_BASE" offset="0xC90" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="Base address for ta requestor - 256MB, 1MB aligned " end="20" id="ADDR" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="19" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="20"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_MEM_REQ_STAT" id="EUR_CR_BIF_MEM_REQ_STAT" offset="0xCA8" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved_8" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description=" Outstanding read requests in the memif " end="0" id="READS" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_3D_REQ_BASE" id="EUR_CR_BIF_3D_REQ_BASE" offset="0xCAC" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="Base address for 3d requestors  - 256MB, 1MB aligned" end="20" id="ADDR" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="19" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="20"></bitfield>
  </register>
  
  
  <register acronym="EUR_CR_BIF_ZLS_REQ_BASE" id="EUR_CR_BIF_ZLS_REQ_BASE" offset="0xCB0" width="32">
    
  <bitfield begin="31" description="Reserved" end="28" id="Reserved_28" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="Base address for zls requestor - 256MB, 1MB aligned" end="20" id="ADDR" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="19" description="Reserved" end="0" id="Reserved_0" rwaccess="RW" width="20"></bitfield>
  </register>
</module>
