<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="Queue_MGR" id="Queue_MGR">
  
  
  <register acronym="QMGRREVID" id="QMGRREVID" offset="0x0" width="32">
    
  <bitfield begin="31" description="Scheme that this register is compliant with" end="30" id="SCHEME" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="27" description="Function" end="16" id="FUNCTION" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="15" description="RTL revision" end="11" id="REVRTL" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="Major revision" end="8" id="REVMAJ" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="Custom revision" end="6" id="REVCUSTOM" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="Minor revision Queue Manager Revision Register " end="0" id="REVMIN" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="QMGRRST" id="QMGRRST" offset="0x8" width="32">
    
  <bitfield begin="31" description="Indicates whether queue contents should be merged on  to head or tail of destination queue. Clear this field for  head and set for tail. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="29" description="Destination Queue Number" end="16" id="DEST_QNUM" rwaccess="W" width="14"></bitfield>
    
  <bitfield begin="13" description="Source Queue Number Queue Manager Queue Diversion Register Note : CBA write transactions to this register cause the QMGR to start processing an internal  state machine. This disables CBA read transactions.while it is busy processing the state  machine.  Once the state machine is back in the idle state ; CBA read transactions are available  again. " end="0" id="SOURCE_QNUM" rwaccess="W" width="14"></bitfield>
  </register>
  
  
  <register acronym="FDBSC0" id="FDBSC0" offset="0x20" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 3 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ3_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 2 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ2_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 1 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ1_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 0 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 0 " end="0" id="FDBQ0_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC1" id="FDBSC1" offset="0x24" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 7 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ7_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 6 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ6_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 5 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ5_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 4 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 1 " end="0" id="FDBQ4_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC2" id="FDBSC2" offset="0x28" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 11 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ11_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 10 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ10_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 9 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ9_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 8 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 2 " end="0" id="FDBQ8_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC3" id="FDBSC3" offset="0x2C" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 15 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ15_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 14 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ14_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 13 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ13_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 12 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu.  Table 109 - QMGR_Free_Descriptor_Buffer_Starvation_Count Register 3 " end="0" id="FDBQ12_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC4" id="FDBSC4" offset="0x30" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 19 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ19_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 18 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ18_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 17 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ17_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 16 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 4 " end="0" id="FDBQ16_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC5" id="FDBSC5" offset="0x34" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 23 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ23_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 22 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ22_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 21 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ21_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 20 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 5 " end="0" id="FDBQ20_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC6" id="FDBSC6" offset="0x38" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 27 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ27_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 26 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ26_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 25 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ25_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 24 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 6 " end="0" id="FDBQ24_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="FDBSC7" id="FDBSC7" offset="0x3C" width="32">
    
  <bitfield begin="31" description="This field increments each time the Free  Descriptor/Buffer Queue 31 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="24" id="FDBQ31_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="This field increments each time the Free  Descriptor/Buffer Queue 30 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="16" id="FDBQ30_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="This field increments each time the Free  Descriptor/Buffer Queue 29 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. " end="8" id="FDBQ29_STARVE_CNT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="This field increments each time the Free  Descriptor/Buffer Queue 28 is read while it is empty via  the CPPI DMA. This field is cleared when read via the  cpu. Queue_Manager_Free_Descriptor_Buffer_Starvation_Count Register 7 " end="0" id="FDBQ28_STARVE_CNT" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="LRAM0BASE" id="LRAM0BASE" offset="0x80" width="32">
    
  <bitfield begin="31" description="This field stores the base address for the first region of  the linking RAM. This may be anywhere in 32-bit  address space but would be typically located in on-chip  memory. " end="2" id="REGION0_BASE" rwaccess="RW" width="30"></bitfield>
  </register>
  
  
  <register acronym="LRAM0SIZE" id="LRAM0SIZE" offset="0x84" width="32">
    
  <bitfield begin="13" description="This field indicates the number of entries that are  contained in the linking RAM region 0. A descriptor with  index less than region0_size value has its linking  location in region 0. A descriptor with index greater than  region0_size has its linking location in region 1. The  queue manager will add the index (left shifted by 2 bits)  to the appropriate regionX_base_addr to get the  absolute 32-bit address to the linking location for a  descriptor. Queue Manager Linking Ram Region 0 Size Register " end="0" id="REGION0_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="LRAM1BASE" id="LRAM1BASE" offset="0x88" width="32">
    
  <bitfield begin="31" description="This field stores the base address for the second  region of the linking RAM. This may be anywhere in 32- bit address space but would be typically located in off- chip memory. " end="2" id="REGION1_BASE" rwaccess="RW" width="30"></bitfield>
  </register>
  
  
  <register acronym="PEND0" id="PEND0" offset="0x90" width="32">
    
  <bitfield begin="31" description="This field indicates the queue pending status for  queues[31:0]. " end="0" id="QPEND0" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="PEND1" id="PEND1" offset="0x94" width="32">
    
  <bitfield begin="31" description="This field indicates the queue pending status for  queues[63:32].  Table 118 - QMGR_Queue_Pending_1 Register 1 " end="0" id="QPEND1" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="PEND2" id="PEND2" offset="0x98" width="32">
    
  <bitfield begin="31" description="This field indicates the queue pending status for  queues[95:64]. Queue_Manager_Queue_Pending_2 Register 2 " end="0" id="QPEND2" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="PEND3" id="PEND3" offset="0x9C" width="32">
    
  <bitfield begin="31" description="This field indicates the queue pending status for  queues[127:96]. Queue_Manager_Queue_Pending_3 Register 3 " end="0" id="QPEND3" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="PEND4" id="PEND4" offset="0xA0" width="32">
    
  <bitfield begin="31" description="This field indicates the queue pending status for  queues[159:128]. Queue_Manager_Queue_Pending_4 Register 4 " end="0" id="QPEND4" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE0" id="QMEMRBASE0" offset="0x1000" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL0" id="QMEMCTRL0" offset="0x1004" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE1" id="QMEMRBASE1" offset="0x1010" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL1" id="QMEMCTRL1" offset="0x1014" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE2" id="QMEMRBASE2" offset="0x1020" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL2" id="QMEMCTRL2" offset="0x1024" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE3" id="QMEMRBASE3" offset="0x1030" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL3" id="QMEMCTRL3" offset="0x1034" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE4" id="QMEMRBASE4" offset="0x1040" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL4" id="QMEMCTRL4" offset="0x1044" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE5" id="QMEMRBASE5" offset="0x1050" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL5" id="QMEMCTRL5" offset="0x1054" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE6" id="QMEMRBASE6" offset="0x1060" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL6" id="QMEMCTRL6" offset="0x1064" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QMEMRBASE7" id="QMEMRBASE7" offset="0x1070" width="32">
    
  <bitfield begin="31" description="This field contains the base address of the memory  region R. " end="5" id="REG" rwaccess="RW" width="27"></bitfield>
  </register>
  
  
  <register acronym="QMEMCTRL7" id="QMEMCTRL7" offset="0x1074" width="32">
    
  <bitfield begin="29" description="This field indicates where in linking RAM does the  descriptor linking information corresponding to memory  region R starts. " end="16" id="START_INDEX" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="11" description="This field indicates the size of each descriptor in this  memory region. It is an encoded value that specifies  descriptor size as 2^(5+desc_size) number of bytes.  The settings of desc_size from 9-15 are reserved. " end="8" id="DESC_SIZE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="This field indicates the size of the memory region (in  terms of number of descriptors). It is an encoded value  that specifies region size as 2^(5+reg_size) number of  descriptors. Queue Manager Memory Region R Control Registers The following sections describe each of the four register locations that may be present for each  queue in the queues region. For reasons of implementation and area efficiency, these registers  are not actually implemented as a huge array of flip flops but are instead implemented as a  single set of mailbox registers which use the LSBs of the provided address as a queue index.  Due to this implementation all accesses to these registers need to be performed as a single  burst write for each packet push operation or a single burst read for each packet pop operation.  The length of a burst to push or pop a packet will vary depending on the optional features that  the queue supports which may be 4, 8, 12 or 16 bytes. Queue N Register D must always be  written / read in the burst but the preceding words are optional depending on the required queue  functionality. " end="0" id="REG_SIZE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_A" id="QUEUE_0_A" offset="0x2000" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_B" id="QUEUE_0_B" offset="0x2004" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_C" id="QUEUE_0_C" offset="0x2008" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_D" id="QUEUE_0_D" offset="0x200C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_A" id="QUEUE_1_A" offset="0x2010" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_B" id="QUEUE_1_B" offset="0x2014" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_C" id="QUEUE_1_C" offset="0x2018" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_D" id="QUEUE_1_D" offset="0x201C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_A" id="QUEUE_2_A" offset="0x2020" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_B" id="QUEUE_2_B" offset="0x2024" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_C" id="QUEUE_2_C" offset="0x2028" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_D" id="QUEUE_2_D" offset="0x202C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_A" id="QUEUE_3_A" offset="0x2030" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_B" id="QUEUE_3_B" offset="0x2034" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_C" id="QUEUE_3_C" offset="0x2038" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_D" id="QUEUE_3_D" offset="0x203C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_A" id="QUEUE_4_A" offset="0x2040" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_B" id="QUEUE_4_B" offset="0x2044" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_C" id="QUEUE_4_C" offset="0x2048" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_D" id="QUEUE_4_D" offset="0x204C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_A" id="QUEUE_5_A" offset="0x2050" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_B" id="QUEUE_5_B" offset="0x2054" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_C" id="QUEUE_5_C" offset="0x2058" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_D" id="QUEUE_5_D" offset="0x205C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_A" id="QUEUE_6_A" offset="0x2060" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_B" id="QUEUE_6_B" offset="0x2064" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_C" id="QUEUE_6_C" offset="0x2068" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_D" id="QUEUE_6_D" offset="0x206C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_A" id="QUEUE_7_A" offset="0x2070" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_B" id="QUEUE_7_B" offset="0x2074" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_C" id="QUEUE_7_C" offset="0x2078" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_D" id="QUEUE_7_D" offset="0x207C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_A" id="QUEUE_8_A" offset="0x2080" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_B" id="QUEUE_8_B" offset="0x2084" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_C" id="QUEUE_8_C" offset="0x2088" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_D" id="QUEUE_8_D" offset="0x208C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_A" id="QUEUE_9_A" offset="0x2090" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_B" id="QUEUE_9_B" offset="0x2094" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_C" id="QUEUE_9_C" offset="0x2098" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_D" id="QUEUE_9_D" offset="0x209C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_A" id="QUEUE_10_A" offset="0x20A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_B" id="QUEUE_10_B" offset="0x20A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_C" id="QUEUE_10_C" offset="0x20A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_D" id="QUEUE_10_D" offset="0x20AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_A" id="QUEUE_11_A" offset="0x20B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_B" id="QUEUE_11_B" offset="0x20B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_C" id="QUEUE_11_C" offset="0x20B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_D" id="QUEUE_11_D" offset="0x20BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_A" id="QUEUE_12_A" offset="0x20C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_B" id="QUEUE_12_B" offset="0x20C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_C" id="QUEUE_12_C" offset="0x20C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_D" id="QUEUE_12_D" offset="0x20CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_A" id="QUEUE_13_A" offset="0x20D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_B" id="QUEUE_13_B" offset="0x20D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_C" id="QUEUE_13_C" offset="0x20D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_D" id="QUEUE_13_D" offset="0x20DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_A" id="QUEUE_14_A" offset="0x20E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_B" id="QUEUE_14_B" offset="0x20E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_C" id="QUEUE_14_C" offset="0x20E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_D" id="QUEUE_14_D" offset="0x20EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_A" id="QUEUE_15_A" offset="0x20F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_B" id="QUEUE_15_B" offset="0x20F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_C" id="QUEUE_15_C" offset="0x20F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_D" id="QUEUE_15_D" offset="0x20FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_A" id="QUEUE_16_A" offset="0x2100" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_B" id="QUEUE_16_B" offset="0x2104" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_C" id="QUEUE_16_C" offset="0x2108" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_D" id="QUEUE_16_D" offset="0x210C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_A" id="QUEUE_17_A" offset="0x2110" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_B" id="QUEUE_17_B" offset="0x2114" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_C" id="QUEUE_17_C" offset="0x2118" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_D" id="QUEUE_17_D" offset="0x211C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_A" id="QUEUE_18_A" offset="0x2120" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_B" id="QUEUE_18_B" offset="0x2124" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_C" id="QUEUE_18_C" offset="0x2128" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_D" id="QUEUE_18_D" offset="0x212C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_A" id="QUEUE_19_A" offset="0x2130" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_B" id="QUEUE_19_B" offset="0x2134" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_C" id="QUEUE_19_C" offset="0x2138" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_D" id="QUEUE_19_D" offset="0x213C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_A" id="QUEUE_20_A" offset="0x2140" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_B" id="QUEUE_20_B" offset="0x2144" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_C" id="QUEUE_20_C" offset="0x2148" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_D" id="QUEUE_20_D" offset="0x214C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_A" id="QUEUE_21_A" offset="0x2150" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_B" id="QUEUE_21_B" offset="0x2154" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_C" id="QUEUE_21_C" offset="0x2158" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_D" id="QUEUE_21_D" offset="0x215C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_A" id="QUEUE_22_A" offset="0x2160" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_B" id="QUEUE_22_B" offset="0x2164" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_C" id="QUEUE_22_C" offset="0x2168" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_D" id="QUEUE_22_D" offset="0x216C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_A" id="QUEUE_23_A" offset="0x2170" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_B" id="QUEUE_23_B" offset="0x2174" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_C" id="QUEUE_23_C" offset="0x2178" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_D" id="QUEUE_23_D" offset="0x217C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_A" id="QUEUE_24_A" offset="0x2180" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_B" id="QUEUE_24_B" offset="0x2184" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_C" id="QUEUE_24_C" offset="0x2188" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_D" id="QUEUE_24_D" offset="0x218C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_A" id="QUEUE_25_A" offset="0x2190" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_B" id="QUEUE_25_B" offset="0x2194" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_C" id="QUEUE_25_C" offset="0x2198" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_D" id="QUEUE_25_D" offset="0x219C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_A" id="QUEUE_26_A" offset="0x21A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_B" id="QUEUE_26_B" offset="0x21A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_C" id="QUEUE_26_C" offset="0x21A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_D" id="QUEUE_26_D" offset="0x21AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_A" id="QUEUE_27_A" offset="0x21B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_B" id="QUEUE_27_B" offset="0x21B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_C" id="QUEUE_27_C" offset="0x21B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_D" id="QUEUE_27_D" offset="0x21BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_A" id="QUEUE_28_A" offset="0x21C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_B" id="QUEUE_28_B" offset="0x21C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_C" id="QUEUE_28_C" offset="0x21C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_D" id="QUEUE_28_D" offset="0x21CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_A" id="QUEUE_29_A" offset="0x21D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_B" id="QUEUE_29_B" offset="0x21D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_C" id="QUEUE_29_C" offset="0x21D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_D" id="QUEUE_29_D" offset="0x21DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_A" id="QUEUE_30_A" offset="0x21E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_B" id="QUEUE_30_B" offset="0x21E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_C" id="QUEUE_30_C" offset="0x21E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_D" id="QUEUE_30_D" offset="0x21EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_A" id="QUEUE_31_A" offset="0x21F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_B" id="QUEUE_31_B" offset="0x21F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_C" id="QUEUE_31_C" offset="0x21F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_D" id="QUEUE_31_D" offset="0x21FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_A" id="QUEUE_32_A" offset="0x2200" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_B" id="QUEUE_32_B" offset="0x2204" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_C" id="QUEUE_32_C" offset="0x2208" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_D" id="QUEUE_32_D" offset="0x220C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_A" id="QUEUE_33_A" offset="0x2210" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_B" id="QUEUE_33_B" offset="0x2214" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_C" id="QUEUE_33_C" offset="0x2218" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_D" id="QUEUE_33_D" offset="0x221C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_A" id="QUEUE_34_A" offset="0x2220" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_B" id="QUEUE_34_B" offset="0x2224" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_C" id="QUEUE_34_C" offset="0x2228" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_D" id="QUEUE_34_D" offset="0x222C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_A" id="QUEUE_35_A" offset="0x2230" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_B" id="QUEUE_35_B" offset="0x2234" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_C" id="QUEUE_35_C" offset="0x2238" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_D" id="QUEUE_35_D" offset="0x223C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_A" id="QUEUE_36_A" offset="0x2240" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_B" id="QUEUE_36_B" offset="0x2244" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_C" id="QUEUE_36_C" offset="0x2248" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_D" id="QUEUE_36_D" offset="0x224C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_A" id="QUEUE_37_A" offset="0x2250" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_B" id="QUEUE_37_B" offset="0x2254" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_C" id="QUEUE_37_C" offset="0x2258" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_D" id="QUEUE_37_D" offset="0x225C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_A" id="QUEUE_38_A" offset="0x2260" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_B" id="QUEUE_38_B" offset="0x2264" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_C" id="QUEUE_38_C" offset="0x2268" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_D" id="QUEUE_38_D" offset="0x226C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_A" id="QUEUE_39_A" offset="0x2270" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_B" id="QUEUE_39_B" offset="0x2274" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_C" id="QUEUE_39_C" offset="0x2278" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_D" id="QUEUE_39_D" offset="0x227C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_A" id="QUEUE_40_A" offset="0x2280" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_B" id="QUEUE_40_B" offset="0x2284" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_C" id="QUEUE_40_C" offset="0x2288" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_D" id="QUEUE_40_D" offset="0x228C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_A" id="QUEUE_41_A" offset="0x2290" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_B" id="QUEUE_41_B" offset="0x2294" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_C" id="QUEUE_41_C" offset="0x2298" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_D" id="QUEUE_41_D" offset="0x229C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_A" id="QUEUE_42_A" offset="0x22A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_B" id="QUEUE_42_B" offset="0x22A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_C" id="QUEUE_42_C" offset="0x22A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_D" id="QUEUE_42_D" offset="0x22AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_A" id="QUEUE_43_A" offset="0x22B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_B" id="QUEUE_43_B" offset="0x22B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_C" id="QUEUE_43_C" offset="0x22B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_D" id="QUEUE_43_D" offset="0x22BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_A" id="QUEUE_44_A" offset="0x22C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_B" id="QUEUE_44_B" offset="0x22C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_C" id="QUEUE_44_C" offset="0x22C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_D" id="QUEUE_44_D" offset="0x22CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_A" id="QUEUE_45_A" offset="0x22D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_B" id="QUEUE_45_B" offset="0x22D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_C" id="QUEUE_45_C" offset="0x22D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_D" id="QUEUE_45_D" offset="0x22DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_A" id="QUEUE_46_A" offset="0x22E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_B" id="QUEUE_46_B" offset="0x22E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_C" id="QUEUE_46_C" offset="0x22E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_D" id="QUEUE_46_D" offset="0x22EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_A" id="QUEUE_47_A" offset="0x22F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_B" id="QUEUE_47_B" offset="0x22F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_C" id="QUEUE_47_C" offset="0x22F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_D" id="QUEUE_47_D" offset="0x22FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_A" id="QUEUE_48_A" offset="0x2300" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_B" id="QUEUE_48_B" offset="0x2304" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_C" id="QUEUE_48_C" offset="0x2308" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_D" id="QUEUE_48_D" offset="0x230C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_A" id="QUEUE_49_A" offset="0x2310" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_B" id="QUEUE_49_B" offset="0x2314" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_C" id="QUEUE_49_C" offset="0x2318" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_D" id="QUEUE_49_D" offset="0x231C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_A" id="QUEUE_50_A" offset="0x2320" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_B" id="QUEUE_50_B" offset="0x2324" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_C" id="QUEUE_50_C" offset="0x2328" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_D" id="QUEUE_50_D" offset="0x232C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_A" id="QUEUE_51_A" offset="0x2330" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_B" id="QUEUE_51_B" offset="0x2334" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_C" id="QUEUE_51_C" offset="0x2338" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_D" id="QUEUE_51_D" offset="0x233C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_A" id="QUEUE_52_A" offset="0x2340" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_B" id="QUEUE_52_B" offset="0x2344" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_C" id="QUEUE_52_C" offset="0x2348" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_D" id="QUEUE_52_D" offset="0x234C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_A" id="QUEUE_53_A" offset="0x2350" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_B" id="QUEUE_53_B" offset="0x2354" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_C" id="QUEUE_53_C" offset="0x2358" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_D" id="QUEUE_53_D" offset="0x235C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_A" id="QUEUE_54_A" offset="0x2360" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_B" id="QUEUE_54_B" offset="0x2364" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_C" id="QUEUE_54_C" offset="0x2368" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_D" id="QUEUE_54_D" offset="0x236C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_A" id="QUEUE_55_A" offset="0x2370" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_B" id="QUEUE_55_B" offset="0x2374" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_C" id="QUEUE_55_C" offset="0x2378" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_D" id="QUEUE_55_D" offset="0x237C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_A" id="QUEUE_56_A" offset="0x2380" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_B" id="QUEUE_56_B" offset="0x2384" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_C" id="QUEUE_56_C" offset="0x2388" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_D" id="QUEUE_56_D" offset="0x238C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_A" id="QUEUE_57_A" offset="0x2390" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_B" id="QUEUE_57_B" offset="0x2394" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_C" id="QUEUE_57_C" offset="0x2398" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_D" id="QUEUE_57_D" offset="0x239C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_A" id="QUEUE_58_A" offset="0x23A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_B" id="QUEUE_58_B" offset="0x23A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_C" id="QUEUE_58_C" offset="0x23A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_D" id="QUEUE_58_D" offset="0x23AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_A" id="QUEUE_59_A" offset="0x23B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_B" id="QUEUE_59_B" offset="0x23B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_C" id="QUEUE_59_C" offset="0x23B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_D" id="QUEUE_59_D" offset="0x23BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_A" id="QUEUE_60_A" offset="0x23C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_B" id="QUEUE_60_B" offset="0x23C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_C" id="QUEUE_60_C" offset="0x23C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_D" id="QUEUE_60_D" offset="0x23CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_A" id="QUEUE_61_A" offset="0x23D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_B" id="QUEUE_61_B" offset="0x23D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_C" id="QUEUE_61_C" offset="0x23D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_D" id="QUEUE_61_D" offset="0x23DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_A" id="QUEUE_62_A" offset="0x23E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_B" id="QUEUE_62_B" offset="0x23E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_C" id="QUEUE_62_C" offset="0x23E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_D" id="QUEUE_62_D" offset="0x23EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_A" id="QUEUE_63_A" offset="0x23F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_B" id="QUEUE_63_B" offset="0x23F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_C" id="QUEUE_63_C" offset="0x23F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_D" id="QUEUE_63_D" offset="0x23FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_A" id="QUEUE_64_A" offset="0x2400" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_B" id="QUEUE_64_B" offset="0x2404" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_C" id="QUEUE_64_C" offset="0x2408" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_D" id="QUEUE_64_D" offset="0x240C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_A" id="QUEUE_65_A" offset="0x2410" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_B" id="QUEUE_65_B" offset="0x2414" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_C" id="QUEUE_65_C" offset="0x2418" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_D" id="QUEUE_65_D" offset="0x241C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_A" id="QUEUE_66_A" offset="0x2420" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_B" id="QUEUE_66_B" offset="0x2424" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_C" id="QUEUE_66_C" offset="0x2428" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_D" id="QUEUE_66_D" offset="0x242C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_A" id="QUEUE_67_A" offset="0x2430" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_B" id="QUEUE_67_B" offset="0x2434" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_C" id="QUEUE_67_C" offset="0x2438" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_D" id="QUEUE_67_D" offset="0x243C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_A" id="QUEUE_68_A" offset="0x2440" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_B" id="QUEUE_68_B" offset="0x2444" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_C" id="QUEUE_68_C" offset="0x2448" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_D" id="QUEUE_68_D" offset="0x244C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_A" id="QUEUE_69_A" offset="0x2450" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_B" id="QUEUE_69_B" offset="0x2454" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_C" id="QUEUE_69_C" offset="0x2458" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_D" id="QUEUE_69_D" offset="0x245C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_A" id="QUEUE_70_A" offset="0x2460" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_B" id="QUEUE_70_B" offset="0x2464" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_C" id="QUEUE_70_C" offset="0x2468" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_D" id="QUEUE_70_D" offset="0x246C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_A" id="QUEUE_71_A" offset="0x2470" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_B" id="QUEUE_71_B" offset="0x2474" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_C" id="QUEUE_71_C" offset="0x2478" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_D" id="QUEUE_71_D" offset="0x247C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_A" id="QUEUE_72_A" offset="0x2480" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_B" id="QUEUE_72_B" offset="0x2484" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_C" id="QUEUE_72_C" offset="0x2488" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_D" id="QUEUE_72_D" offset="0x248C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_A" id="QUEUE_73_A" offset="0x2490" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_B" id="QUEUE_73_B" offset="0x2494" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_C" id="QUEUE_73_C" offset="0x2498" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_D" id="QUEUE_73_D" offset="0x249C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_A" id="QUEUE_74_A" offset="0x24A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_B" id="QUEUE_74_B" offset="0x24A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_C" id="QUEUE_74_C" offset="0x24A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_D" id="QUEUE_74_D" offset="0x24AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_A" id="QUEUE_75_A" offset="0x24B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_B" id="QUEUE_75_B" offset="0x24B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_C" id="QUEUE_75_C" offset="0x24B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_D" id="QUEUE_75_D" offset="0x24BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_A" id="QUEUE_76_A" offset="0x24C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_B" id="QUEUE_76_B" offset="0x24C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_C" id="QUEUE_76_C" offset="0x24C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_D" id="QUEUE_76_D" offset="0x24CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_A" id="QUEUE_77_A" offset="0x24D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_B" id="QUEUE_77_B" offset="0x24D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_C" id="QUEUE_77_C" offset="0x24D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_D" id="QUEUE_77_D" offset="0x24DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_A" id="QUEUE_78_A" offset="0x24E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_B" id="QUEUE_78_B" offset="0x24E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_C" id="QUEUE_78_C" offset="0x24E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_D" id="QUEUE_78_D" offset="0x24EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_A" id="QUEUE_79_A" offset="0x24F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_B" id="QUEUE_79_B" offset="0x24F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_C" id="QUEUE_79_C" offset="0x24F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_D" id="QUEUE_79_D" offset="0x24FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_A" id="QUEUE_80_A" offset="0x2500" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_B" id="QUEUE_80_B" offset="0x2504" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_C" id="QUEUE_80_C" offset="0x2508" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_D" id="QUEUE_80_D" offset="0x250C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_A" id="QUEUE_81_A" offset="0x2510" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_B" id="QUEUE_81_B" offset="0x2514" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_C" id="QUEUE_81_C" offset="0x2518" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_D" id="QUEUE_81_D" offset="0x251C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_A" id="QUEUE_82_A" offset="0x2520" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_B" id="QUEUE_82_B" offset="0x2524" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_C" id="QUEUE_82_C" offset="0x2528" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_D" id="QUEUE_82_D" offset="0x252C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_A" id="QUEUE_83_A" offset="0x2530" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_B" id="QUEUE_83_B" offset="0x2534" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_C" id="QUEUE_83_C" offset="0x2538" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_D" id="QUEUE_83_D" offset="0x253C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_A" id="QUEUE_84_A" offset="0x2540" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_B" id="QUEUE_84_B" offset="0x2544" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_C" id="QUEUE_84_C" offset="0x2548" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_D" id="QUEUE_84_D" offset="0x254C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_A" id="QUEUE_85_A" offset="0x2550" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_B" id="QUEUE_85_B" offset="0x2554" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_C" id="QUEUE_85_C" offset="0x2558" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_D" id="QUEUE_85_D" offset="0x255C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_A" id="QUEUE_86_A" offset="0x2560" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_B" id="QUEUE_86_B" offset="0x2564" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_C" id="QUEUE_86_C" offset="0x2568" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_D" id="QUEUE_86_D" offset="0x256C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_A" id="QUEUE_87_A" offset="0x2570" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_B" id="QUEUE_87_B" offset="0x2574" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_C" id="QUEUE_87_C" offset="0x2578" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_D" id="QUEUE_87_D" offset="0x257C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_A" id="QUEUE_88_A" offset="0x2580" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_B" id="QUEUE_88_B" offset="0x2584" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_C" id="QUEUE_88_C" offset="0x2588" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_D" id="QUEUE_88_D" offset="0x258C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_A" id="QUEUE_89_A" offset="0x2590" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_B" id="QUEUE_89_B" offset="0x2594" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_C" id="QUEUE_89_C" offset="0x2598" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_D" id="QUEUE_89_D" offset="0x259C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_A" id="QUEUE_90_A" offset="0x25A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_B" id="QUEUE_90_B" offset="0x25A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_C" id="QUEUE_90_C" offset="0x25A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_D" id="QUEUE_90_D" offset="0x25AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_A" id="QUEUE_91_A" offset="0x25B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_B" id="QUEUE_91_B" offset="0x25B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_C" id="QUEUE_91_C" offset="0x25B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_D" id="QUEUE_91_D" offset="0x25BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_A" id="QUEUE_92_A" offset="0x25C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_B" id="QUEUE_92_B" offset="0x25C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_C" id="QUEUE_92_C" offset="0x25C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_D" id="QUEUE_92_D" offset="0x25CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_A" id="QUEUE_93_A" offset="0x25D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_B" id="QUEUE_93_B" offset="0x25D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_C" id="QUEUE_93_C" offset="0x25D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_D" id="QUEUE_93_D" offset="0x25DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_A" id="QUEUE_94_A" offset="0x25E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_B" id="QUEUE_94_B" offset="0x25E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_C" id="QUEUE_94_C" offset="0x25E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_D" id="QUEUE_94_D" offset="0x25EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_A" id="QUEUE_95_A" offset="0x25F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_B" id="QUEUE_95_B" offset="0x25F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_C" id="QUEUE_95_C" offset="0x25F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_D" id="QUEUE_95_D" offset="0x25FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_A" id="QUEUE_96_A" offset="0x2600" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_B" id="QUEUE_96_B" offset="0x2604" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_C" id="QUEUE_96_C" offset="0x2608" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_D" id="QUEUE_96_D" offset="0x260C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_A" id="QUEUE_97_A" offset="0x2610" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_B" id="QUEUE_97_B" offset="0x2614" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_C" id="QUEUE_97_C" offset="0x2618" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_D" id="QUEUE_97_D" offset="0x261C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_A" id="QUEUE_98_A" offset="0x2620" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_B" id="QUEUE_98_B" offset="0x2624" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_C" id="QUEUE_98_C" offset="0x2628" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_D" id="QUEUE_98_D" offset="0x262C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_A" id="QUEUE_99_A" offset="0x2630" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_B" id="QUEUE_99_B" offset="0x2634" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_C" id="QUEUE_99_C" offset="0x2638" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_D" id="QUEUE_99_D" offset="0x263C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_A" id="QUEUE_100_A" offset="0x2640" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_B" id="QUEUE_100_B" offset="0x2644" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_C" id="QUEUE_100_C" offset="0x2648" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_D" id="QUEUE_100_D" offset="0x264C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_A" id="QUEUE_101_A" offset="0x2650" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_B" id="QUEUE_101_B" offset="0x2654" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_C" id="QUEUE_101_C" offset="0x2658" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_D" id="QUEUE_101_D" offset="0x265C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_A" id="QUEUE_102_A" offset="0x2660" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_B" id="QUEUE_102_B" offset="0x2664" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_C" id="QUEUE_102_C" offset="0x2668" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_D" id="QUEUE_102_D" offset="0x266C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_A" id="QUEUE_103_A" offset="0x2670" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_B" id="QUEUE_103_B" offset="0x2674" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_C" id="QUEUE_103_C" offset="0x2678" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_D" id="QUEUE_103_D" offset="0x267C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_A" id="QUEUE_104_A" offset="0x2680" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_B" id="QUEUE_104_B" offset="0x2684" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_C" id="QUEUE_104_C" offset="0x2688" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_D" id="QUEUE_104_D" offset="0x268C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_A" id="QUEUE_105_A" offset="0x2690" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_B" id="QUEUE_105_B" offset="0x2694" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_C" id="QUEUE_105_C" offset="0x2698" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_D" id="QUEUE_105_D" offset="0x269C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_A" id="QUEUE_106_A" offset="0x26A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_B" id="QUEUE_106_B" offset="0x26A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_C" id="QUEUE_106_C" offset="0x26A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_D" id="QUEUE_106_D" offset="0x26AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_A" id="QUEUE_107_A" offset="0x26B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_B" id="QUEUE_107_B" offset="0x26B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_C" id="QUEUE_107_C" offset="0x26B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_D" id="QUEUE_107_D" offset="0x26BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_A" id="QUEUE_108_A" offset="0x26C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_B" id="QUEUE_108_B" offset="0x26C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_C" id="QUEUE_108_C" offset="0x26C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_D" id="QUEUE_108_D" offset="0x26CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_A" id="QUEUE_109_A" offset="0x26D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_B" id="QUEUE_109_B" offset="0x26D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_C" id="QUEUE_109_C" offset="0x26D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_D" id="QUEUE_109_D" offset="0x26DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_A" id="QUEUE_110_A" offset="0x26E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_B" id="QUEUE_110_B" offset="0x26E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_C" id="QUEUE_110_C" offset="0x26E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_D" id="QUEUE_110_D" offset="0x26EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_A" id="QUEUE_111_A" offset="0x26F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_B" id="QUEUE_111_B" offset="0x26F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_C" id="QUEUE_111_C" offset="0x26F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_D" id="QUEUE_111_D" offset="0x26FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_A" id="QUEUE_112_A" offset="0x2700" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_B" id="QUEUE_112_B" offset="0x2704" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_C" id="QUEUE_112_C" offset="0x2708" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_D" id="QUEUE_112_D" offset="0x270C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_A" id="QUEUE_113_A" offset="0x2710" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_B" id="QUEUE_113_B" offset="0x2714" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_C" id="QUEUE_113_C" offset="0x2718" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_D" id="QUEUE_113_D" offset="0x271C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_A" id="QUEUE_114_A" offset="0x2720" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_B" id="QUEUE_114_B" offset="0x2724" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_C" id="QUEUE_114_C" offset="0x2728" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_D" id="QUEUE_114_D" offset="0x272C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_A" id="QUEUE_115_A" offset="0x2730" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_B" id="QUEUE_115_B" offset="0x2734" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_C" id="QUEUE_115_C" offset="0x2738" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_D" id="QUEUE_115_D" offset="0x273C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_A" id="QUEUE_116_A" offset="0x2740" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_B" id="QUEUE_116_B" offset="0x2744" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_C" id="QUEUE_116_C" offset="0x2748" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_D" id="QUEUE_116_D" offset="0x274C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_A" id="QUEUE_117_A" offset="0x2750" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_B" id="QUEUE_117_B" offset="0x2754" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_C" id="QUEUE_117_C" offset="0x2758" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_D" id="QUEUE_117_D" offset="0x275C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_A" id="QUEUE_118_A" offset="0x2760" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_B" id="QUEUE_118_B" offset="0x2764" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_C" id="QUEUE_118_C" offset="0x2768" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_D" id="QUEUE_118_D" offset="0x276C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_A" id="QUEUE_119_A" offset="0x2770" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_B" id="QUEUE_119_B" offset="0x2774" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_C" id="QUEUE_119_C" offset="0x2778" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_D" id="QUEUE_119_D" offset="0x277C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_A" id="QUEUE_120_A" offset="0x2780" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_B" id="QUEUE_120_B" offset="0x2784" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_C" id="QUEUE_120_C" offset="0x2788" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_D" id="QUEUE_120_D" offset="0x278C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_A" id="QUEUE_121_A" offset="0x2790" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_B" id="QUEUE_121_B" offset="0x2794" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_C" id="QUEUE_121_C" offset="0x2798" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_D" id="QUEUE_121_D" offset="0x279C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_A" id="QUEUE_122_A" offset="0x27A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_B" id="QUEUE_122_B" offset="0x27A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_C" id="QUEUE_122_C" offset="0x27A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_D" id="QUEUE_122_D" offset="0x27AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_A" id="QUEUE_123_A" offset="0x27B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_B" id="QUEUE_123_B" offset="0x27B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_C" id="QUEUE_123_C" offset="0x27B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_D" id="QUEUE_123_D" offset="0x27BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_A" id="QUEUE_124_A" offset="0x27C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_B" id="QUEUE_124_B" offset="0x27C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_C" id="QUEUE_124_C" offset="0x27C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_D" id="QUEUE_124_D" offset="0x27CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_A" id="QUEUE_125_A" offset="0x27D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_B" id="QUEUE_125_B" offset="0x27D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_C" id="QUEUE_125_C" offset="0x27D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_D" id="QUEUE_125_D" offset="0x27DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_A" id="QUEUE_126_A" offset="0x27E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_B" id="QUEUE_126_B" offset="0x27E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_C" id="QUEUE_126_C" offset="0x27E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_D" id="QUEUE_126_D" offset="0x27EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_A" id="QUEUE_127_A" offset="0x27F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_B" id="QUEUE_127_B" offset="0x27F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_C" id="QUEUE_127_C" offset="0x27F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_D" id="QUEUE_127_D" offset="0x27FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_A" id="QUEUE_128_A" offset="0x2800" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_B" id="QUEUE_128_B" offset="0x2804" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_C" id="QUEUE_128_C" offset="0x2808" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_D" id="QUEUE_128_D" offset="0x280C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_A" id="QUEUE_129_A" offset="0x2810" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_B" id="QUEUE_129_B" offset="0x2814" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_C" id="QUEUE_129_C" offset="0x2818" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_D" id="QUEUE_129_D" offset="0x281C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_A" id="QUEUE_130_A" offset="0x2820" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_B" id="QUEUE_130_B" offset="0x2824" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_C" id="QUEUE_130_C" offset="0x2828" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_D" id="QUEUE_130_D" offset="0x282C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_A" id="QUEUE_131_A" offset="0x2830" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_B" id="QUEUE_131_B" offset="0x2834" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_C" id="QUEUE_131_C" offset="0x2838" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_D" id="QUEUE_131_D" offset="0x283C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_A" id="QUEUE_132_A" offset="0x2840" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_B" id="QUEUE_132_B" offset="0x2844" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_C" id="QUEUE_132_C" offset="0x2848" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_D" id="QUEUE_132_D" offset="0x284C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_A" id="QUEUE_133_A" offset="0x2850" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_B" id="QUEUE_133_B" offset="0x2854" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_C" id="QUEUE_133_C" offset="0x2858" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_D" id="QUEUE_133_D" offset="0x285C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_A" id="QUEUE_134_A" offset="0x2860" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_B" id="QUEUE_134_B" offset="0x2864" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_C" id="QUEUE_134_C" offset="0x2868" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_D" id="QUEUE_134_D" offset="0x286C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_A" id="QUEUE_135_A" offset="0x2870" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_B" id="QUEUE_135_B" offset="0x2874" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_C" id="QUEUE_135_C" offset="0x2878" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_D" id="QUEUE_135_D" offset="0x287C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_A" id="QUEUE_136_A" offset="0x2880" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_B" id="QUEUE_136_B" offset="0x2884" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_C" id="QUEUE_136_C" offset="0x2888" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_D" id="QUEUE_136_D" offset="0x288C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_A" id="QUEUE_137_A" offset="0x2890" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_B" id="QUEUE_137_B" offset="0x2894" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_C" id="QUEUE_137_C" offset="0x2898" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_D" id="QUEUE_137_D" offset="0x289C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_A" id="QUEUE_138_A" offset="0x28A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_B" id="QUEUE_138_B" offset="0x28A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_C" id="QUEUE_138_C" offset="0x28A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_D" id="QUEUE_138_D" offset="0x28AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_A" id="QUEUE_139_A" offset="0x28B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_B" id="QUEUE_139_B" offset="0x28B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_C" id="QUEUE_139_C" offset="0x28B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_D" id="QUEUE_139_D" offset="0x28BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_A" id="QUEUE_140_A" offset="0x28C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_B" id="QUEUE_140_B" offset="0x28C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_C" id="QUEUE_140_C" offset="0x28C8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_D" id="QUEUE_140_D" offset="0x28CC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_A" id="QUEUE_141_A" offset="0x28D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_B" id="QUEUE_141_B" offset="0x28D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_C" id="QUEUE_141_C" offset="0x28D8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_D" id="QUEUE_141_D" offset="0x28DC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_A" id="QUEUE_142_A" offset="0x28E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_B" id="QUEUE_142_B" offset="0x28E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_C" id="QUEUE_142_C" offset="0x28E8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_D" id="QUEUE_142_D" offset="0x28EC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_A" id="QUEUE_143_A" offset="0x28F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_B" id="QUEUE_143_B" offset="0x28F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_C" id="QUEUE_143_C" offset="0x28F8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_D" id="QUEUE_143_D" offset="0x28FC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_A" id="QUEUE_144_A" offset="0x2900" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_B" id="QUEUE_144_B" offset="0x2904" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_C" id="QUEUE_144_C" offset="0x2908" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_D" id="QUEUE_144_D" offset="0x290C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_A" id="QUEUE_145_A" offset="0x2910" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_B" id="QUEUE_145_B" offset="0x2914" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_C" id="QUEUE_145_C" offset="0x2918" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_D" id="QUEUE_145_D" offset="0x291C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_A" id="QUEUE_146_A" offset="0x2920" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_B" id="QUEUE_146_B" offset="0x2924" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_C" id="QUEUE_146_C" offset="0x2928" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_D" id="QUEUE_146_D" offset="0x292C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_A" id="QUEUE_147_A" offset="0x2930" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_B" id="QUEUE_147_B" offset="0x2934" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_C" id="QUEUE_147_C" offset="0x2938" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_D" id="QUEUE_147_D" offset="0x293C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_A" id="QUEUE_148_A" offset="0x2940" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_B" id="QUEUE_148_B" offset="0x2944" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_C" id="QUEUE_148_C" offset="0x2948" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_D" id="QUEUE_148_D" offset="0x294C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_A" id="QUEUE_149_A" offset="0x2950" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_B" id="QUEUE_149_B" offset="0x2954" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_C" id="QUEUE_149_C" offset="0x2958" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_D" id="QUEUE_149_D" offset="0x295C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_A" id="QUEUE_150_A" offset="0x2960" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_B" id="QUEUE_150_B" offset="0x2964" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_C" id="QUEUE_150_C" offset="0x2968" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_D" id="QUEUE_150_D" offset="0x296C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_A" id="QUEUE_151_A" offset="0x2970" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_B" id="QUEUE_151_B" offset="0x2974" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_C" id="QUEUE_151_C" offset="0x2978" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_D" id="QUEUE_151_D" offset="0x297C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_A" id="QUEUE_152_A" offset="0x2980" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_B" id="QUEUE_152_B" offset="0x2984" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_C" id="QUEUE_152_C" offset="0x2988" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_D" id="QUEUE_152_D" offset="0x298C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_A" id="QUEUE_153_A" offset="0x2990" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_B" id="QUEUE_153_B" offset="0x2994" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_C" id="QUEUE_153_C" offset="0x2998" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_D" id="QUEUE_153_D" offset="0x299C" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_A" id="QUEUE_154_A" offset="0x29A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_B" id="QUEUE_154_B" offset="0x29A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_C" id="QUEUE_154_C" offset="0x29A8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_D" id="QUEUE_154_D" offset="0x29AC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_A" id="QUEUE_155_A" offset="0x29B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. This count is incremented by 1  whenever a packet is added to the queue. This count is  decremented by 1 whenever a packet is popped from  the queue. " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_B" id="QUEUE_155_B" offset="0x29B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_C" id="QUEUE_155_C" offset="0x29B8" width="32">
    
  <bitfield begin="31" description="Head/Tail Push Control. Set to zero in order to push  packet onto tail of queue and set to one in order to  push packet onto head of queue. " end="31" id="HEAD_TAIL" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="13" description="packet_size This field indicates packet size and is assumed to be  zero on each packet add unless the value is explicitly  overwritten. This field indicates packet size for packet  pop operation. " end="0" id="PACKET_SIZE" rwaccess="RW" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_D" id="QUEUE_155_D" offset="0x29BC" width="32">
    
  <bitfield begin="31" description="Descriptor pointer. It will be read as zero if the queue is  empty. It will indicate a 32-bit aligned address that  points to a descriptor when the queue is not empty. " end="5" id="DESC_PTR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="Descriptor Size. It is encoded in 4-byte increments with  values 0 to 31 representing 24 and so on to 148 bytes.  This field will return a 0x0 when an empty queue is read. Queue Manager Queue N Registers D To save hardware resources, the queue manager internally stores descriptor size (desc_size)  information in four bits. However, register D has five LSBs that specify descriptor size. As a  consequence, the value of desc_size that is pushed may not be same as that is read during a  pop. The value that is read back is equal to always rounded to an odd number. So, for even  values, the value read back is one more than what was written. For odd values, the value read  back is same as the value that was written. Note that this 5-bit field (desc_size) is unrelated to the  code for size of descriptors in a descriptor region. It is just a place holder for a 5-bit value that is  maintained across the push and pop operations for every descriptor managed by the queue  manager. " end="0" id="DESC_SIZE" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_STATUS_A" id="QUEUE_0_STATUS_A" offset="0x3000" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_STATUS_B" id="QUEUE_0_STATUS_B" offset="0x3004" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_0_STATUS_C" id="QUEUE_0_STATUS_C" offset="0x3008" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_STATUS_A" id="QUEUE_1_STATUS_A" offset="0x3010" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_STATUS_B" id="QUEUE_1_STATUS_B" offset="0x3014" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_1_STATUS_C" id="QUEUE_1_STATUS_C" offset="0x3018" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_STATUS_A" id="QUEUE_2_STATUS_A" offset="0x3020" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_STATUS_B" id="QUEUE_2_STATUS_B" offset="0x3024" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_2_STATUS_C" id="QUEUE_2_STATUS_C" offset="0x3028" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_STATUS_A" id="QUEUE_3_STATUS_A" offset="0x3030" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_STATUS_B" id="QUEUE_3_STATUS_B" offset="0x3034" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_3_STATUS_C" id="QUEUE_3_STATUS_C" offset="0x3038" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_STATUS_A" id="QUEUE_4_STATUS_A" offset="0x3040" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_STATUS_B" id="QUEUE_4_STATUS_B" offset="0x3044" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_4_STATUS_C" id="QUEUE_4_STATUS_C" offset="0x3048" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_STATUS_A" id="QUEUE_5_STATUS_A" offset="0x3050" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_STATUS_B" id="QUEUE_5_STATUS_B" offset="0x3054" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_5_STATUS_C" id="QUEUE_5_STATUS_C" offset="0x3058" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_STATUS_A" id="QUEUE_6_STATUS_A" offset="0x3060" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_STATUS_B" id="QUEUE_6_STATUS_B" offset="0x3064" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_6_STATUS_C" id="QUEUE_6_STATUS_C" offset="0x3068" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_STATUS_A" id="QUEUE_7_STATUS_A" offset="0x3070" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_STATUS_B" id="QUEUE_7_STATUS_B" offset="0x3074" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_7_STATUS_C" id="QUEUE_7_STATUS_C" offset="0x3078" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_STATUS_A" id="QUEUE_8_STATUS_A" offset="0x3080" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_STATUS_B" id="QUEUE_8_STATUS_B" offset="0x3084" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_8_STATUS_C" id="QUEUE_8_STATUS_C" offset="0x3088" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_STATUS_A" id="QUEUE_9_STATUS_A" offset="0x3090" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_STATUS_B" id="QUEUE_9_STATUS_B" offset="0x3094" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_9_STATUS_C" id="QUEUE_9_STATUS_C" offset="0x3098" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_STATUS_A" id="QUEUE_10_STATUS_A" offset="0x30A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_STATUS_B" id="QUEUE_10_STATUS_B" offset="0x30A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_10_STATUS_C" id="QUEUE_10_STATUS_C" offset="0x30A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_STATUS_A" id="QUEUE_11_STATUS_A" offset="0x30B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_STATUS_B" id="QUEUE_11_STATUS_B" offset="0x30B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_11_STATUS_C" id="QUEUE_11_STATUS_C" offset="0x30B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_STATUS_A" id="QUEUE_12_STATUS_A" offset="0x30C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_STATUS_B" id="QUEUE_12_STATUS_B" offset="0x30C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_12_STATUS_C" id="QUEUE_12_STATUS_C" offset="0x30C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_STATUS_A" id="QUEUE_13_STATUS_A" offset="0x30D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_STATUS_B" id="QUEUE_13_STATUS_B" offset="0x30D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_13_STATUS_C" id="QUEUE_13_STATUS_C" offset="0x30D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_STATUS_A" id="QUEUE_14_STATUS_A" offset="0x30E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_STATUS_B" id="QUEUE_14_STATUS_B" offset="0x30E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_14_STATUS_C" id="QUEUE_14_STATUS_C" offset="0x30E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_STATUS_A" id="QUEUE_15_STATUS_A" offset="0x30F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_STATUS_B" id="QUEUE_15_STATUS_B" offset="0x30F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_15_STATUS_C" id="QUEUE_15_STATUS_C" offset="0x30F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_STATUS_A" id="QUEUE_16_STATUS_A" offset="0x3100" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_STATUS_B" id="QUEUE_16_STATUS_B" offset="0x3104" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_16_STATUS_C" id="QUEUE_16_STATUS_C" offset="0x3108" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_STATUS_A" id="QUEUE_17_STATUS_A" offset="0x3110" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_STATUS_B" id="QUEUE_17_STATUS_B" offset="0x3114" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_17_STATUS_C" id="QUEUE_17_STATUS_C" offset="0x3118" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_STATUS_A" id="QUEUE_18_STATUS_A" offset="0x3120" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_STATUS_B" id="QUEUE_18_STATUS_B" offset="0x3124" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_18_STATUS_C" id="QUEUE_18_STATUS_C" offset="0x3128" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_STATUS_A" id="QUEUE_19_STATUS_A" offset="0x3130" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_STATUS_B" id="QUEUE_19_STATUS_B" offset="0x3134" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_19_STATUS_C" id="QUEUE_19_STATUS_C" offset="0x3138" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_STATUS_A" id="QUEUE_20_STATUS_A" offset="0x3140" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_STATUS_B" id="QUEUE_20_STATUS_B" offset="0x3144" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_20_STATUS_C" id="QUEUE_20_STATUS_C" offset="0x3148" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_STATUS_A" id="QUEUE_21_STATUS_A" offset="0x3150" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_STATUS_B" id="QUEUE_21_STATUS_B" offset="0x3154" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_21_STATUS_C" id="QUEUE_21_STATUS_C" offset="0x3158" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_STATUS_A" id="QUEUE_22_STATUS_A" offset="0x3160" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_STATUS_B" id="QUEUE_22_STATUS_B" offset="0x3164" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_22_STATUS_C" id="QUEUE_22_STATUS_C" offset="0x3168" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_STATUS_A" id="QUEUE_23_STATUS_A" offset="0x3170" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_STATUS_B" id="QUEUE_23_STATUS_B" offset="0x3174" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_23_STATUS_C" id="QUEUE_23_STATUS_C" offset="0x3178" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_STATUS_A" id="QUEUE_24_STATUS_A" offset="0x3180" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_STATUS_B" id="QUEUE_24_STATUS_B" offset="0x3184" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_24_STATUS_C" id="QUEUE_24_STATUS_C" offset="0x3188" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_STATUS_A" id="QUEUE_25_STATUS_A" offset="0x3190" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_STATUS_B" id="QUEUE_25_STATUS_B" offset="0x3194" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_25_STATUS_C" id="QUEUE_25_STATUS_C" offset="0x3198" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_STATUS_A" id="QUEUE_26_STATUS_A" offset="0x31A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_STATUS_B" id="QUEUE_26_STATUS_B" offset="0x31A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_26_STATUS_C" id="QUEUE_26_STATUS_C" offset="0x31A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_STATUS_A" id="QUEUE_27_STATUS_A" offset="0x31B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_STATUS_B" id="QUEUE_27_STATUS_B" offset="0x31B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_27_STATUS_C" id="QUEUE_27_STATUS_C" offset="0x31B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_STATUS_A" id="QUEUE_28_STATUS_A" offset="0x31C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_STATUS_B" id="QUEUE_28_STATUS_B" offset="0x31C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_28_STATUS_C" id="QUEUE_28_STATUS_C" offset="0x31C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_STATUS_A" id="QUEUE_29_STATUS_A" offset="0x31D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_STATUS_B" id="QUEUE_29_STATUS_B" offset="0x31D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_29_STATUS_C" id="QUEUE_29_STATUS_C" offset="0x31D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_STATUS_A" id="QUEUE_30_STATUS_A" offset="0x31E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_STATUS_B" id="QUEUE_30_STATUS_B" offset="0x31E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_30_STATUS_C" id="QUEUE_30_STATUS_C" offset="0x31E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_STATUS_A" id="QUEUE_31_STATUS_A" offset="0x31F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_STATUS_B" id="QUEUE_31_STATUS_B" offset="0x31F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_31_STATUS_C" id="QUEUE_31_STATUS_C" offset="0x31F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_STATUS_A" id="QUEUE_32_STATUS_A" offset="0x3200" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_STATUS_B" id="QUEUE_32_STATUS_B" offset="0x3204" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_32_STATUS_C" id="QUEUE_32_STATUS_C" offset="0x3208" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_STATUS_A" id="QUEUE_33_STATUS_A" offset="0x3210" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_STATUS_B" id="QUEUE_33_STATUS_B" offset="0x3214" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_33_STATUS_C" id="QUEUE_33_STATUS_C" offset="0x3218" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_STATUS_A" id="QUEUE_34_STATUS_A" offset="0x3220" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_STATUS_B" id="QUEUE_34_STATUS_B" offset="0x3224" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_34_STATUS_C" id="QUEUE_34_STATUS_C" offset="0x3228" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_STATUS_A" id="QUEUE_35_STATUS_A" offset="0x3230" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_STATUS_B" id="QUEUE_35_STATUS_B" offset="0x3234" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_35_STATUS_C" id="QUEUE_35_STATUS_C" offset="0x3238" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_STATUS_A" id="QUEUE_36_STATUS_A" offset="0x3240" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_STATUS_B" id="QUEUE_36_STATUS_B" offset="0x3244" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_36_STATUS_C" id="QUEUE_36_STATUS_C" offset="0x3248" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_STATUS_A" id="QUEUE_37_STATUS_A" offset="0x3250" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_STATUS_B" id="QUEUE_37_STATUS_B" offset="0x3254" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_37_STATUS_C" id="QUEUE_37_STATUS_C" offset="0x3258" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_STATUS_A" id="QUEUE_38_STATUS_A" offset="0x3260" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_STATUS_B" id="QUEUE_38_STATUS_B" offset="0x3264" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_38_STATUS_C" id="QUEUE_38_STATUS_C" offset="0x3268" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_STATUS_A" id="QUEUE_39_STATUS_A" offset="0x3270" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_STATUS_B" id="QUEUE_39_STATUS_B" offset="0x3274" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_39_STATUS_C" id="QUEUE_39_STATUS_C" offset="0x3278" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_STATUS_A" id="QUEUE_40_STATUS_A" offset="0x3280" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_STATUS_B" id="QUEUE_40_STATUS_B" offset="0x3284" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_40_STATUS_C" id="QUEUE_40_STATUS_C" offset="0x3288" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_STATUS_A" id="QUEUE_41_STATUS_A" offset="0x3290" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_STATUS_B" id="QUEUE_41_STATUS_B" offset="0x3294" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_41_STATUS_C" id="QUEUE_41_STATUS_C" offset="0x3298" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_STATUS_A" id="QUEUE_42_STATUS_A" offset="0x32A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_STATUS_B" id="QUEUE_42_STATUS_B" offset="0x32A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_42_STATUS_C" id="QUEUE_42_STATUS_C" offset="0x32A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_STATUS_A" id="QUEUE_43_STATUS_A" offset="0x32B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_STATUS_B" id="QUEUE_43_STATUS_B" offset="0x32B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_43_STATUS_C" id="QUEUE_43_STATUS_C" offset="0x32B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_STATUS_A" id="QUEUE_44_STATUS_A" offset="0x32C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_STATUS_B" id="QUEUE_44_STATUS_B" offset="0x32C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_44_STATUS_C" id="QUEUE_44_STATUS_C" offset="0x32C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_STATUS_A" id="QUEUE_45_STATUS_A" offset="0x32D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_STATUS_B" id="QUEUE_45_STATUS_B" offset="0x32D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_45_STATUS_C" id="QUEUE_45_STATUS_C" offset="0x32D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_STATUS_A" id="QUEUE_46_STATUS_A" offset="0x32E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_STATUS_B" id="QUEUE_46_STATUS_B" offset="0x32E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_46_STATUS_C" id="QUEUE_46_STATUS_C" offset="0x32E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_STATUS_A" id="QUEUE_47_STATUS_A" offset="0x32F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_STATUS_B" id="QUEUE_47_STATUS_B" offset="0x32F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_47_STATUS_C" id="QUEUE_47_STATUS_C" offset="0x32F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_STATUS_A" id="QUEUE_48_STATUS_A" offset="0x3300" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_STATUS_B" id="QUEUE_48_STATUS_B" offset="0x3304" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_48_STATUS_C" id="QUEUE_48_STATUS_C" offset="0x3308" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_STATUS_A" id="QUEUE_49_STATUS_A" offset="0x3310" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_STATUS_B" id="QUEUE_49_STATUS_B" offset="0x3314" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_49_STATUS_C" id="QUEUE_49_STATUS_C" offset="0x3318" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_STATUS_A" id="QUEUE_50_STATUS_A" offset="0x3320" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_STATUS_B" id="QUEUE_50_STATUS_B" offset="0x3324" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_50_STATUS_C" id="QUEUE_50_STATUS_C" offset="0x3328" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_STATUS_A" id="QUEUE_51_STATUS_A" offset="0x3330" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_STATUS_B" id="QUEUE_51_STATUS_B" offset="0x3334" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_51_STATUS_C" id="QUEUE_51_STATUS_C" offset="0x3338" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_STATUS_A" id="QUEUE_52_STATUS_A" offset="0x3340" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_STATUS_B" id="QUEUE_52_STATUS_B" offset="0x3344" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_52_STATUS_C" id="QUEUE_52_STATUS_C" offset="0x3348" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_STATUS_A" id="QUEUE_53_STATUS_A" offset="0x3350" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_STATUS_B" id="QUEUE_53_STATUS_B" offset="0x3354" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_53_STATUS_C" id="QUEUE_53_STATUS_C" offset="0x3358" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_STATUS_A" id="QUEUE_54_STATUS_A" offset="0x3360" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_STATUS_B" id="QUEUE_54_STATUS_B" offset="0x3364" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_54_STATUS_C" id="QUEUE_54_STATUS_C" offset="0x3368" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_STATUS_A" id="QUEUE_55_STATUS_A" offset="0x3370" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_STATUS_B" id="QUEUE_55_STATUS_B" offset="0x3374" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_55_STATUS_C" id="QUEUE_55_STATUS_C" offset="0x3378" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_STATUS_A" id="QUEUE_56_STATUS_A" offset="0x3380" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_STATUS_B" id="QUEUE_56_STATUS_B" offset="0x3384" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_56_STATUS_C" id="QUEUE_56_STATUS_C" offset="0x3388" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_STATUS_A" id="QUEUE_57_STATUS_A" offset="0x3390" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_STATUS_B" id="QUEUE_57_STATUS_B" offset="0x3394" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_57_STATUS_C" id="QUEUE_57_STATUS_C" offset="0x3398" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_STATUS_A" id="QUEUE_58_STATUS_A" offset="0x33A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_STATUS_B" id="QUEUE_58_STATUS_B" offset="0x33A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_58_STATUS_C" id="QUEUE_58_STATUS_C" offset="0x33A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_STATUS_A" id="QUEUE_59_STATUS_A" offset="0x33B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_STATUS_B" id="QUEUE_59_STATUS_B" offset="0x33B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_59_STATUS_C" id="QUEUE_59_STATUS_C" offset="0x33B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_STATUS_A" id="QUEUE_60_STATUS_A" offset="0x33C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_STATUS_B" id="QUEUE_60_STATUS_B" offset="0x33C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_60_STATUS_C" id="QUEUE_60_STATUS_C" offset="0x33C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_STATUS_A" id="QUEUE_61_STATUS_A" offset="0x33D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_STATUS_B" id="QUEUE_61_STATUS_B" offset="0x33D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_61_STATUS_C" id="QUEUE_61_STATUS_C" offset="0x33D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_STATUS_A" id="QUEUE_62_STATUS_A" offset="0x33E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_STATUS_B" id="QUEUE_62_STATUS_B" offset="0x33E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_62_STATUS_C" id="QUEUE_62_STATUS_C" offset="0x33E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_STATUS_A" id="QUEUE_63_STATUS_A" offset="0x33F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_STATUS_B" id="QUEUE_63_STATUS_B" offset="0x33F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_63_STATUS_C" id="QUEUE_63_STATUS_C" offset="0x33F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_STATUS_A" id="QUEUE_64_STATUS_A" offset="0x3400" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_STATUS_B" id="QUEUE_64_STATUS_B" offset="0x3404" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_64_STATUS_C" id="QUEUE_64_STATUS_C" offset="0x3408" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_STATUS_A" id="QUEUE_65_STATUS_A" offset="0x3410" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_STATUS_B" id="QUEUE_65_STATUS_B" offset="0x3414" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_65_STATUS_C" id="QUEUE_65_STATUS_C" offset="0x3418" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_STATUS_A" id="QUEUE_66_STATUS_A" offset="0x3420" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_STATUS_B" id="QUEUE_66_STATUS_B" offset="0x3424" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_66_STATUS_C" id="QUEUE_66_STATUS_C" offset="0x3428" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_STATUS_A" id="QUEUE_67_STATUS_A" offset="0x3430" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_STATUS_B" id="QUEUE_67_STATUS_B" offset="0x3434" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_67_STATUS_C" id="QUEUE_67_STATUS_C" offset="0x3438" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_STATUS_A" id="QUEUE_68_STATUS_A" offset="0x3440" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_STATUS_B" id="QUEUE_68_STATUS_B" offset="0x3444" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_68_STATUS_C" id="QUEUE_68_STATUS_C" offset="0x3448" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_STATUS_A" id="QUEUE_69_STATUS_A" offset="0x3450" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_STATUS_B" id="QUEUE_69_STATUS_B" offset="0x3454" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_69_STATUS_C" id="QUEUE_69_STATUS_C" offset="0x3458" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_STATUS_A" id="QUEUE_70_STATUS_A" offset="0x3460" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_STATUS_B" id="QUEUE_70_STATUS_B" offset="0x3464" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_70_STATUS_C" id="QUEUE_70_STATUS_C" offset="0x3468" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_STATUS_A" id="QUEUE_71_STATUS_A" offset="0x3470" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_STATUS_B" id="QUEUE_71_STATUS_B" offset="0x3474" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_71_STATUS_C" id="QUEUE_71_STATUS_C" offset="0x3478" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_STATUS_A" id="QUEUE_72_STATUS_A" offset="0x3480" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_STATUS_B" id="QUEUE_72_STATUS_B" offset="0x3484" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_72_STATUS_C" id="QUEUE_72_STATUS_C" offset="0x3488" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_STATUS_A" id="QUEUE_73_STATUS_A" offset="0x3490" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_STATUS_B" id="QUEUE_73_STATUS_B" offset="0x3494" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_73_STATUS_C" id="QUEUE_73_STATUS_C" offset="0x3498" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_STATUS_A" id="QUEUE_74_STATUS_A" offset="0x34A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_STATUS_B" id="QUEUE_74_STATUS_B" offset="0x34A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_74_STATUS_C" id="QUEUE_74_STATUS_C" offset="0x34A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_STATUS_A" id="QUEUE_75_STATUS_A" offset="0x34B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_STATUS_B" id="QUEUE_75_STATUS_B" offset="0x34B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_75_STATUS_C" id="QUEUE_75_STATUS_C" offset="0x34B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_STATUS_A" id="QUEUE_76_STATUS_A" offset="0x34C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_STATUS_B" id="QUEUE_76_STATUS_B" offset="0x34C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_76_STATUS_C" id="QUEUE_76_STATUS_C" offset="0x34C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_STATUS_A" id="QUEUE_77_STATUS_A" offset="0x34D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_STATUS_B" id="QUEUE_77_STATUS_B" offset="0x34D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_77_STATUS_C" id="QUEUE_77_STATUS_C" offset="0x34D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_STATUS_A" id="QUEUE_78_STATUS_A" offset="0x34E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_STATUS_B" id="QUEUE_78_STATUS_B" offset="0x34E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_78_STATUS_C" id="QUEUE_78_STATUS_C" offset="0x34E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_STATUS_A" id="QUEUE_79_STATUS_A" offset="0x34F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_STATUS_B" id="QUEUE_79_STATUS_B" offset="0x34F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_79_STATUS_C" id="QUEUE_79_STATUS_C" offset="0x34F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_STATUS_A" id="QUEUE_80_STATUS_A" offset="0x3500" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_STATUS_B" id="QUEUE_80_STATUS_B" offset="0x3504" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_80_STATUS_C" id="QUEUE_80_STATUS_C" offset="0x3508" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_STATUS_A" id="QUEUE_81_STATUS_A" offset="0x3510" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_STATUS_B" id="QUEUE_81_STATUS_B" offset="0x3514" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_81_STATUS_C" id="QUEUE_81_STATUS_C" offset="0x3518" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_STATUS_A" id="QUEUE_82_STATUS_A" offset="0x3520" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_STATUS_B" id="QUEUE_82_STATUS_B" offset="0x3524" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_82_STATUS_C" id="QUEUE_82_STATUS_C" offset="0x3528" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_STATUS_A" id="QUEUE_83_STATUS_A" offset="0x3530" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_STATUS_B" id="QUEUE_83_STATUS_B" offset="0x3534" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_83_STATUS_C" id="QUEUE_83_STATUS_C" offset="0x3538" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_STATUS_A" id="QUEUE_84_STATUS_A" offset="0x3540" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_STATUS_B" id="QUEUE_84_STATUS_B" offset="0x3544" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_84_STATUS_C" id="QUEUE_84_STATUS_C" offset="0x3548" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_STATUS_A" id="QUEUE_85_STATUS_A" offset="0x3550" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_STATUS_B" id="QUEUE_85_STATUS_B" offset="0x3554" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_85_STATUS_C" id="QUEUE_85_STATUS_C" offset="0x3558" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_STATUS_A" id="QUEUE_86_STATUS_A" offset="0x3560" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_STATUS_B" id="QUEUE_86_STATUS_B" offset="0x3564" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_86_STATUS_C" id="QUEUE_86_STATUS_C" offset="0x3568" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_STATUS_A" id="QUEUE_87_STATUS_A" offset="0x3570" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_STATUS_B" id="QUEUE_87_STATUS_B" offset="0x3574" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_87_STATUS_C" id="QUEUE_87_STATUS_C" offset="0x3578" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_STATUS_A" id="QUEUE_88_STATUS_A" offset="0x3580" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_STATUS_B" id="QUEUE_88_STATUS_B" offset="0x3584" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_88_STATUS_C" id="QUEUE_88_STATUS_C" offset="0x3588" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_STATUS_A" id="QUEUE_89_STATUS_A" offset="0x3590" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_STATUS_B" id="QUEUE_89_STATUS_B" offset="0x3594" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_89_STATUS_C" id="QUEUE_89_STATUS_C" offset="0x3598" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_STATUS_A" id="QUEUE_90_STATUS_A" offset="0x35A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_STATUS_B" id="QUEUE_90_STATUS_B" offset="0x35A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_90_STATUS_C" id="QUEUE_90_STATUS_C" offset="0x35A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_STATUS_A" id="QUEUE_91_STATUS_A" offset="0x35B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_STATUS_B" id="QUEUE_91_STATUS_B" offset="0x35B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_91_STATUS_C" id="QUEUE_91_STATUS_C" offset="0x35B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_STATUS_A" id="QUEUE_92_STATUS_A" offset="0x35C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_STATUS_B" id="QUEUE_92_STATUS_B" offset="0x35C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_92_STATUS_C" id="QUEUE_92_STATUS_C" offset="0x35C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_STATUS_A" id="QUEUE_93_STATUS_A" offset="0x35D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_STATUS_B" id="QUEUE_93_STATUS_B" offset="0x35D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_93_STATUS_C" id="QUEUE_93_STATUS_C" offset="0x35D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_STATUS_A" id="QUEUE_94_STATUS_A" offset="0x35E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_STATUS_B" id="QUEUE_94_STATUS_B" offset="0x35E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_94_STATUS_C" id="QUEUE_94_STATUS_C" offset="0x35E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_STATUS_A" id="QUEUE_95_STATUS_A" offset="0x35F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_STATUS_B" id="QUEUE_95_STATUS_B" offset="0x35F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_95_STATUS_C" id="QUEUE_95_STATUS_C" offset="0x35F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_STATUS_A" id="QUEUE_96_STATUS_A" offset="0x3600" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_STATUS_B" id="QUEUE_96_STATUS_B" offset="0x3604" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_96_STATUS_C" id="QUEUE_96_STATUS_C" offset="0x3608" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_STATUS_A" id="QUEUE_97_STATUS_A" offset="0x3610" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_STATUS_B" id="QUEUE_97_STATUS_B" offset="0x3614" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_97_STATUS_C" id="QUEUE_97_STATUS_C" offset="0x3618" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_STATUS_A" id="QUEUE_98_STATUS_A" offset="0x3620" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_STATUS_B" id="QUEUE_98_STATUS_B" offset="0x3624" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_98_STATUS_C" id="QUEUE_98_STATUS_C" offset="0x3628" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_STATUS_A" id="QUEUE_99_STATUS_A" offset="0x3630" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_STATUS_B" id="QUEUE_99_STATUS_B" offset="0x3634" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_99_STATUS_C" id="QUEUE_99_STATUS_C" offset="0x3638" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_STATUS_A" id="QUEUE_100_STATUS_A" offset="0x3640" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_STATUS_B" id="QUEUE_100_STATUS_B" offset="0x3644" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_100_STATUS_C" id="QUEUE_100_STATUS_C" offset="0x3648" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_STATUS_A" id="QUEUE_101_STATUS_A" offset="0x3650" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_STATUS_B" id="QUEUE_101_STATUS_B" offset="0x3654" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_101_STATUS_C" id="QUEUE_101_STATUS_C" offset="0x3658" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_STATUS_A" id="QUEUE_102_STATUS_A" offset="0x3660" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_STATUS_B" id="QUEUE_102_STATUS_B" offset="0x3664" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_102_STATUS_C" id="QUEUE_102_STATUS_C" offset="0x3668" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_STATUS_A" id="QUEUE_103_STATUS_A" offset="0x3670" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_STATUS_B" id="QUEUE_103_STATUS_B" offset="0x3674" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_103_STATUS_C" id="QUEUE_103_STATUS_C" offset="0x3678" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_STATUS_A" id="QUEUE_104_STATUS_A" offset="0x3680" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_STATUS_B" id="QUEUE_104_STATUS_B" offset="0x3684" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_104_STATUS_C" id="QUEUE_104_STATUS_C" offset="0x3688" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_STATUS_A" id="QUEUE_105_STATUS_A" offset="0x3690" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_STATUS_B" id="QUEUE_105_STATUS_B" offset="0x3694" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_105_STATUS_C" id="QUEUE_105_STATUS_C" offset="0x3698" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_STATUS_A" id="QUEUE_106_STATUS_A" offset="0x36A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_STATUS_B" id="QUEUE_106_STATUS_B" offset="0x36A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_106_STATUS_C" id="QUEUE_106_STATUS_C" offset="0x36A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_STATUS_A" id="QUEUE_107_STATUS_A" offset="0x36B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_STATUS_B" id="QUEUE_107_STATUS_B" offset="0x36B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_107_STATUS_C" id="QUEUE_107_STATUS_C" offset="0x36B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_STATUS_A" id="QUEUE_108_STATUS_A" offset="0x36C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_STATUS_B" id="QUEUE_108_STATUS_B" offset="0x36C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_108_STATUS_C" id="QUEUE_108_STATUS_C" offset="0x36C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_STATUS_A" id="QUEUE_109_STATUS_A" offset="0x36D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_STATUS_B" id="QUEUE_109_STATUS_B" offset="0x36D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_109_STATUS_C" id="QUEUE_109_STATUS_C" offset="0x36D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_STATUS_A" id="QUEUE_110_STATUS_A" offset="0x36E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_STATUS_B" id="QUEUE_110_STATUS_B" offset="0x36E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_110_STATUS_C" id="QUEUE_110_STATUS_C" offset="0x36E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_STATUS_A" id="QUEUE_111_STATUS_A" offset="0x36F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_STATUS_B" id="QUEUE_111_STATUS_B" offset="0x36F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_111_STATUS_C" id="QUEUE_111_STATUS_C" offset="0x36F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_STATUS_A" id="QUEUE_112_STATUS_A" offset="0x3700" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_STATUS_B" id="QUEUE_112_STATUS_B" offset="0x3704" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_112_STATUS_C" id="QUEUE_112_STATUS_C" offset="0x3708" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_STATUS_A" id="QUEUE_113_STATUS_A" offset="0x3710" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_STATUS_B" id="QUEUE_113_STATUS_B" offset="0x3714" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_113_STATUS_C" id="QUEUE_113_STATUS_C" offset="0x3718" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_STATUS_A" id="QUEUE_114_STATUS_A" offset="0x3720" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_STATUS_B" id="QUEUE_114_STATUS_B" offset="0x3724" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_114_STATUS_C" id="QUEUE_114_STATUS_C" offset="0x3728" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_STATUS_A" id="QUEUE_115_STATUS_A" offset="0x3730" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_STATUS_B" id="QUEUE_115_STATUS_B" offset="0x3734" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_115_STATUS_C" id="QUEUE_115_STATUS_C" offset="0x3738" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_STATUS_A" id="QUEUE_116_STATUS_A" offset="0x3740" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_STATUS_B" id="QUEUE_116_STATUS_B" offset="0x3744" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_116_STATUS_C" id="QUEUE_116_STATUS_C" offset="0x3748" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_STATUS_A" id="QUEUE_117_STATUS_A" offset="0x3750" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_STATUS_B" id="QUEUE_117_STATUS_B" offset="0x3754" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_117_STATUS_C" id="QUEUE_117_STATUS_C" offset="0x3758" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_STATUS_A" id="QUEUE_118_STATUS_A" offset="0x3760" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_STATUS_B" id="QUEUE_118_STATUS_B" offset="0x3764" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_118_STATUS_C" id="QUEUE_118_STATUS_C" offset="0x3768" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_STATUS_A" id="QUEUE_119_STATUS_A" offset="0x3770" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_STATUS_B" id="QUEUE_119_STATUS_B" offset="0x3774" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_119_STATUS_C" id="QUEUE_119_STATUS_C" offset="0x3778" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_STATUS_A" id="QUEUE_120_STATUS_A" offset="0x3780" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_STATUS_B" id="QUEUE_120_STATUS_B" offset="0x3784" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_120_STATUS_C" id="QUEUE_120_STATUS_C" offset="0x3788" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_STATUS_A" id="QUEUE_121_STATUS_A" offset="0x3790" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_STATUS_B" id="QUEUE_121_STATUS_B" offset="0x3794" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_121_STATUS_C" id="QUEUE_121_STATUS_C" offset="0x3798" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_STATUS_A" id="QUEUE_122_STATUS_A" offset="0x37A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_STATUS_B" id="QUEUE_122_STATUS_B" offset="0x37A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_122_STATUS_C" id="QUEUE_122_STATUS_C" offset="0x37A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_STATUS_A" id="QUEUE_123_STATUS_A" offset="0x37B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_STATUS_B" id="QUEUE_123_STATUS_B" offset="0x37B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_123_STATUS_C" id="QUEUE_123_STATUS_C" offset="0x37B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_STATUS_A" id="QUEUE_124_STATUS_A" offset="0x37C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_STATUS_B" id="QUEUE_124_STATUS_B" offset="0x37C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_124_STATUS_C" id="QUEUE_124_STATUS_C" offset="0x37C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_STATUS_A" id="QUEUE_125_STATUS_A" offset="0x37D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_STATUS_B" id="QUEUE_125_STATUS_B" offset="0x37D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_125_STATUS_C" id="QUEUE_125_STATUS_C" offset="0x37D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_STATUS_A" id="QUEUE_126_STATUS_A" offset="0x37E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_STATUS_B" id="QUEUE_126_STATUS_B" offset="0x37E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_126_STATUS_C" id="QUEUE_126_STATUS_C" offset="0x37E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_STATUS_A" id="QUEUE_127_STATUS_A" offset="0x37F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_STATUS_B" id="QUEUE_127_STATUS_B" offset="0x37F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_127_STATUS_C" id="QUEUE_127_STATUS_C" offset="0x37F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_STATUS_A" id="QUEUE_128_STATUS_A" offset="0x3800" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_STATUS_B" id="QUEUE_128_STATUS_B" offset="0x3804" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_128_STATUS_C" id="QUEUE_128_STATUS_C" offset="0x3808" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_STATUS_A" id="QUEUE_129_STATUS_A" offset="0x3810" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_STATUS_B" id="QUEUE_129_STATUS_B" offset="0x3814" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_129_STATUS_C" id="QUEUE_129_STATUS_C" offset="0x3818" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_STATUS_A" id="QUEUE_130_STATUS_A" offset="0x3820" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_STATUS_B" id="QUEUE_130_STATUS_B" offset="0x3824" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_130_STATUS_C" id="QUEUE_130_STATUS_C" offset="0x3828" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_STATUS_A" id="QUEUE_131_STATUS_A" offset="0x3830" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_STATUS_B" id="QUEUE_131_STATUS_B" offset="0x3834" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_131_STATUS_C" id="QUEUE_131_STATUS_C" offset="0x3838" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_STATUS_A" id="QUEUE_132_STATUS_A" offset="0x3840" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_STATUS_B" id="QUEUE_132_STATUS_B" offset="0x3844" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_132_STATUS_C" id="QUEUE_132_STATUS_C" offset="0x3848" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_STATUS_A" id="QUEUE_133_STATUS_A" offset="0x3850" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_STATUS_B" id="QUEUE_133_STATUS_B" offset="0x3854" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_133_STATUS_C" id="QUEUE_133_STATUS_C" offset="0x3858" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_STATUS_A" id="QUEUE_134_STATUS_A" offset="0x3860" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_STATUS_B" id="QUEUE_134_STATUS_B" offset="0x3864" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_134_STATUS_C" id="QUEUE_134_STATUS_C" offset="0x3868" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_STATUS_A" id="QUEUE_135_STATUS_A" offset="0x3870" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_STATUS_B" id="QUEUE_135_STATUS_B" offset="0x3874" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_135_STATUS_C" id="QUEUE_135_STATUS_C" offset="0x3878" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_STATUS_A" id="QUEUE_136_STATUS_A" offset="0x3880" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_STATUS_B" id="QUEUE_136_STATUS_B" offset="0x3884" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_136_STATUS_C" id="QUEUE_136_STATUS_C" offset="0x3888" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_STATUS_A" id="QUEUE_137_STATUS_A" offset="0x3890" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_STATUS_B" id="QUEUE_137_STATUS_B" offset="0x3894" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_137_STATUS_C" id="QUEUE_137_STATUS_C" offset="0x3898" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_STATUS_A" id="QUEUE_138_STATUS_A" offset="0x38A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_STATUS_B" id="QUEUE_138_STATUS_B" offset="0x38A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_138_STATUS_C" id="QUEUE_138_STATUS_C" offset="0x38A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_STATUS_A" id="QUEUE_139_STATUS_A" offset="0x38B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_STATUS_B" id="QUEUE_139_STATUS_B" offset="0x38B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_139_STATUS_C" id="QUEUE_139_STATUS_C" offset="0x38B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_STATUS_A" id="QUEUE_140_STATUS_A" offset="0x38C0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_STATUS_B" id="QUEUE_140_STATUS_B" offset="0x38C4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_140_STATUS_C" id="QUEUE_140_STATUS_C" offset="0x38C8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_STATUS_A" id="QUEUE_141_STATUS_A" offset="0x38D0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_STATUS_B" id="QUEUE_141_STATUS_B" offset="0x38D4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_141_STATUS_C" id="QUEUE_141_STATUS_C" offset="0x38D8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_STATUS_A" id="QUEUE_142_STATUS_A" offset="0x38E0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_STATUS_B" id="QUEUE_142_STATUS_B" offset="0x38E4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_142_STATUS_C" id="QUEUE_142_STATUS_C" offset="0x38E8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_STATUS_A" id="QUEUE_143_STATUS_A" offset="0x38F0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_STATUS_B" id="QUEUE_143_STATUS_B" offset="0x38F4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_143_STATUS_C" id="QUEUE_143_STATUS_C" offset="0x38F8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_STATUS_A" id="QUEUE_144_STATUS_A" offset="0x3900" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_STATUS_B" id="QUEUE_144_STATUS_B" offset="0x3904" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_144_STATUS_C" id="QUEUE_144_STATUS_C" offset="0x3908" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_STATUS_A" id="QUEUE_145_STATUS_A" offset="0x3910" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_STATUS_B" id="QUEUE_145_STATUS_B" offset="0x3914" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_145_STATUS_C" id="QUEUE_145_STATUS_C" offset="0x3918" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_STATUS_A" id="QUEUE_146_STATUS_A" offset="0x3920" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_STATUS_B" id="QUEUE_146_STATUS_B" offset="0x3924" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_146_STATUS_C" id="QUEUE_146_STATUS_C" offset="0x3928" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_STATUS_A" id="QUEUE_147_STATUS_A" offset="0x3930" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_STATUS_B" id="QUEUE_147_STATUS_B" offset="0x3934" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_147_STATUS_C" id="QUEUE_147_STATUS_C" offset="0x3938" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_STATUS_A" id="QUEUE_148_STATUS_A" offset="0x3940" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_STATUS_B" id="QUEUE_148_STATUS_B" offset="0x3944" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_148_STATUS_C" id="QUEUE_148_STATUS_C" offset="0x3948" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_STATUS_A" id="QUEUE_149_STATUS_A" offset="0x3950" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_STATUS_B" id="QUEUE_149_STATUS_B" offset="0x3954" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_149_STATUS_C" id="QUEUE_149_STATUS_C" offset="0x3958" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_STATUS_A" id="QUEUE_150_STATUS_A" offset="0x3960" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_STATUS_B" id="QUEUE_150_STATUS_B" offset="0x3964" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_150_STATUS_C" id="QUEUE_150_STATUS_C" offset="0x3968" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_STATUS_A" id="QUEUE_151_STATUS_A" offset="0x3970" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_STATUS_B" id="QUEUE_151_STATUS_B" offset="0x3974" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_151_STATUS_C" id="QUEUE_151_STATUS_C" offset="0x3978" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_STATUS_A" id="QUEUE_152_STATUS_A" offset="0x3980" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_STATUS_B" id="QUEUE_152_STATUS_B" offset="0x3984" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_152_STATUS_C" id="QUEUE_152_STATUS_C" offset="0x3988" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_STATUS_A" id="QUEUE_153_STATUS_A" offset="0x3990" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_STATUS_B" id="QUEUE_153_STATUS_B" offset="0x3994" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_153_STATUS_C" id="QUEUE_153_STATUS_C" offset="0x3998" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_STATUS_A" id="QUEUE_154_STATUS_A" offset="0x39A0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_STATUS_B" id="QUEUE_154_STATUS_B" offset="0x39A4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_154_STATUS_C" id="QUEUE_154_STATUS_C" offset="0x39A8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_STATUS_A" id="QUEUE_155_STATUS_A" offset="0x39B0" width="32">
    
  <bitfield begin="13" description="This field indicates how many packets are currently  queued on the queue. Queue Manager Queue N Status Registers A " end="0" id="QUEUE_ENTRY_COUNT" rwaccess="R" width="14"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_STATUS_B" id="QUEUE_155_STATUS_B" offset="0x39B4" width="32">
    
  <bitfield begin="27" description="This field indicates how many bytes total are contained  in all of the packets which are currently queued on this  queue. Queue_Manager_Queue_n_Status_B Registers B " end="0" id="QUEUE_BYTE_COUNT" rwaccess="R" width="28"></bitfield>
  </register>
  
  
  <register acronym="QUEUE_155_STATUS_C" id="QUEUE_155_STATUS_C" offset="0x39B8" width="32">
    
  <bitfield begin="13" description="This field indicates packet size of the head element of a  queue. Queue_Manager_Queue_N_Status_C Registers C " end="0" id="PACKET_SIZE" rwaccess="R" width="14"></bitfield>
  </register>
</module>
