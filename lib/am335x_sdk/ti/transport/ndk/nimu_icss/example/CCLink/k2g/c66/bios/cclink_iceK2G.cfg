var mode = Program.build.cfgArgs.MODE;

var Defaults 		= xdc.useModule('xdc.runtime.Defaults');
var Diags 			= xdc.useModule('xdc.runtime.Diags');
var Error 			= xdc.useModule('xdc.runtime.Error');
var Log 			= xdc.useModule('xdc.runtime.Log');
var LoggerBuf 		= xdc.useModule('xdc.runtime.LoggerBuf');
var Main 			= xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System 			= xdc.useModule('xdc.runtime.System');
var Text 			= xdc.useModule('xdc.runtime.Text');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
//var IntXbar     	= xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
var Clock 			= xdc.useModule('ti.sysbios.knl.Clock');
//var Timer                       = xdc.useModule('ti.sysbios.hal.Timer');
var Swi 			= xdc.useModule('ti.sysbios.knl.Swi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Task 			= xdc.useModule('ti.sysbios.knl.Task');
var Timer      = xdc.useModule('ti.sysbios.timers.timer64.Timer');
//var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Semaphore 		= xdc.useModule('ti.sysbios.knl.Semaphore');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Hwi			                =	xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Ecm = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var core      = xdc.useModule('ti.sysbios.hal.Core');
var CpIntc                      =   xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var Cache  = xdc.useModule('ti.sysbios.family.c66.Cache');
var devType = "k2g"

/* Load the OSAL package */ 
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = devType;


/* Load Profiling package */
var Utils = xdc.loadPackage('ti.utils.profiling');

/* Load the uart package */
var Uart 			= xdc.loadPackage('ti.drv.uart');

/* Load the I2C package  - required by board */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = devType;

/* Load the PRUSS package */ 
var Pruss = xdc.loadPackage('ti.drv.pruss');
Pruss.Settings.socType  = devType;


/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "iceK2G";


/* Load the Icss_Emac package */
var Icss_Emac = xdc.loadPackage('ti.drv.icss_emac');
Icss_Emac.Settings.enableProfiling = true;
Icss_Emac.Settings.socType  = devType;

var Nimu_Icss 		= xdc.loadPackage('ti.transport.ndk.nimu_icss');

var enableStaticIP         = 1;
/* NDK modules */
var Global 			= xdc.useModule('ti.ndk.config.Global');
var Ip 				= xdc.useModule('ti.ndk.config.Ip');
var Tcp             = xdc.useModule('ti.ndk.config.Tcp');
var Udp             = xdc.useModule('ti.ndk.config.Udp');
var Telnet          = xdc.useModule('ti.ndk.config.Telnet');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;


/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0xA0000;
/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;
/* System stack size (used by ISRs and Swis) */
Program.stack = 0x20000;
/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x400;
/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/* Create a default system heap using ti.bios.HeapMem. */
var heapMemParams1              =   new HeapMem.Params;
heapMemParams1.size             =   8192 * 25;
heapMemParams1.sectionName      =   "systemHeap";
Program.global.heap0            =   HeapMem.create(heapMemParams1);

if (enableStaticIP)
{
    /* Settings for static IP configuration */
	Ip.ResolveIP = false;
	Ip.CallByIP = false;
	Ip.autoIp = false;
if (mode == "master")
{
    Ip.address = "192.168.3.100";
}
else
{
    Ip.address = "192.168.3.4";
}
    Ip.mask = "255.255.255.0";
    Ip.gatewayIpAddr = "192.168.3.1";
}
else
{
    Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
}

Global.ndkTickPeriod = 100;
Global.kernTaskPriLevel = 11;
Global.serviceReportHook = null;
Global.IPv6 = false;

Task.defaultStackSize = 4096;
Task.idleTaskStackSize = 4096;



/* ================ Memory sections configuration ================ */

/* This is the default memory heap. */
/* This is the default memory heap. */
Memory.defaultHeapInstance      =   Program.global.heap0;
Program.sectMap["systemHeap"]   =   Program.platform.stackMemory;
Program.sectMap[".text"] = "APP_CODE_MEM";
Program.sectMap[".data"] = "APP_CACHED_DATA_MEM";
Program.sectMap[".const"] = "APP_CACHED_DATA_MEM";
Program.sectMap[".plt"] = "APP_CACHED_DATA_MEM";
Program.sectMap[".fardata:benchmarking"] = "APP_CACHED_DATA_BLK1_MEM";
/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
Ecm.eventGroupHwiNum[0] = 6;
Ecm.eventGroupHwiNum[1] = 7;
Ecm.eventGroupHwiNum[2] = 8;
Ecm.eventGroupHwiNum[3] = 9;
Global.netSchedulerPri = Global.NC_PRIORITY_HIGH;
