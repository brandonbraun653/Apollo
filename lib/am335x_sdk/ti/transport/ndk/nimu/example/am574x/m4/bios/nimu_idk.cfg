/**
 *  \file   nimu_idk.cfg
 *
 *  \brief  Sysbios config file for nimu example project on AM574x GP EVM.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ================ General configuration ================ */
var enableStaticIP         = 1;
var Defaults 		= xdc.useModule('xdc.runtime.Defaults');
var Diags 			= xdc.useModule('xdc.runtime.Diags');
var Error 			= xdc.useModule('xdc.runtime.Error');
var Log 			= xdc.useModule('xdc.runtime.Log');
var LoggerBuf 		= xdc.useModule('xdc.runtime.LoggerBuf');
var Main 			= xdc.useModule('xdc.runtime.Main');
var System 			= xdc.useModule('xdc.runtime.System');
var Text 			= xdc.useModule('xdc.runtime.Text');
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var Task 			= xdc.useModule('ti.sysbios.knl.Task');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Semaphore 		= xdc.useModule('ti.sysbios.knl.Semaphore');
var SysMin 			= xdc.useModule('xdc.runtime.SysMin');
/* NDK modules */
var Global 			= xdc.useModule('ti.ndk.config.Global');
var Ip 				= xdc.useModule('ti.ndk.config.Ip');
var Tcp             = xdc.useModule('ti.ndk.config.Tcp');
var Udp             = xdc.useModule('ti.ndk.config.Udp');
var Telnet          = xdc.useModule('ti.ndk.config.Telnet');

Tcp.transmitBufSize = 16384;
Tcp.receiveBufSize = 65536;
Tcp.receiveBufLimit = 65536;
Global.pktNumFrameBufs=384;

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
/* Program.argSize = 0x0; */

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/* ================ BIOS configuration ================ */

var BIOS = xdc.useModule('ti.sysbios.BIOS');
/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;
 
/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0xB0000;



if (enableStaticIP)
{
    /* Settings for static IP configuration */
	Ip.ResolveIP = false;
	Ip.CallByIP = false;
	Ip.autoIp = false;
    Ip.address = "192.168.1.4";
    Ip.mask = "255.255.255.0";
    Ip.gatewayIpAddr = "192.168.1.1";
}
else
{
    Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
}

Global.ndkTickPeriod = 100;
Global.kernTaskPriLevel = 11;
Global.serviceReportHook = null;
Global.IPv6 = false;
Global.enableCodeGeneration = true;
Global.pktNumFrameBufs = 192;

Task.defaultStackSize = 4096;
Task.idleTaskStackSize = 4096;

/* ================ Driver configuration ================ */
var socType           = "am574x";
/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = socType;

/* Load the OSAL package */ 
var osType = "tirtos";
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;


/* Load the UART package */ 
var Uart 			= xdc.loadPackage('ti.drv.uart');
/* Load the I2c package */ 
var I2c 			= xdc.loadPackage('ti.drv.i2c');
/* Load the PRUSS package */ 
var Pruss = xdc.loadPackage('ti.drv.pruss');
Pruss.Settings.socType  = socType;

/* Load the board package */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "idkAM574x";

/* Load Profiling package */
var Utils = xdc.loadPackage('ti.utils.profiling');

/* Load the Emac package */
var Emac = xdc.loadPackage('ti.drv.emac');
Emac.Settings.socType  = socType;


/* Load the nimu package */
var Nimu 		= xdc.loadPackage('ti.transport.ndk.nimu');
Nimu.Settings.socType  = socType;

/* Enable cache */
var Cache       = xdc.useModule('ti.sysbios.hal.unicache.Cache');
Cache.enableCache = true;
/* Use AMMU module */
var AMMU            = xdc.useModule('ti.sysbios.hal.ammu.AMMU');

/* Large PAGE */
AMMU.largePages[0].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[0].logicalAddress = 0x40000000;
AMMU.largePages[0].translatedAddress = 0x40000000;
AMMU.largePages[0].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[0].size = AMMU.Large_512M;
AMMU.largePages[0].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[0].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.largePages[0].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[0].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.largePages[1].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[1].logicalAddress = 0x80000000;
AMMU.largePages[1].translatedAddress = 0x80000000;
AMMU.largePages[1].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[1].size = AMMU.Large_512M;
AMMU.largePages[1].L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
AMMU.largePages[1].L1_allocate = AMMU.AllocatePolicy_ALLOCATE;
AMMU.largePages[1].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
AMMU.largePages[1].L1_posted = AMMU.PostedPolicy_POSTED;
AMMU.largePages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.largePages[2].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[2].logicalAddress = 0xA0000000;
AMMU.largePages[2].translatedAddress = 0xA0000000;
AMMU.largePages[2].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[2].size = AMMU.Large_512M;
AMMU.largePages[2].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[2].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.largePages[2].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[2].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.largePages[3].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[3].logicalAddress = 0x60000000;
AMMU.largePages[3].translatedAddress = 0x40000000;
AMMU.largePages[3].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[3].size = AMMU.Large_512M;
AMMU.largePages[3].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[3].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.largePages[3].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[3].L2_posted = AMMU.PostedPolicy_NON_POSTED;

/* Medium Page */
AMMU.mediumPages[0].pageEnabled = AMMU.Enable_YES;
AMMU.mediumPages[0].logicalAddress = 0x00300000;
AMMU.mediumPages[0].translatedAddress = 0x40300000;
AMMU.mediumPages[0].translationEnabled = AMMU.Enable_YES;
AMMU.mediumPages[0].size = AMMU.Medium_256K;

AMMU.mediumPages[1].pageEnabled = AMMU.Enable_YES;
AMMU.mediumPages[1].logicalAddress = 0x00400000;
AMMU.mediumPages[1].translatedAddress = 0x40400000;
AMMU.mediumPages[1].translationEnabled = AMMU.Enable_YES;
AMMU.mediumPages[1].size = AMMU.Medium_256K;
AMMU.mediumPages[1].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.mediumPages[1].L1_posted = AMMU.PostedPolicy_POSTED;
AMMU.mediumPages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.mediumPages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;

/* Small Page */
AMMU.smallPages[0].pageEnabled = AMMU.Enable_YES;
AMMU.smallPages[0].logicalAddress = 0x00000000;
AMMU.smallPages[0].translatedAddress = 0x55020000;
AMMU.smallPages[0].translationEnabled = AMMU.Enable_YES;
AMMU.smallPages[0].size = AMMU.Small_16K;
AMMU.smallPages[0].volatileQualifier = AMMU.Volatile_FOLLOW;
AMMU.smallPages[0].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
AMMU.smallPages[0].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.smallPages[0].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[0].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.smallPages[1].pageEnabled = AMMU.Enable_YES;
AMMU.smallPages[1].logicalAddress = 0x40000000;
AMMU.smallPages[1].translatedAddress = 0x55080000;
AMMU.smallPages[1].translationEnabled = AMMU.Enable_YES;
AMMU.smallPages[1].size = AMMU.Small_16K;
AMMU.smallPages[1].volatileQualifier = AMMU.Volatile_FOLLOW;
AMMU.smallPages[1].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[1].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.smallPages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.smallPages[2].pageEnabled = AMMU.Enable_YES;
AMMU.smallPages[2].logicalAddress = 0x00004000;
AMMU.smallPages[2].translatedAddress = 0x55024000;
AMMU.smallPages[2].translationEnabled = AMMU.Enable_YES;
AMMU.smallPages[2].size = AMMU.Small_16K;
AMMU.smallPages[2].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
AMMU.smallPages[2].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.smallPages[2].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[2].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.smallPages[3].pageEnabled = AMMU.Enable_YES;
AMMU.smallPages[3].logicalAddress = 0x00008000;
AMMU.smallPages[3].translatedAddress = 0x55028000;
AMMU.smallPages[3].translationEnabled = AMMU.Enable_YES;
AMMU.smallPages[3].size = AMMU.Small_16K;
AMMU.smallPages[3].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[3].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.smallPages[3].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[3].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.smallPages[4].pageEnabled = AMMU.Enable_YES;
AMMU.smallPages[4].logicalAddress = 0x20000000;
AMMU.smallPages[4].translatedAddress = 0x55020000;
AMMU.smallPages[4].translationEnabled = AMMU.Enable_YES;
AMMU.smallPages[4].size = AMMU.Small_16K;
AMMU.smallPages[4].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[4].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.smallPages[4].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.smallPages[4].L2_posted = AMMU.PostedPolicy_NON_POSTED;
