/*
 * helloWorld.cfg
 *
 * Memory Map and Program intiializations for the helloWorld example Utility
 *
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/ 
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *   @file  helloWorld.cfg
 *
 *   @brief   
 *      Memory Map and Program intiializations for the hello world NDK unit test.
 *
 */
 
/********************************************************************************************************************
*  Specify all needed RTSC MOudles and ocnfigure them.																*
********************************************************************************************************************/

var Memory  =   xdc.useModule('xdc.runtime.Memory');

var BIOS    =   xdc.useModule('ti.sysbios.BIOS');

var Task    =   xdc.useModule('ti.sysbios.knl.Task');

var HeapBuf =   xdc.useModule('ti.sysbios.heaps.HeapBuf');

var Log     =   xdc.useModule('xdc.runtime.Log');

/*
** Allow storing of task names. By default if you name a task with a friendly display name it will not be saved
** to conserve RAM. This must be set to true to allow it. We use friendly names on the Task List display.
*/
Task.common$.namedInstance = true;

var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');

/* Use this for BIOS 6.30 plus to get the IPC module */
var Sem	= xdc.useModule ('ti.sysbios.knl.Semaphore');

var Hwi	= xdc.useModule ('ti.sysbios.hal.Hwi');

var Ecm = xdc.useModule ('ti.sysbios.family.c64p.EventCombiner');

var Diags       = xdc.useModule('xdc.runtime.Diags');

var socType 					= 	"omapl137";

/* Load the CSL package */
var devType 					= 	"omapl137";
var Csl 					    = 	xdc.useModule('ti.csl.Settings');
Csl.deviceType 					= 	devType;
Csl.useCSLIntcLib 				= 	true;

/* Load the OSAL package */
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmOMAPL137";

/* Load the uart package */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType = devType;

/* Load the i2c package */
var i2c = xdc.loadPackage('ti.drv.i2c');
i2c.Settings.socType = devType;

/* Load EMAC package */
var EmacLLD = xdc.loadPackage('ti.drv.emac');
EmacLLD.Settings.socType = devType;
EmacLLD.Settings.enableProfiling = false;

var Nimu 		= xdc.loadPackage('ti.transport.ndk.nimu');
Nimu.Settings.socType  = socType;

/* 
** Sets up the exception log so you can read it with ROV in CCS 
*/
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Exc = xdc.useModule('ti.sysbios.family.c64p.Exception');
Exc.common$.logger = LoggerBuf.create();
Exc.enablePrint = true; /* prints exception details to the CCS console */


/*
** Use this load to configure NDK 2.2 and above using RTSC. In previous versions of
** the NDK RTSC configuration was not supported and you should comment this out.
*/
var Ndk       = xdc.loadPackage('ti.ndk.config');
var Global       = xdc.useModule('ti.ndk.config.Global');

/* 
** This allows the heart beat (poll function) to be created but does not generate the stack threads 
**
** Look in the cdoc (help files) to see what CfgAddEntry items can be configured. We tell it NOT
** to create any stack threads (services) as we configure those ourselves in our Main Task
** thread hpdspuaStart.
*/  
Global.enableCodeGeneration = false;


var Startup     =   xdc.useModule('xdc.runtime.Startup');

var System      =   xdc.useModule('xdc.runtime.System');

/*
** Create a Heap. 
*/
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x8000;
heapMemParams.sectionName = "systemHeap";
Program.global.heap0 = HeapMem.create(heapMemParams);

/* This is the default memory heap. */
Memory.defaultHeapInstance  =   Program.global.heap0;
Program.sectMap["sharedL2"] = "SDRAM"; 
Program.sectMap["systemHeap"] = "SDRAM";
Program.sectMap[".sysmem"]  = "SDRAM";
Program.sectMap[".args"]    = "SDRAM";
Program.sectMap[".cio"]     = "SDRAM";
Program.sectMap[".far"] 	= 	"SDRAM";
Program.sectMap[".rodata"] 	= 	"SDRAM";
Program.sectMap[".neardata"] 	= 	"SDRAM";
Program.sectMap[".cppi"] 	= 	"SDRAM";
Program.sectMap[".init_array"] 	= 	"SDRAM";
Program.sectMap[".qmss"] 	= 	"SDRAM";
Program.sectMap[".cinit"] 	= 	"SDRAM";
Program.sectMap[".bss"]		=	"SDRAM";
Program.sectMap[".const"]	=	"SDRAM";
Program.sectMap[".text"]	=	"SDRAM";
Program.sectMap[".code"]	=	"SDRAM";
Program.sectMap[".switch"]	=	"SDRAM";
Program.sectMap[".data"]	=	"SDRAM";
Program.sectMap[".fardata"] = 	"SDRAM";
Program.sectMap[".args"] 	= 	"SDRAM";
Program.sectMap[".cio"] 	= 	"SDRAM";
Program.sectMap[".vecs"] 	= 	"SDRAM";

Program.sectMap["emacComm"]          = "SDRAM"


Program.sectMap[".far:taskStackSection"] = "SDRAM";
Program.sectMap[".stack"]	=	"SDRAM";
Program.sectMap[".far:IMAGEDATA"] = {loadSegment: "SDRAM", loadAlign: 8};
Program.sectMap[".far:NDK_OBJMEM"] = {loadSegment: "SDRAM", loadAlign: 8};
Program.sectMap[".far:NDK_PACKETMEM"] = {loadSegment: "SDRAM", loadAlign: 128};

/* Required if using System_printf to output on the console */
SysStd          		=   xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy     =   SysStd;

/********************************************************************************************************************
* Define hooks and static tasks  that will always be running.               										*
 ********************************************************************************************************************/

/* 
** Create the stack Thread Task for our application.
*/
var tskNdkStackTest  		=   Task.create("&StackTest");
tskNdkStackTest.stackSize  	= 	0x1400;
tskNdkStackTest.priority    = 	0x5;

/* 
** If you are using RTSC configuration with NDK 2.2 and above, this is done by default, else
** register hooks so that the stack can track all Task creation 
Task.common$.namedInstance  =   true;
Task.addHookSet ({ registerFxn: '&NDK_hookInit', createFxn: '&NDK_hookCreate', });

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;

