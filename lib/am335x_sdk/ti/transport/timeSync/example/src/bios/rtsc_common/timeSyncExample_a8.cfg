/**
 *  \file   timeSync_example_a8.cfg
 *
 *  \brief  Sysbios config file for timeSync example project on AM335X
 *          ICEV2 EVM.
 *
 */

/*
 * Copyright (C) 2015-2018 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ================ General configuration ================ */
var Defaults 		= xdc.useModule('xdc.runtime.Defaults');
var Diags 			= xdc.useModule('xdc.runtime.Diags');
var Error 			= xdc.useModule('xdc.runtime.Error');
var Main 			= xdc.useModule('xdc.runtime.Main');
var Memory          = xdc.useModule('xdc.runtime.Memory')
var SysMin          = xdc.useModule('xdc.runtime.SysMin');
var System 			= xdc.useModule('xdc.runtime.System');
var Text 			= xdc.useModule('xdc.runtime.Text');
var Clock 			= xdc.useModule('ti.sysbios.knl.Clock');
var Swi 			= xdc.useModule('ti.sysbios.knl.Swi');
var Task 			= xdc.useModule('ti.sysbios.knl.Task');
var Mailbox         = xdc.useModule('ti.sysbios.knl.Mailbox');
var Semaphore 		= xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi             = xdc.useModule('ti.sysbios.family.arm.a8.intcps.Hwi');
var Timer           = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var HeapMem         = xdc.useModule('ti.sysbios.heaps.HeapMem');
var SemiHostSupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
var posix           = xdc.useModule("ti.posix.tirtos.Settings");

var drv        		= xdc.loadPackage ("ti.sdo.edma3.drv");
var rm        		= xdc.loadPackage ("ti.sdo.edma3.rm");
var Edma        	= xdc.loadPackage ("ti.sdo.edma3.drv.sample");

/* NDK modules */
var Global          = xdc.useModule('ti.ndk.config.Global');
var Ip              = xdc.useModule('ti.ndk.config.Ip');
var Tcp             = xdc.useModule('ti.ndk.config.Tcp');
var Udp             = xdc.useModule('ti.ndk.config.Udp');

/* Timer Freq Settings */
Timer.intFreqs[3].lo = 24000000;
Timer.intFreqs[3].hi = 0;


Tcp.transmitBufSize    = 8192;
Tcp.receiveBufSize     = 65536;
Tcp.receiveBufLimit    = 65536;
Global.pktNumFrameBufs = 384;

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x10000;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */
Error.raiseHook = null;
/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */
Text.isLoaded = false;
/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* ================ BIOS configuration ================ */

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.customCCOpts = BIOS.customCCOpts.replace(" -g ","");
BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;
BIOS.swiEnabled = true;
 
/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0xA0000;

Swi.common$.namedInstance = true;
Program.sectionsExclude = ".*";

Clock.tickPeriod = 1000;

Task.enableIdleTask = true;
Task.initStackFlag = false;
Task.checkStackFlag = false;

Global.networkOpenHook = null;
Global.networkCloseHook = null;
Global.stackBeginHook = null;

Ip.ResolveIP = false;
Ip.CallByIP = false;
Ip.autoIp = false;
Ip.dhcpClientMode = 1;
Ip.address = "192.168.2.3";
Ip.gatewayIpAddr = "192.168.2.1";
Ip.mask = "255.255.255.0";
Global.ndkTickPeriod = 100;
Global.kernTaskPriLevel = 11;
Global.serviceReportHook = null;
Global.IPv6 = false;
Ip.ifIdx = 2;
Global.stackInitHook = "&stackInitHook";
Global.serviceReportHook = null;
Global.IPv6 = false;

Global.networkIPAddrHook = null;


/* ================ Cache and MMU configuration ================ */

var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache');
Cache.enableCache = true; 

var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
Mmu.enableMMU = true;

var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                // bufferable
    cacheable  : true,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for NOR - bufferable| Cacheable */
var peripheralBaseAddr = 0x08000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for NOR - bufferable| Cacheable */
var peripheralBaseAddr = 0x08100000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for NOR - bufferable| Cacheable */
var peripheralBaseAddr = 0x08200000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


/* Force peripheral section to be NON cacheable strongly-ordered memory */
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for PWM - Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x48300000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for INTCPS,MPUSS - Non Bufferable| Non Cacheable */
var peripheralBaseAddr = 0x48200000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for I2C2,McSPI1,UART3,UART4,UART5, GPIO2,GPIO3,MMC1 - Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x48100000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for UART1,UART2,I2C1,McSPI0,McASP0 CFG,McASP1 CFG,DMTIMER,GPIO1 -Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x48000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for UART1,UART2,I2C1,McSPI0,McASP0 CFG,McASP1 CFG,DMTIMER,GPIO1 -Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x48030000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for Clock Module, PRM, GPIO0, UART0, I2C0, - Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x44E00000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : true,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for //PRUSS1 -Bufferable| Non Cacheable | Shareable */
var peripheralBaseAddr = 0x4A300000;  // Should it be bufferable??
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for EDMA3 - Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x49000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for L4 FAST CFG- Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x4A000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for CPSW - Non bufferable| Non Cacheable */
var peripheralBaseAddr = 0x4A100000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

var peripheralBaseAddr = 0x49a00000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

var peripheralBaseAddr = 0x49900000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

var peripheralBaseAddr = 0x49800000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

var peripheralBaseAddr = 0x40300000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);
