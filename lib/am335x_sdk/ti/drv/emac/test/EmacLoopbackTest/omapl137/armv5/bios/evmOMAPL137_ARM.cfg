/**
 *  \file   evmOMAPL137_ARM.cfg
 *
 *  \brief  Sysbios config file for EMAC test project on OMAPL137 EVM.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi 		= xdc.useModule('ti.sysbios.hal.Hwi');
var Cache = xdc.useModule('ti.sysbios.hal.Cache');
var devType = "omapl137"

var socType = "omapl137";

/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = socType;

/* Load the OSAL package */
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/* Load the EMAC package */
var Emac = xdc.loadPackage('ti.drv.emac');
Emac.Settings.socType = devType;
Emac.Settings.enableProfiling = false;

/* Load the UART package */
var UART = xdc.loadPackage('ti.drv.uart');    
UART.Settings.socType = devType;  

/* Load the I2C package */
var I2c 			= xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = devType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmOMAPL137";

/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */


/* No runtime stack checking is performed */
Task.checkStackFlag = false;


/* Reduce the number of task priorities */
Task.numPriorities = 4;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x30000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x20000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

var Cache1  = xdc.useModule('ti.sysbios.family.arm.arm9.Cache');
var Mmu = xdc.useModule('ti.sysbios.family.arm.arm9.Mmu');

/* Enable the cache                                                           */
Cache1.enableCache = true;

/* Enable the MMU (Required for L1 data caching)                              */
Mmu.enableMMU = true;
/* Enable the MMU (Required for L1/L2 caching)                              */

/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.arm9.Mmu');
Mmu.enableMMU = true;
var attrs = {
	type: Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
        bufferable: true,                  // bufferable
        cacheable: false,                   // cacheable
	imp: 1,                            // implementation defined
        domain: 3,                         // domain between 0-15
        accPerm: 3,                        // read/write permission
    };


 for (var i=0x01C42000; i < 0x01C42FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D0C000; i < 0x01D0CFFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D0D000; i < 0x01D0DFFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01E27000; i < 0x01E27FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D00000; i < 0x01D02FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D04000; i < 0x01D06FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D08000; i < 0x01D0AFFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01C22000; i < 0x01C22FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01E28000; i < 0x01E28FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }
     
 for (var i=0x01E26000; i < 0x01E26FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

/* Set IO Delay configuration areas as non-cache */
/* Mmu.setSecondLevelDescMeta(0x4844a000, 0x4844a000, attrs);
   Mmu.setSecondLevelDescMeta(0x4ae07d00, 0x4ae07d00, attrs);
*/

/* This is the default memory heap. */
Program.sectMap["emacComm"]          = "SDRAM";
Program.sectMap[".far:EMAC_DRV"]     = "SDRAM";
Program.sectMap["msmc"]              = "L3_CBA_RAM";
Program.sectMap[".far:PKTBUF_L2MEM"] = "SDRAM";
Program.sectMap[".far"]              = "SDRAM";
Program.sectMap[".cinit"]            = "SDRAM";
Program.sectMap[".bss"]              = "SDRAM";
Program.sectMap[".const"]            = "SDRAM";
Program.sectMap[".text"]             = "SDRAM";
Program.sectMap[".code"]             = "SDRAM";
Program.sectMap[".data"]             = "SDRAM";
Program.sectMap[".far:taskStackSection"] = "SDRAM";
Program.sectMap[".stack"]            = "SDRAM";
Program.sectMap[".sysmem"]           = "SDRAM";
Program.sectMap[".args"]             = "SDRAM";
Program.sectMap[".cio"]              = "SDRAM";
Program.sectMap[".switch"]           = "SDRAM";
Program.sectMap[".tx_buf"] = "SDRAM";
Program.sectMap[".rx_buf"] = "SDRAM";

/* Create a Periodic task with 100 ms inverval to handle EMAC polling function */
var prdEmacClkParams         =   new Clock.Params ();
prdEmacClkParams.period      =   100;
prdEmacClkParams.startFlag   =   true;
Program.global.clockInst1    =   Clock.create("&app_timer", 5, prdEmacClkParams);
