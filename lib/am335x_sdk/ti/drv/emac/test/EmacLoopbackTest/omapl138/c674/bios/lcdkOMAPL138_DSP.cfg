/**
 *  \file   lcdkOMAPL138_DSP.cfg
 *
 *  \brief  Sysbios config file for EMAC test project on OMAPL138 LCDK.
 *
 */

/*
 * Copyright (C) 2017 - 2018 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

var Memory       = xdc.useModule('xdc.runtime.Memory');
var BIOS         = xdc.useModule('ti.sysbios.BIOS');
var Task         = xdc.useModule('ti.sysbios.knl.Task');
var Clock        = xdc.useModule ('ti.sysbios.knl.Clock');
var HeapMem      = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Hwi          = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var ECM          = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');

/* Load and use the System Package */
var System       = xdc.useModule('xdc.runtime.System');
var SysStd       = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

/* Register startup function handler with BIOS */
var Startup      = xdc.useModule('xdc.runtime.Startup');
Startup.firstFxns.$add('&myStartupFxn');

var devType = "omapl138"

/* Load the CSL package */
var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = devType;

/* Load the OSAL package */
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "lcdkOMAPL138";

/* Load the uart package */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType = devType;

/* Load the EMAC package */
var Emac = xdc.loadPackage('ti.drv.emac');
Emac.Settings.socType = devType;
Emac.Settings.enableProfiling = false;


/* Create a default system heap using ti.bios.HeapMem. */
var heapMemParams1              =   new HeapMem.Params;
heapMemParams1.size             =   8192 * 30;
heapMemParams1.sectionName      =   "systemHeap";
Program.global.heap0            =   HeapMem.create(heapMemParams1);


/* This is the default memory heap. */
Memory.defaultHeapInstance      =   Program.global.heap0;

Program.sectMap["systemHeap"]   = Program.platform.stackMemory;


/* This is the default memory heap. */
Program.sectMap["emacComm"]          = "APP_CACHED_DATA_MEM";
Program.sectMap[".far:EMAC_DRV"]     = "APP_CACHED_DATA_MEM";
Program.sectMap["msmc"]          	 = "APP_CODE_MEM";
Program.sectMap[".far:PKTBUF_L2MEM"] = "APP_CACHED_DATA_MEM";
Program.sectMap[".far"]              = "APP_CACHED_DATA_MEM";
Program.sectMap[".cinit"]            = "APP_CACHED_DATA_MEM";
Program.sectMap[".bss"]              = "APP_CACHED_DATA_MEM";
Program.sectMap[".const"]            = "APP_CACHED_DATA_MEM";
Program.sectMap[".text"]             = "APP_CACHED_DATA_MEM";
Program.sectMap[".code"]             = "APP_CACHED_DATA_MEM";
Program.sectMap[".data"]             = "APP_CACHED_DATA_MEM";
Program.sectMap[".far:taskStackSection"] = "APP_CACHED_DATA_MEM";
Program.sectMap[".stack"]            = "APP_CACHED_DATA_MEM";
Program.sectMap[".sysmem"]           = "APP_CACHED_DATA_MEM";
Program.sectMap[".vecs"]             = "APP_CACHED_DATA_MEM";
Program.sectMap[".args"]             = "APP_CACHED_DATA_MEM";
Program.sectMap[".cio"]              = "APP_CACHED_DATA_MEM";
Program.sectMap[".switch"]           = "APP_CACHED_DATA_MEM";
Program.sectMap[".tx_buf"]      = "APP_CACHED_DATA_MEM";
Program.sectMap[".rx_buf"]      = "APP_CACHED_DATA_MEM";

/* Create a Periodic task with 100 ms inverval to handle EMAC polling function */
var prdEmacClkParams         =   new Clock.Params ();
prdEmacClkParams.period      =   100;
prdEmacClkParams.startFlag   =   true;
Program.global.clockInst1    =   Clock.create("&app_timer", 5, prdEmacClkParams);

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled             =   true;

/*Entry point Memory alignment*/
Program.sectMap[".text:_c_int00"]                 = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadSegment     = "APP_CACHED_DATA_BLK1_MEM";