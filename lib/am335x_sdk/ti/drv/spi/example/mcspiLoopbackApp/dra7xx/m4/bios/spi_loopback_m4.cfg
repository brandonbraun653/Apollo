/**
 *  \file   spi_loopback_m4.cfg
 *
 *  \brief  Sysbios config file for M4 MCSPI loopback project on
 *          DRA7xx EVMs.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* ========================================================================== */
/*                      CFG script for the McSPI sample                       */
/* ========================================================================== */

/* use modules */
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Idle      = xdc.useModule('ti.sysbios.knl.Idle');
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var Startup   = xdc.useModule('xdc.runtime.Startup');
var SysStd    = xdc.useModule('xdc.runtime.SysStd');
var System    = xdc.useModule('xdc.runtime.System');
var Assert    = xdc.useModule('xdc.runtime.Assert');
var Main      = xdc.useModule('xdc.runtime.Main');
var Memory    = xdc.useModule('xdc.runtime.Memory');
var Program   = xdc.useModule('xdc.cfg.Program');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf   = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Clock     = xdc.useModule('ti.sysbios.knl.Clock');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Core      = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
var HalCore   = xdc.useModule('ti.sysbios.hal.Core');
var Hwi       = xdc.useModule('ti.sysbios.hal.Hwi');
var SyncSem   = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Cache     = xdc.useModule('ti.sysbios.hal.unicache.Cache');
var HalCache  = xdc.useModule('ti.sysbios.hal.Cache');
var Task      = xdc.useModule("ti.sysbios.knl.Task");
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');

var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.outputDir = "src";

/* Enable cache */
Cache.enableCache = true;

/* Disable SMP BIOS */
BIOS.smpEnabled = false;

/* Bios lib instrumentation */
BIOS.libType = BIOS.LibType_Custom;

/* Fix for right clock of M4 */
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 212500000; /* Actual CPU Clock Rate */

/* Clock tick in microseconds */
Clock.tickPeriod = 1000;

/* Stack size when NULL is passed as stack during TSK create    */
Task.defaultStackSize  = 0x4000;
Task.defaultAffinity   = 0;

Memory.defaultHeapSize = 0x15000;

/* ISR/SWI stack        */
Program.stack = 0x4000;
/* Heap used when creating semaphore's, TSK's or malloc() ... */
Program.heap  = 0x15000;

/* allocate a config-params object */
var HeapParam = new HeapMem.Params;

/* optionally assign per-instance configs */
HeapParam.size = 180000;

/* create an instance-object */
Program.global.myHeap = HeapMem.create(HeapParam);

/* ================ Driver configuration ================ */
var soc   = Program.build.cfgArgs.SOC.toLowerCase();
var board = Program.build.cfgArgs.BOARD;
xdc.print("# !!!  Current soc is [" + soc + "] !!!");
xdc.print("# !!!  Current board is [" + board + "] !!!");

/* Load the OSAL package */
var osType = "tirtos";
var Osal   = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;

/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = soc;

/* Load the spi package */
var Spi = xdc.loadPackage('ti.drv.spi');
Spi.Settings.socType = soc;

/* Load the uart package */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType = soc;

/* Load the LLD package */
var I2C = xdc.loadPackage('ti.drv.i2c');
I2C.Settings.socType = soc;

/* Load the board package */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = board;

/* ================ Memory sections configuration ================ */
if (soc == "dra72x" || soc == "dra75x")
{
    Program.linkTemplate = xdc.findFile("ti/build/dra7xx/linkcmd.xdt");
    Program.sectMap["BOARD_IO_DELAY_DATA"] = "OCMC_RAM1_VIRT";
    Program.sectMap["BOARD_IO_DELAY_CODE"] = "OCMC_RAM1_VIRT";
}
