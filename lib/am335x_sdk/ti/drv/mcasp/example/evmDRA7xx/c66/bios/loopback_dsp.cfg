/**
 *  \file   loopback_dsp.cfg
 *
 *  \brief  Sysbios config file for Audio, EQ, and Device Loopback 
 *          project for C66 on DRA7xx EVMs.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ========================================================================== */
/*                      CFG script for the Audio sample                       */
/* ========================================================================== */

/* load the required files and packages                                       */
var GIO     = xdc.useModule('ti.sysbios.io.GIO');
var Task    = xdc.useModule("ti.sysbios.knl.Task");
var BIOS    = xdc.useModule("ti.sysbios.BIOS");
var ECM     = xdc.useModule("ti.sysbios.family.c64p.EventCombiner");
var System  = xdc.useModule("xdc.runtime.System");
var SysStd  = xdc.useModule('xdc.runtime.SysStd');
var cache   = xdc.useModule("ti.sysbios.hal.Cache");
var IntXbar = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');

var Hwi       = xdc.useModule("ti.sysbios.family.c64p.Hwi");
var Sem       = xdc.useModule("ti.sysbios.knl.Semaphore");
var Log       = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Memory    = xdc.useModule('xdc.runtime.Memory');
var SysMin    = xdc.useModule('xdc.runtime.SysMin');
var System    = xdc.useModule('xdc.runtime.System');
var Defaults  = xdc.useModule('xdc.runtime.Defaults');
var Main      = xdc.useModule('xdc.runtime.Main');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var HeapMem   = xdc.useModule("ti.sysbios.heaps.HeapMem");

var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.outputDir = "src";

var Edma = xdc.loadPackage("ti.sdo.edma3.drv.sample");
var drv  = xdc.loadPackage("ti.sdo.edma3.drv");
var rm   = xdc.loadPackage("ti.sdo.edma3.rm");

/* ================ Driver configuration ================ */
var soc   = Program.build.cfgArgs.SOC.toLowerCase();
var board = Program.build.cfgArgs.BOARD;
xdc.print("# !!!  Current soc is [" + soc + "] !!!");
xdc.print("# !!!  Current board is [" + board + "] !!!");

/* Load the Osal package */
var osType = "tirtos";
var Osal   = xdc.loadPackage('ti.osal');
Osal.Settings.osType = osType;
Osal.Settings.socType = soc;

/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = soc;

/* Load the mcasp package */
var McASP = xdc.loadPackage('ti.drv.mcasp');
McASP.Settings.socType = soc;

/* Load the i2c package */
var I2C = xdc.loadPackage('ti.drv.i2c');
I2C.Settings.socType = soc;

/* Load the UART package */
var UART = xdc.loadPackage('ti.drv.uart');
UART.Settings.socType = soc;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = board;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x2000;

BIOS.cpuFreq.lo = 600000000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x1000;

System.SupportProxy = SysStd;

/* allocate a config-params object */
var HeapParam = new HeapMem.Params;

/* optionally assign per-instance configs */
HeapParam.size        = 200000;

/* create an instance-object */
Program.global.myHeap = HeapMem.create(HeapParam);

var task0Params = new Task.Params();
task0Params.priority      = 5;
task0Params.instance.name = "task0";

Program.global.task0 = Task.create("&Audio_echo_Task", task0Params);

var EQ_demo = Program.build.cfgArgs.EQ;
if (EQ_demo == "true")
{
    var task1Params = new Task.Params();
    task1Params.priority      = 1;
    task1Params.instance.name = "task1";

    Program.global.task1 = Task.create("&ReadInputTask", task1Params);
}

ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

/* chnaging default tick of timer to 100us from default 1000us */
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
Clock.tickPeriod = 1000;

/*
 * Create and install logger for the whole system
 */
var LoggerBuf  = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBuf0 = LoggerBuf.create();
if (EQ_demo == "true")
{
    var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
    
    LoggingSetup.sysbiosHwiLogging       = true;
    LoggingSetup.sysbiosSemaphoreLogging = true;
    LoggingSetup.loadHwiLogging = true;
    LoggingSetup.loggerType     = LoggingSetup.LoggerType_JTAGRUNMODE;
}

var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.common$.logger = loggerBuf0;
var Diags = xdc.useModule('xdc.runtime.Diags');
Load.common$.diags_USER4 = Diags.ALWAYS_ON;

if (soc == "dra72x" || soc == "dra75x")
{
    /* Place IODELAY code in OCMC_RAM1 as DDR exeuction of this code will lead to
     * failures.
     */
    Program.sectMap["BOARD_IO_DELAY_DATA"] = "OCMC_RAM1";
    Program.sectMap["BOARD_IO_DELAY_CODE"] = "OCMC_RAM1";
}

/* Align DSP entry point address according to the SBL requirements */
Program.sectMap[".text:_c_int00"] = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadSegment = "EXT_RAM";
Program.sectMap[".text:_c_int00"].loadAlign = 0x400;
