/**
 *  \file   audiosample.cfg
 *
 *  \brief  Sysbios config file for mcasp audio test project on OMAPL137 EVM.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ========================================================================== */
/*                      CFG script for the Audio sample                       */
/* ========================================================================== */
var Defaults 	= xdc.useModule('xdc.runtime.Defaults');
var Diags 		= xdc.useModule('xdc.runtime.Diags');
var Error 		= xdc.useModule('xdc.runtime.Error');
var Log 		= xdc.useModule('xdc.runtime.Log');
var LoggerBuf 	= xdc.useModule('xdc.runtime.LoggerBuf');
var Main 		= xdc.useModule('xdc.runtime.Main');
var Memory 		= xdc.useModule('xdc.runtime.Memory')
var SysMin 		= xdc.useModule('xdc.runtime.SysMin');
var System 		= xdc.useModule('xdc.runtime.System');
var Text 		= xdc.useModule('xdc.runtime.Text');
var Clock 		= xdc.useModule('ti.sysbios.knl.Clock');
var Swi			= xdc.useModule('ti.sysbios.knl.Swi');
var Task        = xdc.useModule ("ti.sysbios.knl.Task");
var Sem         = xdc.useModule("ti.sysbios.knl.Semaphore");
var Hwi 		= xdc.useModule('ti.sysbios.hal.Hwi');

/* load the required files and packages                                       */
var GIO 		= xdc.useModule('ti.sysbios.io.GIO');
var BIOS        = xdc.useModule ("ti.sysbios.BIOS");
var SysStd      = xdc.useModule('xdc.runtime.SysStd');

var HeapMem     = xdc.useModule ("ti.sysbios.heaps.HeapMem");

var Edma        = xdc.loadPackage ("ti.sdo.edma3.drv.sample");
var drv        	= xdc.loadPackage ("ti.sdo.edma3.drv");
var rm        	= xdc.loadPackage ("ti.sdo.edma3.rm");

var socType           = "omapl137";
var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = "omapl137";
Csl.libProfile = "release";




/* Load the OSAL package */
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType  = socType;

/* Load the driver packages, starting with mcasp */
var McASP               = xdc.loadPackage('ti.drv.mcasp');
McASP.Settings.socType  = socType;

/* Load the i2c package */
var I2C               = xdc.loadPackage('ti.drv.i2c');
I2C.Settings.socType  = socType;

/* Load the uart package */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType  = socType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmOMAPL137";

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x2000;
BIOS.cpuFreq.lo = 375000000;
BIOS.libType = BIOS.LibType_Custom;

Program.stack = 0x2000;

/* Enable the cache                                                           */
var Cache  = xdc.useModule('ti.sysbios.family.arm.arm9.Cache');
Cache.enableCache = true;

/* Enable the MMU (Required for L1/L2 caching)                              */

/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.arm9.Mmu');
Mmu.enableMMU = true;
var attrs = {
	type: Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
        bufferable: true,                  // bufferable
        cacheable: false,                   // cacheable
	imp: 1,                            // implementation defined
        domain: 3,                         // domain between 0-15
        accPerm: 3,                        // read/write permission
    };

 for (var i=0x01E27000; i < 0x01E27FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D00000; i < 0x01D02FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D04000; i < 0x01D06FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01D08000; i < 0x01D0AFFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01C22000; i < 0x01C22FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0x01E28000; i < 0x01E28FFF; i = i + 0x00000400) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }

 for (var i=0xC3000000; i < 0xC4000000; i = i + 0x00100000) {
         // Each 'SECTION' descriptor entry spans a 1MB address range
         Mmu.setFirstLevelDescMeta(i, i, attrs);
     }


/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x20000;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;
System.SupportProxy = SysMin;


/* allocate a config-params object */
var HeapParam = new HeapMem.Params;

/* optionally assign per-instance configs */
HeapParam.size = 200000;
HeapParam.sectionName = "app_heap"

/* create an instance-object */
Program.global.myHeap = HeapMem.create(HeapParam);
Program.sectMap["app_heap"] = "SDRAM";

var task0Params = new Task.Params();
task0Params.priority = 5;
task0Params.instance.name = "task0";

Program.global.task0 = Task.create("&Audio_echo_Task", task0Params);

//Program.sectMap[".text"] = "L2SRAM";
// chnaging default tick of timer to 100us from default 1000us
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
Clock.tickPeriod = 1000;


 /* No runtime stack checking is performed */
Task.enableIdleTask = true;
Task.initStackFlag = false;
Task.checkStackFlag = false;

var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
