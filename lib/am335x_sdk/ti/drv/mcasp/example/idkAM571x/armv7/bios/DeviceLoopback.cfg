/**
 *  \file   audiosample.cfg
 *
 *  \brief  Sysbios config file for mmcsd test project on AM572X GP EVM.
 *
 */

/*
 * Copyright (C) 2015 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ========================================================================== */
/*                      CFG script for the Audio sample                       */
/* ========================================================================== */
var Defaults 	= xdc.useModule('xdc.runtime.Defaults');
var Diags 		= xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log 		= xdc.useModule('xdc.runtime.Log');
var LoggerBuf 	= xdc.useModule('xdc.runtime.LoggerBuf');
var Main 		= xdc.useModule('xdc.runtime.Main');
var Memory 		= xdc.useModule('xdc.runtime.Memory')
var SysMin 		= xdc.useModule('xdc.runtime.SysMin');
var System 		= xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task        = xdc.useModule ("ti.sysbios.knl.Task");
var Sem         = xdc.useModule("ti.sysbios.knl.Semaphore");
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var ti_sysbios_family_arm_gic_Hwi = xdc.useModule('ti.sysbios.family.arm.gic.Hwi');
var IntXbar      = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');

/* load the required files and packages                                       */
var GIO 		= xdc.useModule('ti.sysbios.io.GIO');
var BIOS        = xdc.useModule ("ti.sysbios.BIOS");
var SysStd      = xdc.useModule('xdc.runtime.SysStd');

var HeapMem     = xdc.useModule ("ti.sysbios.heaps.HeapMem");

var Edma        		= xdc.loadPackage ("ti.sdo.edma3.drv.sample");
var drv        		= xdc.loadPackage ("ti.sdo.edma3.drv");
var rm        		= xdc.loadPackage ("ti.sdo.edma3.rm");

var socType           = "am571x";

var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = "am571x";

/* Load the OSAL package */ 
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = socType;

/* Load the driver packages, starting with mcasp */
var McASP               = xdc.loadPackage('ti.drv.mcasp');
McASP.Settings.socType  = socType;

/* Load the i2c package */
var I2C               = xdc.loadPackage('ti.drv.i2c');
I2C.Settings.socType  = socType;

/* Load the uart package */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType  = socType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "idkAM571x";

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x2000;
BIOS.cpuFreq.lo = 1000000000;
BIOS.libType = BIOS.LibType_Custom;

Clock.tickPeriod = 1000;

/* Enable the cache                                                           */
var Cache  = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
Cache.enableCache = true;

/* Enable the MMU (Required for L1/L2 caching)                              */

/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');
Mmu.enableMMU = true;

/******************************************************************************
 *
 * SYS/BIOS assigns the following defaults to MAIR0 ATTR0, ATTR1 and ATTR2:
 * 
 * ATTR0 -> 0x44 (mark memory region as non-cacheable normal memory)
 * ATTR1 -> 0x04 (mark memory region as device memory, i.e. strongly
 * ordered and non-cacheable)
 * ATTR2 -> 0xFF (mark memory region as normal memory, RW cacheable and
 * RW allocate)
 ******************************************************************************
 */
var attrs = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(attrs);
attrs.type = Mmu.DescriptorType_BLOCK;
attrs.noExecute = true;
attrs.accPerm = 0;
attrs.attrIndx = 1;
/* Set IO Delay configuration areas as non-cache */
Mmu.setSecondLevelDescMeta(0x4844a000, 0x4844a000, attrs);
Mmu.setSecondLevelDescMeta(0x4ae07d00, 0x4ae07d00, attrs);


/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x20000;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;
System.SupportProxy = SysMin;

/* 
 * Create and install logger for the whole system
 */
/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

if (Program.build.target.$name.match(/gnu/)) {
    if (Program.build.target.$name.match(/A8F/) ||
        Program.build.target.$name.match(/A9F/) ||
        Program.build.target.$name.match(/A15F/)) {
        var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
    }
}


/* allocate a config-params object */  
var HeapParam = new HeapMem.Params;  
  
/* optionally assign per-instance configs */  
HeapParam.size = 200000;
//HeapParam.sectionName = "L2SRAM"
  
/* create an instance-object */  
Program.global.myHeap = HeapMem.create(HeapParam);  

var task0Params = new Task.Params();
task0Params.priority = 5;
task0Params.instance.name = "task0";

Program.global.task0 = Task.create("&Audio_echo_Task", task0Params);

var Load = xdc.useModule('ti.sysbios.utils.Load');
 // Load.common$.logger = loggerBuf0;
var Diags = xdc.useModule('xdc.runtime.Diags');
Load.common$.diags_USER4 = Diags.ALWAYS_ON;



/* No runtime stack checking is performed */
// Task.checkStackFlag = false;


/* Reduce the number of task priorities */
// Task.numPriorities = 6;
var attrs0 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs0);
attrs0.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs0.shareable = 2;                      // sharerable
attrs0.attrIndx = 1;                       // Non-cache, device memory

// Set the descriptor for each entry in the address range
for (var i=0x40000000; i < 0x60000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs0);
}
// descriptor attribute structure
var attrs1 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs1);
attrs1.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs1.shareable = 2;                      // sharerable
attrs1.attrIndx = 2;                       // Cached, normal memory

// Set the descriptor for each entry in the address range
for (var i=0x80000000; i < 0xA0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs1);
}


/* ================ Memory sections configuration ================ */
Program.sectMap["BOARD_IO_DELAY_DATA"] = "OCMC_RAM1";
Program.sectMap["BOARD_IO_DELAY_CODE"] = "OCMC_RAM1";
