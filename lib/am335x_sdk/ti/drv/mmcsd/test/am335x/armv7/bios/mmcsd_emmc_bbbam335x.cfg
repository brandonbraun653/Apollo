var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
//var Log = xdc.useModule('xdc.runtime.Log');
//var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
//var gic_Hwi = xdc.useModule('ti.sysbios.family.arm.gic.Hwi');
//var ti_sysbios_family_arm_a8_intcps_Hwi = xdc.useModule('ti.sysbios.family.arm.a8.intcps.Hwi');

var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache')

var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
//var Timestamp = xdc.useModule('xdc.runtime.Timestamp');  //Enable if Timestamp_get32 is used in application
//var GateAll = xdc.useModule('ti.sysbios.gates.GateAll');
var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
//var Mmu = xdc.useModule('ti.sysbios.family.a9.Mmu');
//var Mmu = xdc.useModule('ti.sysbios.family.arm.arm9.Mmu');
var SemihostSupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

var socType           = "am335x";
/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = socType;

/* Load the OSAL package */
var osType = "tirtos";
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = socType;
/* Load the I2C package */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = socType;

/* Load the board package */
var Board = xdc.loadPackage('ti.board');

Board.Settings.boardName = "bbbAM335x";


/* Load the uart package */
var UartPackage = xdc.loadPackage('ti.drv.uart');

/* Load Profiling package */
var Utils = xdc.loadPackage('ti.utils.profiling');

/* Load the MMCSD package */
var Mmcsd = xdc.loadPackage('ti.drv.mmcsd');
Mmcsd.Settings.enableProfiling = true;
var Fatfs = xdc.loadPackage('ti.fs.fatfs');

/* Load the GPIO package */
var GPIO = xdc.loadPackage('ti.drv.gpio');


/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;


/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;
System.extendedFormats += "%f";
/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */
Error.raiseHook = null;
/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */
Text.isLoaded = false;
/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;


/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 32000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x4000;


/*
 * Create and install logger for the whole system
 */
//var loggerBufParams = new LoggerBuf.Params();
//loggerBufParams.numEntries = 16;
//var logger0 = LoggerBuf.create(loggerBufParams);
//Defaults.common$.logger = logger0;
//Main.common$.diags_INFO = Diags.ALWAYS_ON;


Swi.common$.namedInstance = true;
BIOS.libType = BIOS.LibType_Custom;
BIOS.customCCOpts = BIOS.customCCOpts.replace(" -g ","");
//BIOS.customCCOpts = "--endian=little -mv7A8 --abi=eabi --neon --float_support=vfpv3 -q -ms --program_level_compile -o3 --opt_for_speed=3"
//BIOS.customCCOpts ="-mcpu=cortex-a9 -mfpu=neon -mfloat-abi=hard -mabi=aapcs -O3 -Wunused -Wunknown-pragmas -ffunction-sections -fdata-sections -g -Dti_sysbios_Build_useHwiMacros -Dfar= -D__DYNAMIC_REENT__"
BIOS.assertsEnabled = false;
Program.sectionsExclude = ".*";


/*var Agent = xdc.useModule('ti.sysbios.rta.Agent');
Agent.sysbiosHwiLogging = true;
Agent.sysbiosSwiLogging = false;
Agent.sysbiosTaskLoggingRuntimeControl = false;
Agent.sysbiosLoggerSize = 35000;
Agent.loadLogging = false;
Agent.loadLoggingRuntimeControl = false;
Agent.mainLogging = false;
Agent.mainLoggingRuntimeControl = false;
BIOS.logsEnabled = true;*/

Clock.tickPeriod = 1000;
Hwi.dispatcherSwiSupport = true;
Hwi.dispatcherTaskSupport = true;
Hwi.dispatcherAutoNestingSupport = true;
//Hwi.initStackFlag = false;
//Hwi.checkStackFlag = false;
BIOS.logsEnabled = false;
//BIOS.runtimeCreatesEnabled = false;
BIOS.swiEnabled = true;
Task.enableIdleTask = false;
Task.initStackFlag = false;
Task.checkStackFlag = false;
//BIOS.cpuFreq.lo = 600000000;
//Cache.configureL2Sram = false;//DDR build



Mmu.enableMMU = true;

// Force peripheral section to be NON cacheable strongly-ordered memory
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : true,                 // not executable
};

// Define the base address of the 1 Meg page
// the peripheral resides in.
var peripheralBaseAddr = 0x44e00400;;

// Configure the corresponding MMU page descriptor accordingly
Mmu.setFirstLevelDescMeta(peripheralBaseAddr,
                          peripheralBaseAddr,
                          peripheralAttrs);


// Define the base address of the 1 Meg page
// the peripheral resides in.
var peripheralBaseAddr = 0x481a6000;

// Configure the corresponding MMU page descriptor accordingly
Mmu.setFirstLevelDescMeta(peripheralBaseAddr,
                          peripheralBaseAddr,
                          peripheralAttrs);

/* Define and add one Task Hook Set */
Task.addHookSet({
	registerFxn: '&TaskRegisterId',
	switchFxn: '&mySwitch',
});
Program.sectMap[".benchmark_buffer"] = "DDR3";
