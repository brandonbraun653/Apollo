var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Edma        	= xdc.loadPackage ("ti.sdo.edma3.drv.sample");
var drv        		= xdc.loadPackage ("ti.sdo.edma3.drv");
var rm        		= xdc.loadPackage ("ti.sdo.edma3.rm");

var ti_sysbios_family_arm_gic_Hwi = xdc.useModule('ti.sysbios.family.arm.gic.Hwi');
var Cache = xdc.useModule('ti.sysbios.hal.Cache');
var CpIntc                      =   xdc.useModule('ti.sysbios.family.arm.a15.tci66xx.CpIntc');
var devType = "k2g"
var socType           = "k2g";
/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = socType;

/* Load the OSAL package */
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/* Load Profiling package */
var Utils = xdc.loadPackage('ti.utils.profiling');

/* Load the MMCSD package */
var Mmcsd = xdc.loadPackage('ti.drv.mmcsd');
Mmcsd.Settings.enableProfiling = true;
Mmcsd.Settings.useDma = "true";
Mmcsd.Settings.socType = socType;

var Fatfs = xdc.loadPackage('ti.fs.fatfs');

/* Load the GPIO package */
var GPIO = xdc.loadPackage('ti.drv.gpio');

/* Load the UART package */
var UART = xdc.loadPackage('ti.drv.uart');    

UART.Settings.socType = devType;  

/* Load the I2C package */
var I2c 			= xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = devType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmK2G";

/*var Clock.TimerProxy = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');*/
/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;
System.extendedFormats += "%f";
/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */


/* No runtime stack checking is performed */
Task.checkStackFlag = false;


/* Reduce the number of task priorities */
Task.numPriorities = 4;


//var exception			                =	xdc.useModule('ti.sysbios.family.arm.gic');
//exception.enablePrint = true;



/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x30000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x20000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;


//var Cache = xdc.useModule('ti.sysbios.hal.Cache');
//Cache.CacheProxy = xdc.useModule('ti.sysbios.hal.CacheNull');

var Cache1  = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
var Mmu = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');

/* Enable the cache                                                           */
Cache1.enableCache = true;

/* Enable the MMU (Required for L1 data caching)                              */
Mmu.enableMMU = true;

// Configure the corresponding MMU page descriptor accordingly
var attrs = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(attrs);
attrs.type = Mmu.DescriptorType_BLOCK;// BLOCK descriptor
attrs.noExecute = true;// not executable
attrs.accPerm = 0;// read/write at PL1
attrs.attrIndx = 1;// MAIR0 Byte1 describes
                                                  // memory attributes for
                                                  // each BLOCK MMU entry
// Define the base address of the 2 MB page
// the peripheral resides in.
var peripheralBaseAddrs = [ 
  { base: 0x4ae00000, size: 0x00100000 },  // PRM
  { base: 0x023000000, size: 0x00000400 },  // MMCHS 0 regs
  { base: 0x023100000, size: 0x00000400 }   // MMCHS 1 regs
];

// Configure the corresponding MMU page descriptor accordingly
for (var i =0; i < peripheralBaseAddrs.length; i++)
{
      var addr = peripheralBaseAddrs[i].base;
      Mmu.setSecondLevelDescMeta(addr, addr, attrs);
  }

/* Set IO Delay configuration areas as non-cache */
/* Mmu.setSecondLevelDescMeta(0x4844a000, 0x4844a000, attrs);
Mmu.setSecondLevelDescMeta(0x4ae07d00, 0x4ae07d00, attrs);
*/

if (Program.build.target.$name.match(/gnu/)) {
    if (Program.build.target.$name.match(/A8F/) ||
        Program.build.target.$name.match(/A9F/) ||
        Program.build.target.$name.match(/A15F/)) {
        var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
    }
}
/* Define and add one Task Hook Set */
Task.addHookSet({
	registerFxn: '&TaskRegisterId',
	switchFxn: '&mySwitch',
});
Program.sectMap[".benchmark_buffer"] = "DDR3";
