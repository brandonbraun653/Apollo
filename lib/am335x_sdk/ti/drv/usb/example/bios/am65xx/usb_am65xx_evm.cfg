
/**
 *  \file   usb_am65xx.cfg
 *
 *  \brief  Sysbios config file for USB example project on AM65XX EVM.
 *
 */

/*
 * Copyright (C) 2018-2019 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Program      = xdc.useModule("xdc.cfg.Program");
/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
/* Program.argSize = 0x0; */
Program.heap            = 0x10000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Enable SMP mode in BIOS if SMP is enabled from makefile */
var smp = java.lang.System.getenv("SMP")
if(smp == 'enable')
{
    xdc.print("Enabling BIOS SMP mode");
    var BIOS = xdc.useModule('ti.sysbios.BIOS');
    BIOS.smpEnabled = true;
    var Cache = xdc.module("ti.sysbios.hal.Cache");
}

if (java.lang.String(Program.build.target.suffix).contains('a53'))
{
    var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
}
else if (java.lang.String(Program.build.target.suffix).contains('r5'))
{
    var Hwi = xdc.useModule('ti.sysbios.family.arm.v7r.keystone3.Hwi');
}

/* enabling printing float number */
System.extendedFormats += "%f";


/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

/* ================ BIOS configuration ================ */
var BIOS = xdc.useModule('ti.sysbios.BIOS');

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.heapSize = 0x10000;

/* the following frequency settings will not be necessary when BIOS is 
   updated for Maxwell */
if (java.lang.String(Program.build.target.suffix).contains('a53'))
{
    BIOS.cpuFreq.lo = 800000000;
    BIOS.cpuFreq.hi = 0;

    var Timer = xdc.useModule('ti.sysbios.family.arm.v8a.Timer');
    Timer.intFreq.lo = 200000000;
    Timer.intFreq.hi = 0;

    var dmTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
    for (var i = 0; i < 12; i++) {
        dmTimer.intFreqs[i].lo = 25000000;
        dmTimer.intFreqs[i].hi = 0;
    }
}
else if (java.lang.String(Program.build.target.suffix).contains('r5'))
{
    // Clock.timerId = 1; 
    // ROM leaves timer 0 running faster than 25MHz. 
    // Either set Clock.timerId = 1 or run the BIOS suplied Maxwell R5 gel 
    // if using timerId 1 then the timer.c file needs to use TIMERID 2 for the delay timer

    var BIOS = xdc.module('ti.sysbios.BIOS');
    BIOS.cpuFreq.lo = 400000000;
    BIOS.cpuFreq.hi = 0;

    var dmtimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
    for (var i = 0; i < 4; i++) {
        dmtimer.intFreqs[i].lo = 25000000;
        dmtimer.intFreqs[i].hi = 0;
    }
}
else
{
}

/* ================ Driver configuration ================ */
/* drivers libaries are loaded from the bios project file */

/* ================ Cache and MMU configuration ================ */

if (java.lang.String(Program.build.target.suffix).contains('a53'))
{
    //var Cache = xdc.module("ti.sysbios.hal.Cache");
    //Cache.CacheProxy = xdc.useModule("ti.sysbios.family.arm.v8a.Cache");

    var Mmu = xdc.useModule('ti.sysbios.family.arm.v8a.Mmu');
    Mmu.initFunc = "&InitMmu";
    Mmu.tableArrayLen = 24;


    /* ================ Memory sections configuration ================ */
    Program.sectMap[".bss:extMemNonCache:usbXhci"]              = "MSMC_SRAM_H_NOCACHE";
    Program.sectMap[".bss:extMemCache:ramdisk"]                 = new Program.SectionSpec();
    Program.sectMap[".bss:extMemCache:ramdisk"].loadSegment     = "DDR_0";
    Program.sectMap[".bss:extMemCache:ramdisk"].type            = "NOLOAD";
}
else if (java.lang.String(Program.build.target.suffix).contains('r5'))
{
    var Cache = xdc.useModule('ti.sysbios.family.arm.v7r.Cache');
    Cache.enableCache = true;

    xdc.loadCapsule("r5_mpu.xs");

    /* ================ Memory sections configuration ================ */
    Program.sectMap[".bss:extMemNonCache:usbXhci"]              = "MSMC3_NOCACHE";
    Program.sectMap[".bss:extMemCache:ramdisk"]                 = new Program.SectionSpec();
    Program.sectMap[".bss:extMemCache:ramdisk"].loadSegment     = "DDR0"; /* "APP_CACHED_DATA_BLK2_MEM" */
    Program.sectMap[".bss:extMemCache:ramdisk"].type            = "NOLOAD";

}
else
{
    /* unknown core */
}



