/**
 *  \file   usb_dra7xx.cfg
 *
 *  \brief  Sysbios config file for USB example projects on DRA7xx EVMs.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ================ General configuration ================ */
var Defaults  = xdc.useModule('xdc.runtime.Defaults');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var Error     = xdc.useModule('xdc.runtime.Error');
var Log       = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main      = xdc.useModule('xdc.runtime.Main');
var Memory    = xdc.useModule('xdc.runtime.Memory');
var SysMin    = xdc.useModule('xdc.runtime.SysMin');
var System    = xdc.useModule('xdc.runtime.System');
var Text      = xdc.useModule('xdc.runtime.Text');
var Clock     = xdc.useModule('ti.sysbios.knl.Clock');
var Swi       = xdc.useModule('ti.sysbios.knl.Swi');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi       = xdc.useModule('ti.sysbios.hal.Hwi');
var IntXbar   = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
var Program   = xdc.useModule("xdc.cfg.Program");
var Timer     = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
/* Program.argSize = 0x0; */
Program.heap = 0x10000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x20000;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
/*Defaults.common$.namedModule = false;*/

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0         = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger    = logger0;
Main.common$.diags_INFO    = Diags.ALWAYS_ON;

/* ================ BIOS configuration ================ */

var BIOS = xdc.useModule('ti.sysbios.BIOS');
/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType  = BIOS.LibType_Custom;

BIOS.heapSize = 0x10000;

/* ================ Driver configuration ================ */
var soc   = Program.build.cfgArgs.SOC.toLowerCase();
var board = Program.build.cfgArgs.BOARD;
xdc.print("# !!!  Current soc is [" + soc + "] !!!");
xdc.print("# !!!  Current board is [" + board + "] !!!");

/* CSL - for Cross bar configuration - if needed */
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = soc;

/* Load the OSAL package */
var osType = "tirtos";
var Osal   = xdc.loadPackage('ti.osal');
Osal.Settings.osType = osType;

/* Load the uart package */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType = soc;

/* Load the I2C package - board package needs this to read EVM ID */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = soc;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = board;

var Usb = xdc.loadPackage('ti.drv.usb');
Usb.Settings.socType = soc;

/* fat file system for USB host example */
var Fatfs = xdc.loadPackage('ti.fs.fatfs');

/* ================ Cache and MMU configuration ================ */
if (java.lang.String(Program.build.target.suffix).contains('a15'))
{
    var Cache = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
    var Mmu   = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');

    /* Enable cache */
    Cache.enableCache = true;

    /* Enable the MMU (Required for L1 data caching) */
    Mmu.enableMMU = true;

    var attrs = new Mmu.DescriptorAttrs();
    Mmu.initDescAttrsMeta(attrs);
    attrs.type      = Mmu.DescriptorType_BLOCK;
    attrs.accPerm   = 0;     /* R/W at PL1 */
    attrs.attrIndx  = 7;     /* Use MAIR0 Byte7 */
    Mmu.setMAIRMeta(7, 0x04);

    /* Using OCMC_RAM1 as uncached bank for xHCI data structure */
    Mmu.setSecondLevelDescMeta(0x40300000, 0x40300000, attrs);

    /* Set IO Delay configuration areas as non-cache */
    attrs.attrIndx = 1;
    attrs.noExecute = true;
    Mmu.setSecondLevelDescMeta(0x4844a000, 0x4844a000, attrs); /* IODELAYCONFIG */
    Mmu.setSecondLevelDescMeta(0x4ae07d00, 0x4ae07d00, attrs); /* ? */

    Mmu.setSecondLevelDescMeta(0x48880000, 0x48880000, attrs); /* USB1 */
    Mmu.setSecondLevelDescMeta(0x488C0000, 0x488C0000, attrs); /* USB2 */

    var OCMC1_REGION_NAME = "OCMC_RAM1";
}
else if (java.lang.String(Program.build.target.suffix).contains('m4'))
{
    /* Enable cache */
    var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = true;

    /* Use AMMU module */
    var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');

    /* Large PAGE */
    AMMU.largePages[0].pageEnabled        = AMMU.Enable_YES;
    AMMU.largePages[0].logicalAddress     = 0x40000000;
    AMMU.largePages[0].translatedAddress  = 0x40000000;
    AMMU.largePages[0].translationEnabled = AMMU.Enable_YES;
    AMMU.largePages[0].size               = AMMU.Large_512M;
    AMMU.largePages[0].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[0].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.largePages[0].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[0].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.largePages[1].pageEnabled        = AMMU.Enable_YES;
    AMMU.largePages[1].logicalAddress     = 0x80000000;
    AMMU.largePages[1].translatedAddress  = 0x80000000;
    AMMU.largePages[1].translationEnabled = AMMU.Enable_YES;
    AMMU.largePages[1].size               = AMMU.Large_512M;
    AMMU.largePages[1].L1_writePolicy     = AMMU.WritePolicy_WRITE_BACK;
    AMMU.largePages[1].L1_allocate        = AMMU.AllocatePolicy_ALLOCATE;
    AMMU.largePages[1].L1_cacheable       = AMMU.CachePolicy_CACHEABLE;
    AMMU.largePages[1].L1_posted          = AMMU.PostedPolicy_POSTED;
    AMMU.largePages[1].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[1].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.largePages[2].pageEnabled        = AMMU.Enable_YES;
    AMMU.largePages[2].logicalAddress     = 0xA0000000;
    AMMU.largePages[2].translatedAddress  = 0xA0000000;
    AMMU.largePages[2].translationEnabled = AMMU.Enable_YES;
    AMMU.largePages[2].size               = AMMU.Large_512M;
    AMMU.largePages[2].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[2].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.largePages[2].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[2].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.largePages[3].pageEnabled        = AMMU.Enable_YES;
    AMMU.largePages[3].logicalAddress     = 0x60000000;
    AMMU.largePages[3].translatedAddress  = 0x40000000;
    AMMU.largePages[3].translationEnabled = AMMU.Enable_YES;
    AMMU.largePages[3].size               = AMMU.Large_512M;
    AMMU.largePages[3].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[3].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.largePages[3].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[3].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    /* Medium Page */
    AMMU.mediumPages[0].pageEnabled        = AMMU.Enable_YES;
    AMMU.mediumPages[0].logicalAddress     = 0x00300000;
    AMMU.mediumPages[0].translatedAddress  = 0x40300000;
    AMMU.mediumPages[0].translationEnabled = AMMU.Enable_YES;
    AMMU.mediumPages[0].size               = AMMU.Medium_256K;

    AMMU.mediumPages[1].pageEnabled        = AMMU.Enable_YES;
    AMMU.mediumPages[1].logicalAddress     = 0x00400000;
    AMMU.mediumPages[1].translatedAddress  = 0x40400000;
    AMMU.mediumPages[1].translationEnabled = AMMU.Enable_YES;
    AMMU.mediumPages[1].size               = AMMU.Medium_256K;
    AMMU.mediumPages[1].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.mediumPages[1].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.mediumPages[1].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.mediumPages[1].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    /* Small Page */
    AMMU.smallPages[0].pageEnabled        = AMMU.Enable_YES;
    AMMU.smallPages[0].logicalAddress     = 0x00000000;
    AMMU.smallPages[0].translatedAddress  = 0x55020000;
    AMMU.smallPages[0].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[0].size               = AMMU.Small_16K;
    AMMU.smallPages[0].volatileQualifier  = AMMU.Volatile_FOLLOW;
    AMMU.smallPages[0].L1_cacheable       = AMMU.CachePolicy_CACHEABLE;
    AMMU.smallPages[0].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.smallPages[0].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[0].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.smallPages[1].pageEnabled        = AMMU.Enable_YES;
    AMMU.smallPages[1].logicalAddress     = 0x40000000;
    AMMU.smallPages[1].translatedAddress  = 0x55080000;
    AMMU.smallPages[1].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[1].size               = AMMU.Small_16K;
    AMMU.smallPages[1].volatileQualifier  = AMMU.Volatile_FOLLOW;
    AMMU.smallPages[1].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[1].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.smallPages[1].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[1].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.smallPages[2].pageEnabled        = AMMU.Enable_YES;
    AMMU.smallPages[2].logicalAddress     = 0x00004000;
    AMMU.smallPages[2].translatedAddress  = 0x55024000;
    AMMU.smallPages[2].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[2].size               = AMMU.Small_16K;
    AMMU.smallPages[2].L1_cacheable       = AMMU.CachePolicy_CACHEABLE;
    AMMU.smallPages[2].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.smallPages[2].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[2].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.smallPages[3].pageEnabled        = AMMU.Enable_YES;
    AMMU.smallPages[3].logicalAddress     = 0x00008000;
    AMMU.smallPages[3].translatedAddress  = 0x55028000;
    AMMU.smallPages[3].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[3].size               = AMMU.Small_16K;
    AMMU.smallPages[3].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[3].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.smallPages[3].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[3].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    AMMU.smallPages[4].pageEnabled        = AMMU.Enable_YES;
    AMMU.smallPages[4].logicalAddress     = 0x20000000;
    AMMU.smallPages[4].translatedAddress  = 0x55020000;
    AMMU.smallPages[4].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[4].size               = AMMU.Small_16K;
    AMMU.smallPages[4].L1_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[4].L1_posted          = AMMU.PostedPolicy_NON_POSTED;
    AMMU.smallPages[4].L2_cacheable       = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.smallPages[4].L2_posted          = AMMU.PostedPolicy_NON_POSTED;

    Program.linkTemplate = xdc.findFile("ti/build/dra7xx/linkcmd.xdt");
    var OCMC1_REGION_NAME = "OCMC_RAM1_VIRT";
}

/* ================ Memory sections configuration ================ */
Program.sectMap["BOARD_IO_DELAY_DATA"] = OCMC1_REGION_NAME;
Program.sectMap["BOARD_IO_DELAY_CODE"] = OCMC1_REGION_NAME;

Program.sectMap[".bss:extMemNonCache:usbXhci"]          = OCMC1_REGION_NAME;
Program.sectMap[".bss:extMemCache:ramdisk"]             = new Program.SectionSpec();
Program.sectMap[".bss:extMemCache:ramdisk"].loadSegment = "EXT_RAM";
Program.sectMap[".bss:extMemCache:ramdisk"].type        = "NOLOAD";

