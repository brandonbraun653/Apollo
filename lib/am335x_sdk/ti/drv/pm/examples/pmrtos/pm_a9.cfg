/**
 *  \file   pm_a9.cfg
 *
 *  \brief  Sysbios config file for pm example projects on AM437x.
 *
 */

/*
 * Copyright (C) 2016 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* ================ General configuration ================ */
var Task        = xdc.useModule("ti.sysbios.knl.Task");
var Idle        = xdc.useModule("ti.sysbios.knl.Idle");
var BIOS        = xdc.useModule("ti.sysbios.BIOS");
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf     = xdc.useModule("ti.sysbios.heaps.HeapBuf");
var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
var SemihostSupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
var Startup     = xdc.useModule("xdc.runtime.Startup");

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;


/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */
Defaults.common$.namedModule = false;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */
Error.raiseHook = null;
/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */
Text.isLoaded = false;
/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* ================ BIOS configuration ================ */

/* for debug */
//BIOS.libType = BIOS.LibType_Debug;
//BIOS.libType = BIOS.LibType_Custom;
//BIOS.customCCOpts = BIOS.customCCOpts.replace(" -g ","");

BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 600000000; /* 600 MHz */
BIOS.smpEnabled = false;

Startup.firstFxns[Startup.firstFxns.length++] = "&initTimers";

/***********************************************
 *          Reset Module Configuraion        *
 ***********************************************/
var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns[Reset.fxns.length++] = "&appReset";

/* ================ Driver configuration ================ */

/* Load the Osal package */
var osType           = "tirtos";
var Osal             = xdc.loadPackage('ti.osal');
Osal.Settings.osType = osType;

/*use CSL package*/
var socType           = "am437x";
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = socType;

/* Load the board package */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmAM437x";

/* Load the uart package */
var UartPackage = xdc.loadPackage('ti.drv.uart');

/* Load the i2c package */
var I2C               = xdc.loadPackage('ti.drv.i2c');
I2C.Settings.socType  = socType;

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;

/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x4000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x400000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

Program.sectMap["IRAM_CODE"] = "OCMCRAM";

/* Clock tick in microseconds */
Clock.tickPeriod    = 1000;

/* Assign GPTimer3 to be used for BIOS Clock 1-ms tick */
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* Add the Power_idleFunc to the Idle task to invoke CPU idle mode when
 * power policy is enabled */
Idle.addFunc('&Power_idleFunc');

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
/* Set to 1-ms Tick and Enable Wakeup for OVF interrupt */
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams = new Timer.Params();
timerParams.period = 1000 * 10;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tsicr.posted = 0;
/* Timer ID = 3 for GPTimer2 and input clock runs at 24 MHz */
Timer.intFreqs[3].hi = 0;
Timer.intFreqs[3].lo = 24000000;
Timer.create(3, '&mainTimerTick', timerParams);

/* Assign GPTimer4 to be used for Timestamp */
/* Timer ID = 4 for GPTimer4 and input clock runs at 24 MHz */
var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[4].hi = 0;
DMTimer.intFreqs[4].lo = 24000000;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 4;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

/* Indicate GPT3 & GPT4 are used */
var TimerSupport = xdc.useModule('ti.sysbios.family.arm.a9.am437x.TimerSupport');
TimerSupport.availMask = 0x0018;

/* ================ Cache and MMU configuration ================ */

var Cache = xdc.useModule('ti.sysbios.family.arm.a9.Cache');
Cache.enableCache = true; 

var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
Mmu.enableMMU = true;

// descriptor attribute structure
var attrs0 = new Mmu.FirstLevelDescAttrs();

var attrs0 = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                 // bufferable
    cacheable  : true,                 // cacheable
    shareable  : true,                 // shareable
    noexecute  : false,                // executable
};

// Set the descriptor for each entry in the address range
// Set OCMC memories as shareable and cacheable in case Board package is used
for (var i=0x40300000; i < 0x40400000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs0);
}

/* Force peripheral section to be NON cacheable strongly-ordered memory */
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : true,                 // not executable
};

// Set the descriptor for each entry in the address range
// MMR region configured as non-cacheable, device memory.
for (var i=0x40400000; i < 0x60000000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, peripheralAttrs);
}

var attrs1 = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                 // bufferable
    cacheable  : true,                 // cacheable
    shareable  : true,                 // shareable
    noexecute  : false,                // not executable
};

// Set the descriptor for each entry in the address range
for (var i=0x80000000; i < 0xA0000000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs1);
}

var attrs2 = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                 // bufferable
    cacheable  : false,                // cacheable
    shareable  : true,                 // shareable
    noexecute  : false,                // not executable
};

// Set the descriptor for each entry in the address range
for (var i=0xA0000000; i < 0xC0000000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs2);
}
