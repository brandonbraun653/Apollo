
/**
 *  \file   pm_c66.cfg
 *
 *  \brief  Sysbios config file for PM RTOS example project on K2G EVM.
 *
 */

/*
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Program = xdc.useModule("xdc.cfg.Program");
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');

/*
 *  ======== Miscellaneous Configuration ========
 */

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
/*Defaults.common$.namedModule = false;*/

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

/***********************************************
 *          Reset Module Configuraion        *
 ***********************************************/
//var Reset = xdc.useModule('xdc.runtime.Reset');
//Reset.fxns[Reset.fxns.length++] = "&appReset";

/* ================ BIOS configuration ================ */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x4000;

Program.sectMap[".pmIdleFunc"] = "L2SRAM";
Program.sectMap[".noinit"]     = "L2SRAM";

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 600000000; /* 600 MHz */
BIOS.smpEnabled = false;
//BIOS.heapSize = 0x10000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
//BIOS.libType = BIOS.LibType_Custom;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x10000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure the required Heap parameters                                     */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var prms    = new HeapMem.Params;
prms.size = 8192;
var heap = HeapMem.create(prms);

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = heap;

/* ================ Driver configuration ================ */
/* CSL - for Cross bar configuration - if needed */
var deviceType           = "k2g";
var Csl                  = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType  = deviceType;

var socType              = "k2g";

/* Load the OSAL package */
var osType = "tirtos";
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = socType;

/* Load the uart package */
var Uart                 = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType    = socType;

/* Load the I2C package - board package needs this to read EVM ID */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType     = socType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmK2G";

var Cache  = xdc.useModule('ti.sysbios.family.c66.Cache');

/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&Power_idleFunc');

/* Assign Timer1 to be used for BIOS Clock 1-ms tick */
/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
/* Set to 1-ms Tick */
var Timer = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var timerParams = new Timer.Params();
timerParams.period = 1000 * 10;
/* Timer ID = 1 for Timer1 and input clock runs at 24 MHz */
Timer.intFreqs[1].hi = 0;
Timer.intFreqs[1].lo = 24000000;
Timer.create(1, '&mainTimerTick', timerParams);
